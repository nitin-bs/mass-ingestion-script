# Generated from ./grammar/Teradata.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0121")
        buf.write("\u0554\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\5\2\u00ad\n\2\3\3\3\3\5\3\u00b1\n\3\3\3\3\3\3")
        buf.write("\3\5\3\u00b6\n\3\3\3\3\3\3\3\5\3\u00bb\n\3\3\3\7\3\u00be")
        buf.write("\n\3\f\3\16\3\u00c1\13\3\3\3\3\3\3\3\5\3\u00c6\n\3\6\3")
        buf.write("\u00c8\n\3\r\3\16\3\u00c9\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\5\3\u00d5\n\3\3\3\3\3\3\3\7\3\u00da\n\3\f\3\16")
        buf.write("\3\u00dd\13\3\5\3\u00df\n\3\3\3\3\3\3\3\3\3\5\3\u00e5")
        buf.write("\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00ee\n\4\3\5\5\5")
        buf.write("\u00f1\n\5\3\5\3\5\5\5\u00f5\n\5\3\5\5\5\u00f8\n\5\3\6")
        buf.write("\5\6\u00fb\n\6\3\6\3\6\3\6\5\6\u0100\n\6\3\6\3\6\3\7\5")
        buf.write("\7\u0105\n\7\3\7\3\7\5\7\u0109\n\7\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\5\b\u0111\n\b\3\t\3\t\5\t\u0115\n\t\3\t\3\t\5\t\u0119")
        buf.write("\n\t\3\t\3\t\5\t\u011d\n\t\3\t\3\t\3\n\3\n\3\n\5\n\u0124")
        buf.write("\n\n\3\n\3\n\3\n\3\n\7\n\u012a\n\n\f\n\16\n\u012d\13\n")
        buf.write("\3\n\5\n\u0130\n\n\3\13\3\13\3\13\3\13\3\f\3\f\3\r\3\r")
        buf.write("\3\r\3\r\5\r\u013c\n\r\3\16\3\16\3\17\3\17\3\17\3\17\3")
        buf.write("\20\3\20\3\20\3\20\7\20\u0148\n\20\f\20\16\20\u014b\13")
        buf.write("\20\3\21\3\21\5\21\u014f\n\21\3\21\3\21\3\21\3\21\3\22")
        buf.write("\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\7\24")
        buf.write("\u0160\n\24\f\24\16\24\u0163\13\24\5\24\u0165\n\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\7\24\u016c\n\24\f\24\16\24\u016f")
        buf.write("\13\24\5\24\u0171\n\24\3\24\3\24\3\24\3\24\3\24\7\24\u0178")
        buf.write("\n\24\f\24\16\24\u017b\13\24\5\24\u017d\n\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\7\24\u0184\n\24\f\24\16\24\u0187\13\24")
        buf.write("\5\24\u0189\n\24\3\24\5\24\u018c\n\24\3\24\3\24\5\24\u0190")
        buf.write("\n\24\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u0198\n\25\3")
        buf.write("\25\7\25\u019b\n\25\f\25\16\25\u019e\13\25\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\5\26\u01a8\n\26\3\27\3\27")
        buf.write("\5\27\u01ac\n\27\3\27\3\27\5\27\u01b0\n\27\3\30\3\30\5")
        buf.write("\30\u01b4\n\30\3\30\3\30\5\30\u01b8\n\30\3\30\7\30\u01bb")
        buf.write("\n\30\f\30\16\30\u01be\13\30\3\30\5\30\u01c1\n\30\3\30")
        buf.write("\5\30\u01c4\n\30\3\30\5\30\u01c7\n\30\3\30\5\30\u01ca")
        buf.write("\n\30\3\30\5\30\u01cd\n\30\3\31\3\31\3\31\3\31\7\31\u01d3")
        buf.write("\n\31\f\31\16\31\u01d6\13\31\3\31\7\31\u01d9\n\31\f\31")
        buf.write("\16\31\u01dc\13\31\3\32\3\32\3\32\3\33\3\33\3\33\3\34")
        buf.write("\3\34\3\34\3\35\3\35\3\35\3\35\3\35\7\35\u01ec\n\35\f")
        buf.write("\35\16\35\u01ef\13\35\3\35\3\35\3\35\3\35\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\35\7\35\u01fb\n\35\f\35\16\35\u01fe\13")
        buf.write("\35\3\35\3\35\5\35\u0202\n\35\3\36\3\36\3\36\3\36\7\36")
        buf.write("\u0208\n\36\f\36\16\36\u020b\13\36\5\36\u020d\n\36\3\36")
        buf.write("\3\36\5\36\u0211\n\36\3\37\3\37\3\37\5\37\u0216\n\37\3")
        buf.write("\37\3\37\3\37\3\37\3\37\7\37\u021d\n\37\f\37\16\37\u0220")
        buf.write("\13\37\5\37\u0222\n\37\3\37\3\37\3\37\5\37\u0227\n\37")
        buf.write("\3\37\3\37\3\37\7\37\u022c\n\37\f\37\16\37\u022f\13\37")
        buf.write("\5\37\u0231\n\37\3 \3 \3!\3!\7!\u0237\n!\f!\16!\u023a")
        buf.write("\13!\3\"\3\"\3\"\3\"\5\"\u0240\n\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\5\"\u0247\n\"\3#\5#\u024a\n#\3#\3#\3#\5#\u024f\n#\3#")
        buf.write("\3#\3#\3#\5#\u0255\n#\3#\3#\5#\u0259\n#\3#\5#\u025c\n")
        buf.write("#\3#\5#\u025f\n#\3$\3$\3$\3$\3$\3$\3$\7$\u0268\n$\f$\16")
        buf.write("$\u026b\13$\3$\3$\5$\u026f\n$\3%\3%\3%\3%\3%\3%\3%\3%")
        buf.write("\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0284\n%\5%\u0286")
        buf.write("\n%\5%\u0288\n%\3%\3%\3&\3&\3&\3&\3\'\3\'\3\'\7\'\u0293")
        buf.write("\n\'\f\'\16\'\u0296\13\'\3(\3(\3(\3(\7(\u029c\n(\f(\16")
        buf.write("(\u029f\13(\3(\3(\3)\3)\5)\u02a5\n)\3*\3*\3*\3*\7*\u02ab")
        buf.write("\n*\f*\16*\u02ae\13*\3*\3*\3+\3+\3+\5+\u02b5\n+\3,\3,")
        buf.write("\5,\u02b9\n,\3,\5,\u02bc\n,\3,\5,\u02bf\n,\3,\3,\3,\3")
        buf.write(",\5,\u02c5\n,\3,\5,\u02c8\n,\3,\5,\u02cb\n,\3,\3,\3,\3")
        buf.write(",\5,\u02d1\n,\3,\5,\u02d4\n,\3,\5,\u02d7\n,\3,\3,\3,\3")
        buf.write(",\3,\3,\7,\u02df\n,\f,\16,\u02e2\13,\5,\u02e4\n,\3,\3")
        buf.write(",\5,\u02e8\n,\3-\5-\u02eb\n-\3-\3-\3-\7-\u02f0\n-\f-\16")
        buf.write("-\u02f3\13-\3-\5-\u02f6\n-\3-\3-\5-\u02fa\n-\5-\u02fc")
        buf.write("\n-\3.\5.\u02ff\n.\3.\3.\3.\3.\7.\u0305\n.\f.\16.\u0308")
        buf.write("\13.\3.\3.\3/\3/\3/\5/\u030f\n/\3/\3/\3\60\3\60\5\60\u0315")
        buf.write("\n\60\3\60\3\60\5\60\u0319\n\60\5\60\u031b\n\60\3\61\3")
        buf.write("\61\3\61\7\61\u0320\n\61\f\61\16\61\u0323\13\61\3\61\5")
        buf.write("\61\u0326\n\61\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\5\63\u0333\n\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\7\63\u033b\n\63\f\63\16\63\u033e\13\63\3\64\3")
        buf.write("\64\5\64\u0342\n\64\3\65\5\65\u0345\n\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\5\65\u034d\n\65\3\65\3\65\3\65\3\65\3")
        buf.write("\65\7\65\u0354\n\65\f\65\16\65\u0357\13\65\3\65\3\65\3")
        buf.write("\65\5\65\u035c\n\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65")
        buf.write("\u0364\n\65\3\65\3\65\3\65\3\65\5\65\u036a\n\65\3\65\5")
        buf.write("\65\u036d\n\65\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66")
        buf.write("\3\66\5\66\u0378\n\66\3\66\3\66\3\66\3\66\3\66\3\66\3")
        buf.write("\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66")
        buf.write("\3\66\3\66\7\66\u038d\n\66\f\66\16\66\u0390\13\66\3\67")
        buf.write("\3\67\3\67\3\67\3\67\5\67\u0397\n\67\3\67\3\67\3\67\3")
        buf.write("\67\3\67\3\67\3\67\5\67\u03a0\n\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u03af")
        buf.write("\n\67\3\67\5\67\u03b2\n\67\3\67\3\67\3\67\3\67\3\67\3")
        buf.write("\67\6\67\u03ba\n\67\r\67\16\67\u03bb\3\67\3\67\5\67\u03c0")
        buf.write("\n\67\3\67\3\67\3\67\3\67\6\67\u03c6\n\67\r\67\16\67\u03c7")
        buf.write("\3\67\3\67\5\67\u03cc\n\67\3\67\3\67\3\67\3\67\3\67\3")
        buf.write("\67\3\67\5\67\u03d5\n\67\3\67\5\67\u03d8\n\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u03e4\n")
        buf.write("\67\3\67\3\67\3\67\7\67\u03e9\n\67\f\67\16\67\u03ec\13")
        buf.write("\67\5\67\u03ee\n\67\3\67\3\67\3\67\5\67\u03f3\n\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\3\67\6\67\u03fc\n\67\r\67\16")
        buf.write("\67\u03fd\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\5\67\u040b\n\67\3\67\3\67\3\67\3\67\3\67\6")
        buf.write("\67\u0412\n\67\r\67\16\67\u0413\3\67\3\67\3\67\3\67\3")
        buf.write("\67\3\67\3\67\3\67\7\67\u041e\n\67\f\67\16\67\u0421\13")
        buf.write("\67\38\38\38\58\u0426\n8\39\39\39\39\3:\3:\3:\3:\3:\3")
        buf.write(":\3:\3:\6:\u0434\n:\r:\16:\u0435\5:\u0438\n:\3;\3;\5;")
        buf.write("\u043c\n;\3;\3;\3;\3<\3<\3=\3=\3>\3>\3?\3?\3@\3@\7@\u044b")
        buf.write("\n@\f@\16@\u044e\13@\3A\3A\3A\3A\5A\u0454\nA\3B\5B\u0457")
        buf.write("\nB\3B\3B\5B\u045b\nB\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\5")
        buf.write("C\u0467\nC\3C\5C\u046a\nC\3C\3C\3C\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\5C\u0476\nC\3C\3C\3C\3C\5C\u047c\nC\3C\3C\3C\3C\5C\u0482")
        buf.write("\nC\3C\3C\3C\5C\u0487\nC\3D\3D\3D\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u049b\nE\3E\3E\5E\u049f\n")
        buf.write("E\5E\u04a1\nE\3F\3F\3F\7F\u04a6\nF\fF\16F\u04a9\13F\3")
        buf.write("G\3G\5G\u04ad\nG\3G\3G\3G\5G\u04b2\nG\3H\3H\3H\3H\3H\3")
        buf.write("I\3I\3I\3I\7I\u04bd\nI\fI\16I\u04c0\13I\3J\3J\3J\3J\3")
        buf.write("K\3K\3K\3K\3K\3K\3K\7K\u04cd\nK\fK\16K\u04d0\13K\3K\3")
        buf.write("K\3K\3K\3K\7K\u04d7\nK\fK\16K\u04da\13K\5K\u04dc\nK\3")
        buf.write("K\3K\3K\3K\3K\7K\u04e3\nK\fK\16K\u04e6\13K\5K\u04e8\n")
        buf.write("K\5K\u04ea\nK\3K\5K\u04ed\nK\3K\5K\u04f0\nK\3L\3L\3L\3")
        buf.write("L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u0502\nL\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\5M\u050b\nM\3N\3N\3N\7N\u0510\nN\fN\16")
        buf.write("N\u0513\13N\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O")
        buf.write("\3O\5O\u0524\nO\3P\5P\u0527\nP\3P\3P\3P\5P\u052c\nP\3")
        buf.write("Q\3Q\3R\5R\u0531\nR\3R\3R\5R\u0535\nR\3R\3R\5R\u0539\n")
        buf.write("R\3R\3R\5R\u053d\nR\3R\3R\5R\u0541\nR\3R\3R\5R\u0545\n")
        buf.write("R\3R\3R\5R\u0549\nR\3R\3R\5R\u054d\nR\3R\5R\u0550\nR\3")
        buf.write("S\3S\3S\2\6(djlT\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36")
        buf.write(" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprt")
        buf.write("vxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write("\u00a2\u00a4\2\32\3\2\u0083\u0084\3\2vy\3\2()\3\2[\\\3")
        buf.write("\2\f\r\3\2\u0116\u0117\3\2!\"\4\2\u0106\u0107\u010c\u010c")
        buf.write("\3\2\u0108\u010b\3\2\u0106\u0107\4\2\67\67\u00eb\u00ec")
        buf.write("\3\2\u00ef\u00f1\4\2jj\u00fa\u00fa\3\2\u00f2\u00f3\3\2")
        buf.write("\u00fc\u0103\3\2\u0106\u010f\3\2\32\35\3\2%&\3\2\60\63")
        buf.write("\3\2:>\4\2SS\u0093\u0093\4\2\25\25\u0091\u0091\3\2XY\t")
        buf.write("\2\b\26\30EHHPuz\u00e7\u00e9\u00ec\u010b\u010b\2\u0618")
        buf.write("\2\u00ac\3\2\2\2\4\u00ae\3\2\2\2\6\u00e6\3\2\2\2\b\u00f7")
        buf.write("\3\2\2\2\n\u00fa\3\2\2\2\f\u0108\3\2\2\2\16\u0110\3\2")
        buf.write("\2\2\20\u0112\3\2\2\2\22\u0120\3\2\2\2\24\u0131\3\2\2")
        buf.write("\2\26\u0135\3\2\2\2\30\u0137\3\2\2\2\32\u013d\3\2\2\2")
        buf.write("\34\u013f\3\2\2\2\36\u0143\3\2\2\2 \u014c\3\2\2\2\"\u0154")
        buf.write("\3\2\2\2$\u0157\3\2\2\2&\u0164\3\2\2\2(\u0191\3\2\2\2")
        buf.write("*\u01a7\3\2\2\2,\u01a9\3\2\2\2.\u01b1\3\2\2\2\60\u01ce")
        buf.write("\3\2\2\2\62\u01dd\3\2\2\2\64\u01e0\3\2\2\2\66\u01e3\3")
        buf.write("\2\2\28\u01e6\3\2\2\2:\u0210\3\2\2\2<\u0212\3\2\2\2>\u0232")
        buf.write("\3\2\2\2@\u0234\3\2\2\2B\u0246\3\2\2\2D\u025e\3\2\2\2")
        buf.write("F\u026e\3\2\2\2H\u0270\3\2\2\2J\u028b\3\2\2\2L\u028f\3")
        buf.write("\2\2\2N\u0297\3\2\2\2P\u02a2\3\2\2\2R\u02a6\3\2\2\2T\u02b1")
        buf.write("\3\2\2\2V\u02e7\3\2\2\2X\u02ea\3\2\2\2Z\u02fe\3\2\2\2")
        buf.write("\\\u030e\3\2\2\2^\u0312\3\2\2\2`\u0325\3\2\2\2b\u0327")
        buf.write("\3\2\2\2d\u0332\3\2\2\2f\u033f\3\2\2\2h\u036c\3\2\2\2")
        buf.write("j\u0377\3\2\2\2l\u040a\3\2\2\2n\u0425\3\2\2\2p\u0427\3")
        buf.write("\2\2\2r\u0437\3\2\2\2t\u0439\3\2\2\2v\u0440\3\2\2\2x\u0442")
        buf.write("\3\2\2\2z\u0444\3\2\2\2|\u0446\3\2\2\2~\u0448\3\2\2\2")
        buf.write("\u0080\u044f\3\2\2\2\u0082\u045a\3\2\2\2\u0084\u0486\3")
        buf.write("\2\2\2\u0086\u0488\3\2\2\2\u0088\u04a0\3\2\2\2\u008a\u04a2")
        buf.write("\3\2\2\2\u008c\u04aa\3\2\2\2\u008e\u04b3\3\2\2\2\u0090")
        buf.write("\u04b8\3\2\2\2\u0092\u04c1\3\2\2\2\u0094\u04ef\3\2\2\2")
        buf.write("\u0096\u0501\3\2\2\2\u0098\u050a\3\2\2\2\u009a\u050c\3")
        buf.write("\2\2\2\u009c\u0523\3\2\2\2\u009e\u052b\3\2\2\2\u00a0\u052d")
        buf.write("\3\2\2\2\u00a2\u054f\3\2\2\2\u00a4\u0551\3\2\2\2\u00a6")
        buf.write("\u00ad\5\f\7\2\u00a7\u00ad\5\4\3\2\u00a8\u00ad\5\20\t")
        buf.write("\2\u00a9\u00ad\5\22\n\2\u00aa\u00ad\5\30\r\2\u00ab\u00ad")
        buf.write("\5\34\17\2\u00ac\u00a6\3\2\2\2\u00ac\u00a7\3\2\2\2\u00ac")
        buf.write("\u00a8\3\2\2\2\u00ac\u00a9\3\2\2\2\u00ac\u00aa\3\2\2\2")
        buf.write("\u00ac\u00ab\3\2\2\2\u00ad\3\3\2\2\2\u00ae\u00b0\7`\2")
        buf.write("\2\u00af\u00b1\t\2\2\2\u00b0\u00af\3\2\2\2\u00b0\u00b1")
        buf.write("\3\2\2\2\u00b1\u00b5\3\2\2\2\u00b2\u00b3\7\u00ae\2\2\u00b3")
        buf.write("\u00b6\7\u00ad\2\2\u00b4\u00b6\7\u00af\2\2\u00b5\u00b2")
        buf.write("\3\2\2\2\u00b5\u00b4\3\2\2\2\u00b5\u00b6\3\2\2\2\u00b6")
        buf.write("\u00b7\3\2\2\2\u00b7\u00b8\7a\2\2\u00b8\u00bf\5\\/\2\u00b9")
        buf.write("\u00bb\7\3\2\2\u00ba\u00b9\3\2\2\2\u00ba\u00bb\3\2\2\2")
        buf.write("\u00bb\u00bc\3\2\2\2\u00bc\u00be\5\b\5\2\u00bd\u00ba\3")
        buf.write("\2\2\2\u00be\u00c1\3\2\2\2\u00bf\u00bd\3\2\2\2\u00bf\u00c0")
        buf.write("\3\2\2\2\u00c0\u00d4\3\2\2\2\u00c1\u00bf\3\2\2\2\u00c2")
        buf.write("\u00c7\7\4\2\2\u00c3\u00c5\5\6\4\2\u00c4\u00c6\7\3\2\2")
        buf.write("\u00c5\u00c4\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\u00c8\3")
        buf.write("\2\2\2\u00c7\u00c3\3\2\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00c7")
        buf.write("\3\2\2\2\u00c9\u00ca\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb")
        buf.write("\u00cc\7\5\2\2\u00cc\u00d5\3\2\2\2\u00cd\u00ce\7\13\2")
        buf.write("\2\u00ce\u00cf\7\4\2\2\u00cf\u00d0\5\f\7\2\u00d0\u00d1")
        buf.write("\7\5\2\2\u00d1\u00d2\7^\2\2\u00d2\u00d3\7\u0086\2\2\u00d3")
        buf.write("\u00d5\3\2\2\2\u00d4\u00c2\3\2\2\2\u00d4\u00cd\3\2\2\2")
        buf.write("\u00d4\u00d5\3\2\2\2\u00d5\u00de\3\2\2\2\u00d6\u00db\5")
        buf.write("\n\6\2\u00d7\u00d8\7\3\2\2\u00d8\u00da\5\n\6\2\u00d9\u00d7")
        buf.write("\3\2\2\2\u00da\u00dd\3\2\2\2\u00db\u00d9\3\2\2\2\u00db")
        buf.write("\u00dc\3\2\2\2\u00dc\u00df\3\2\2\2\u00dd\u00db\3\2\2\2")
        buf.write("\u00de\u00d6\3\2\2\2\u00de\u00df\3\2\2\2\u00df\u00e4\3")
        buf.write("\2\2\2\u00e0\u00e1\7O\2\2\u00e1\u00e2\7\u0089\2\2\u00e2")
        buf.write("\u00e3\7U\2\2\u00e3\u00e5\7V\2\2\u00e4\u00e0\3\2\2\2\u00e4")
        buf.write("\u00e5\3\2\2\2\u00e5\5\3\2\2\2\u00e6\u00e7\5\u009cO\2")
        buf.write("\u00e7\u00ed\5\u0084C\2\u00e8\u00e9\7j\2\2\u00e9\u00ee")
        buf.write("\7\u0111\2\2\u00ea\u00eb\7\4\2\2\u00eb\u00ec\7\u0116\2")
        buf.write("\2\u00ec\u00ee\7\5\2\2\u00ed\u00e8\3\2\2\2\u00ed\u00ea")
        buf.write("\3\2\2\2\u00ed\u00ee\3\2\2\2\u00ee\7\3\2\2\2\u00ef\u00f1")
        buf.write("\7\36\2\2\u00f0\u00ef\3\2\2\2\u00f0\u00f1\3\2\2\2\u00f1")
        buf.write("\u00f2\3\2\2\2\u00f2\u00f8\7\u00f9\2\2\u00f3\u00f5\7\36")
        buf.write("\2\2\u00f4\u00f3\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5\u00f6")
        buf.write("\3\2\2\2\u00f6\u00f8\7\u00f4\2\2\u00f7\u00f0\3\2\2\2\u00f7")
        buf.write("\u00f4\3\2\2\2\u00f8\t\3\2\2\2\u00f9\u00fb\7\u00e4\2\2")
        buf.write("\u00fa\u00f9\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\u00fc\3")
        buf.write("\2\2\2\u00fc\u00fd\7\u00e5\2\2\u00fd\u00ff\7\u00e2\2\2")
        buf.write("\u00fe\u0100\5\u009cO\2\u00ff\u00fe\3\2\2\2\u00ff\u0100")
        buf.write("\3\2\2\2\u0100\u0101\3\2\2\2\u0101\u0102\5J&\2\u0102\13")
        buf.write("\3\2\2\2\u0103\u0105\5\36\20\2\u0104\u0103\3\2\2\2\u0104")
        buf.write("\u0105\3\2\2\2\u0105\u0106\3\2\2\2\u0106\u0109\5$\23\2")
        buf.write("\u0107\u0109\5\16\b\2\u0108\u0104\3\2\2\2\u0108\u0107")
        buf.write("\3\2\2\2\u0109\r\3\2\2\2\u010a\u0111\7\u00f6\2\2\u010b")
        buf.write("\u010c\7\u00f7\2\2\u010c\u0111\7\u0088\2\2\u010d\u0111")
        buf.write("\7\u00f5\2\2\u010e\u010f\7E\2\2\u010f\u0111\7\u0088\2")
        buf.write("\2\u0110\u010a\3\2\2\2\u0110\u010b\3\2\2\2\u0110\u010d")
        buf.write("\3\2\2\2\u0110\u010e\3\2\2\2\u0111\17\3\2\2\2\u0112\u0114")
        buf.write("\7d\2\2\u0113\u0115\7g\2\2\u0114\u0113\3\2\2\2\u0114\u0115")
        buf.write("\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u0118\5\\/\2\u0117")
        buf.write("\u0119\5J&\2\u0118\u0117\3\2\2\2\u0118\u0119\3\2\2\2\u0119")
        buf.write("\u011c\3\2\2\2\u011a\u011d\5Z.\2\u011b\u011d\5(\25\2\u011c")
        buf.write("\u011a\3\2\2\2\u011c\u011b\3\2\2\2\u011d\u011e\3\2\2\2")
        buf.write("\u011e\u011f\5&\24\2\u011f\21\3\2\2\2\u0120\u0121\7e\2")
        buf.write("\2\u0121\u0123\5V,\2\u0122\u0124\5\60\31\2\u0123\u0122")
        buf.write("\3\2\2\2\u0123\u0124\3\2\2\2\u0124\u0125\3\2\2\2\u0125")
        buf.write("\u0126\7\u0084\2\2\u0126\u012b\5\24\13\2\u0127\u0128\7")
        buf.write("\3\2\2\u0128\u012a\5\24\13\2\u0129\u0127\3\2\2\2\u012a")
        buf.write("\u012d\3\2\2\2\u012b\u0129\3\2\2\2\u012b\u012c\3\2\2\2")
        buf.write("\u012c\u012f\3\2\2\2\u012d\u012b\3\2\2\2\u012e\u0130\5")
        buf.write("\26\f\2\u012f\u012e\3\2\2\2\u012f\u0130\3\2\2\2\u0130")
        buf.write("\23\3\2\2\2\u0131\u0132\5\u009cO\2\u0132\u0133\7\u00fc")
        buf.write("\2\2\u0133\u0134\5b\62\2\u0134\25\3\2\2\2\u0135\u0136")
        buf.write("\5\62\32\2\u0136\27\3\2\2\2\u0137\u0138\7f\2\2\u0138\u0139")
        buf.write("\7\t\2\2\u0139\u013b\5V,\2\u013a\u013c\5\32\16\2\u013b")
        buf.write("\u013a\3\2\2\2\u013b\u013c\3\2\2\2\u013c\31\3\2\2\2\u013d")
        buf.write("\u013e\5\62\32\2\u013e\33\3\2\2\2\u013f\u0140\7u\2\2\u0140")
        buf.write("\u0141\7a\2\2\u0141\u0142\5\\/\2\u0142\35\3\2\2\2\u0143")
        buf.write("\u0144\7^\2\2\u0144\u0149\5 \21\2\u0145\u0146\7\3\2\2")
        buf.write("\u0146\u0148\5 \21\2\u0147\u0145\3\2\2\2\u0148\u014b\3")
        buf.write("\2\2\2\u0149\u0147\3\2\2\2\u0149\u014a\3\2\2\2\u014a\37")
        buf.write("\3\2\2\2\u014b\u0149\3\2\2\2\u014c\u014e\5\u009cO\2\u014d")
        buf.write("\u014f\7\13\2\2\u014e\u014d\3\2\2\2\u014e\u014f\3\2\2")
        buf.write("\2\u014f\u0150\3\2\2\2\u0150\u0151\7\4\2\2\u0151\u0152")
        buf.write("\5\f\7\2\u0152\u0153\7\5\2\2\u0153!\3\2\2\2\u0154\u0155")
        buf.write("\7\u0097\2\2\u0155\u0156\5\u009aN\2\u0156#\3\2\2\2\u0157")
        buf.write("\u0158\5(\25\2\u0158\u0159\5&\24\2\u0159%\3\2\2\2\u015a")
        buf.write("\u015b\7\25\2\2\u015b\u015c\7\20\2\2\u015c\u0161\5,\27")
        buf.write("\2\u015d\u015e\7\3\2\2\u015e\u0160\5,\27\2\u015f\u015d")
        buf.write("\3\2\2\2\u0160\u0163\3\2\2\2\u0161\u015f\3\2\2\2\u0161")
        buf.write("\u0162\3\2\2\2\u0162\u0165\3\2\2\2\u0163\u0161\3\2\2\2")
        buf.write("\u0164\u015a\3\2\2\2\u0164\u0165\3\2\2\2\u0165\u0170\3")
        buf.write("\2\2\2\u0166\u0167\7\u0092\2\2\u0167\u0168\7\20\2\2\u0168")
        buf.write("\u016d\5b\62\2\u0169\u016a\7\3\2\2\u016a\u016c\5b\62\2")
        buf.write("\u016b\u0169\3\2\2\2\u016c\u016f\3\2\2\2\u016d\u016b\3")
        buf.write("\2\2\2\u016d\u016e\3\2\2\2\u016e\u0171\3\2\2\2\u016f\u016d")
        buf.write("\3\2\2\2\u0170\u0166\3\2\2\2\u0170\u0171\3\2\2\2\u0171")
        buf.write("\u017c\3\2\2\2\u0172\u0173\7\u0093\2\2\u0173\u0174\7\20")
        buf.write("\2\2\u0174\u0179\5b\62\2\u0175\u0176\7\3\2\2\u0176\u0178")
        buf.write("\5b\62\2\u0177\u0175\3\2\2\2\u0178\u017b\3\2\2\2\u0179")
        buf.write("\u0177\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u017d\3\2\2\2")
        buf.write("\u017b\u0179\3\2\2\2\u017c\u0172\3\2\2\2\u017c\u017d\3")
        buf.write("\2\2\2\u017d\u0188\3\2\2\2\u017e\u017f\7\u0091\2\2\u017f")
        buf.write("\u0180\7\20\2\2\u0180\u0185\5,\27\2\u0181\u0182\7\3\2")
        buf.write("\2\u0182\u0184\5,\27\2\u0183\u0181\3\2\2\2\u0184\u0187")
        buf.write("\3\2\2\2\u0185\u0183\3\2\2\2\u0185\u0186\3\2\2\2\u0186")
        buf.write("\u0189\3\2\2\2\u0187\u0185\3\2\2\2\u0188\u017e\3\2\2\2")
        buf.write("\u0188\u0189\3\2\2\2\u0189\u018b\3\2\2\2\u018a\u018c\5")
        buf.write("\u0090I\2\u018b\u018a\3\2\2\2\u018b\u018c\3\2\2\2\u018c")
        buf.write("\u018f\3\2\2\2\u018d\u018e\7\30\2\2\u018e\u0190\5b\62")
        buf.write("\2\u018f\u018d\3\2\2\2\u018f\u0190\3\2\2\2\u0190\'\3\2")
        buf.write("\2\2\u0191\u0192\b\25\1\2\u0192\u0193\5*\26\2\u0193\u019c")
        buf.write("\3\2\2\2\u0194\u0195\f\3\2\2\u0195\u0197\t\3\2\2\u0196")
        buf.write("\u0198\5> \2\u0197\u0196\3\2\2\2\u0197\u0198\3\2\2\2\u0198")
        buf.write("\u0199\3\2\2\2\u0199\u019b\5(\25\4\u019a\u0194\3\2\2\2")
        buf.write("\u019b\u019e\3\2\2\2\u019c\u019a\3\2\2\2\u019c\u019d\3")
        buf.write("\2\2\2\u019d)\3\2\2\2\u019e\u019c\3\2\2\2\u019f\u01a8")
        buf.write("\5.\30\2\u01a0\u01a1\7a\2\2\u01a1\u01a8\5\\/\2\u01a2\u01a8")
        buf.write("\5X-\2\u01a3\u01a4\7\4\2\2\u01a4\u01a5\5$\23\2\u01a5\u01a6")
        buf.write("\7\5\2\2\u01a6\u01a8\3\2\2\2\u01a7\u019f\3\2\2\2\u01a7")
        buf.write("\u01a0\3\2\2\2\u01a7\u01a2\3\2\2\2\u01a7\u01a3\3\2\2\2")
        buf.write("\u01a8+\3\2\2\2\u01a9\u01ab\5b\62\2\u01aa\u01ac\t\4\2")
        buf.write("\2\u01ab\u01aa\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01af")
        buf.write("\3\2\2\2\u01ad\u01ae\7\'\2\2\u01ae\u01b0\t\5\2\2\u01af")
        buf.write("\u01ad\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0-\3\2\2\2\u01b1")
        buf.write("\u01b3\7\b\2\2\u01b2\u01b4\5> \2\u01b3\u01b2\3\2\2\2\u01b3")
        buf.write("\u01b4\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5\u01b7\5`\61\2")
        buf.write("\u01b6\u01b8\5\60\31\2\u01b7\u01b6\3\2\2\2\u01b7\u01b8")
        buf.write("\3\2\2\2\u01b8\u01bc\3\2\2\2\u01b9\u01bb\5<\37\2\u01ba")
        buf.write("\u01b9\3\2\2\2\u01bb\u01be\3\2\2\2\u01bc\u01ba\3\2\2\2")
        buf.write("\u01bc\u01bd\3\2\2\2\u01bd\u01c0\3\2\2\2\u01be\u01bc\3")
        buf.write("\2\2\2\u01bf\u01c1\5\62\32\2\u01c0\u01bf\3\2\2\2\u01c0")
        buf.write("\u01c1\3\2\2\2\u01c1\u01c3\3\2\2\2\u01c2\u01c4\58\35\2")
        buf.write("\u01c3\u01c2\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c6\3")
        buf.write("\2\2\2\u01c5\u01c7\5\64\33\2\u01c6\u01c5\3\2\2\2\u01c6")
        buf.write("\u01c7\3\2\2\2\u01c7\u01c9\3\2\2\2\u01c8\u01ca\5\66\34")
        buf.write("\2\u01c9\u01c8\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cc")
        buf.write("\3\2\2\2\u01cb\u01cd\5\u0090I\2\u01cc\u01cb\3\2\2\2\u01cc")
        buf.write("\u01cd\3\2\2\2\u01cd/\3\2\2\2\u01ce\u01cf\7\t\2\2\u01cf")
        buf.write("\u01d4\5@!\2\u01d0\u01d1\7\3\2\2\u01d1\u01d3\5@!\2\u01d2")
        buf.write("\u01d0\3\2\2\2\u01d3\u01d6\3\2\2\2\u01d4\u01d2\3\2\2\2")
        buf.write("\u01d4\u01d5\3\2\2\2\u01d5\u01da\3\2\2\2\u01d6\u01d4\3")
        buf.write("\2\2\2\u01d7\u01d9\5<\37\2\u01d8\u01d7\3\2\2\2\u01d9\u01dc")
        buf.write("\3\2\2\2\u01da\u01d8\3\2\2\2\u01da\u01db\3\2\2\2\u01db")
        buf.write("\61\3\2\2\2\u01dc\u01da\3\2\2\2\u01dd\u01de\7\16\2\2\u01de")
        buf.write("\u01df\5d\63\2\u01df\63\3\2\2\2\u01e0\u01e1\7\26\2\2\u01e1")
        buf.write("\u01e2\5d\63\2\u01e2\65\3\2\2\2\u01e3\u01e4\7\27\2\2\u01e4")
        buf.write("\u01e5\5d\63\2\u01e5\67\3\2\2\2\u01e6\u01e7\7\17\2\2\u01e7")
        buf.write("\u01e8\7\20\2\2\u01e8\u01ed\5b\62\2\u01e9\u01ea\7\3\2")
        buf.write("\2\u01ea\u01ec\5b\62\2\u01eb\u01e9\3\2\2\2\u01ec\u01ef")
        buf.write("\3\2\2\2\u01ed\u01eb\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee")
        buf.write("\u0201\3\2\2\2\u01ef\u01ed\3\2\2\2\u01f0\u01f1\7^\2\2")
        buf.write("\u01f1\u0202\7\24\2\2\u01f2\u01f3\7^\2\2\u01f3\u0202\7")
        buf.write("\23\2\2\u01f4\u01f5\7\21\2\2\u01f5\u01f6\7\22\2\2\u01f6")
        buf.write("\u01f7\7\4\2\2\u01f7\u01fc\5:\36\2\u01f8\u01f9\7\3\2\2")
        buf.write("\u01f9\u01fb\5:\36\2\u01fa\u01f8\3\2\2\2\u01fb\u01fe\3")
        buf.write("\2\2\2\u01fc\u01fa\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd\u01ff")
        buf.write("\3\2\2\2\u01fe\u01fc\3\2\2\2\u01ff\u0200\7\5\2\2\u0200")
        buf.write("\u0202\3\2\2\2\u0201\u01f0\3\2\2\2\u0201\u01f2\3\2\2\2")
        buf.write("\u0201\u01f4\3\2\2\2\u0201\u0202\3\2\2\2\u02029\3\2\2")
        buf.write("\2\u0203\u020c\7\4\2\2\u0204\u0209\5b\62\2\u0205\u0206")
        buf.write("\7\3\2\2\u0206\u0208\5b\62\2\u0207\u0205\3\2\2\2\u0208")
        buf.write("\u020b\3\2\2\2\u0209\u0207\3\2\2\2\u0209\u020a\3\2\2\2")
        buf.write("\u020a\u020d\3\2\2\2\u020b\u0209\3\2\2\2\u020c\u0204\3")
        buf.write("\2\2\2\u020c\u020d\3\2\2\2\u020d\u020e\3\2\2\2\u020e\u0211")
        buf.write("\7\5\2\2\u020f\u0211\5b\62\2\u0210\u0203\3\2\2\2\u0210")
        buf.write("\u020f\3\2\2\2\u0211;\3\2\2\2\u0212\u0213\7P\2\2\u0213")
        buf.write("\u0215\7b\2\2\u0214\u0216\7H\2\2\u0215\u0214\3\2\2\2\u0215")
        buf.write("\u0216\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u0218\5\u009a")
        buf.write("N\2\u0218\u0221\7\4\2\2\u0219\u021e\5b\62\2\u021a\u021b")
        buf.write("\7\3\2\2\u021b\u021d\5b\62\2\u021c\u021a\3\2\2\2\u021d")
        buf.write("\u0220\3\2\2\2\u021e\u021c\3\2\2\2\u021e\u021f\3\2\2\2")
        buf.write("\u021f\u0222\3\2\2\2\u0220\u021e\3\2\2\2\u0221\u0219\3")
        buf.write("\2\2\2\u0221\u0222\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0224")
        buf.write("\7\5\2\2\u0224\u0230\5\u009cO\2\u0225\u0227\7\13\2\2\u0226")
        buf.write("\u0225\3\2\2\2\u0226\u0227\3\2\2\2\u0227\u0228\3\2\2\2")
        buf.write("\u0228\u022d\5\u009cO\2\u0229\u022a\7\3\2\2\u022a\u022c")
        buf.write("\5\u009cO\2\u022b\u0229\3\2\2\2\u022c\u022f\3\2\2\2\u022d")
        buf.write("\u022b\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u0231\3\2\2\2")
        buf.write("\u022f\u022d\3\2\2\2\u0230\u0226\3\2\2\2\u0230\u0231\3")
        buf.write("\2\2\2\u0231=\3\2\2\2\u0232\u0233\t\6\2\2\u0233?\3\2\2")
        buf.write("\2\u0234\u0238\5V,\2\u0235\u0237\5B\"\2\u0236\u0235\3")
        buf.write("\2\2\2\u0237\u023a\3\2\2\2\u0238\u0236\3\2\2\2\u0238\u0239")
        buf.write("\3\2\2\2\u0239A\3\2\2\2\u023a\u0238\3\2\2\2\u023b\u023c")
        buf.write("\5D#\2\u023c\u023d\7F\2\2\u023d\u023f\5V,\2\u023e\u0240")
        buf.write("\5F$\2\u023f\u023e\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0247")
        buf.write("\3\2\2\2\u0241\u0242\7N\2\2\u0242\u0243\5D#\2\u0243\u0244")
        buf.write("\7F\2\2\u0244\u0245\5V,\2\u0245\u0247\3\2\2\2\u0246\u023b")
        buf.write("\3\2\2\2\u0246\u0241\3\2\2\2\u0247C\3\2\2\2\u0248\u024a")
        buf.write("\7I\2\2\u0249\u0248\3\2\2\2\u0249\u024a\3\2\2\2\u024a")
        buf.write("\u025f\3\2\2\2\u024b\u025f\7G\2\2\u024c\u024e\7J\2\2\u024d")
        buf.write("\u024f\7H\2\2\u024e\u024d\3\2\2\2\u024e\u024f\3\2\2\2")
        buf.write("\u024f\u025f\3\2\2\2\u0250\u0251\7J\2\2\u0251\u025f\7")
        buf.write("K\2\2\u0252\u0254\7L\2\2\u0253\u0255\7H\2\2\u0254\u0253")
        buf.write("\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u025f\3\2\2\2\u0256")
        buf.write("\u0258\7M\2\2\u0257\u0259\7H\2\2\u0258\u0257\3\2\2\2\u0258")
        buf.write("\u0259\3\2\2\2\u0259\u025f\3\2\2\2\u025a\u025c\7J\2\2")
        buf.write("\u025b\u025a\3\2\2\2\u025b\u025c\3\2\2\2\u025c\u025d\3")
        buf.write("\2\2\2\u025d\u025f\7\u00e8\2\2\u025e\u0249\3\2\2\2\u025e")
        buf.write("\u024b\3\2\2\2\u025e\u024c\3\2\2\2\u025e\u0250\3\2\2\2")
        buf.write("\u025e\u0252\3\2\2\2\u025e\u0256\3\2\2\2\u025e\u025b\3")
        buf.write("\2\2\2\u025fE\3\2\2\2\u0260\u0261\7O\2\2\u0261\u026f\5")
        buf.write("d\63\2\u0262\u0263\7\u0097\2\2\u0263\u0264\7\4\2\2\u0264")
        buf.write("\u0269\5\u009cO\2\u0265\u0266\7\3\2\2\u0266\u0268\5\u009c")
        buf.write("O\2\u0267\u0265\3\2\2\2\u0268\u026b\3\2\2\2\u0269\u0267")
        buf.write("\3\2\2\2\u0269\u026a\3\2\2\2\u026a\u026c\3\2\2\2\u026b")
        buf.write("\u0269\3\2\2\2\u026c\u026d\7\5\2\2\u026d\u026f\3\2\2\2")
        buf.write("\u026e\u0260\3\2\2\2\u026e\u0262\3\2\2\2\u026fG\3\2\2")
        buf.write("\2\u0270\u0271\7{\2\2\u0271\u0287\7\4\2\2\u0272\u0273")
        buf.write("\t\7\2\2\u0273\u0288\7\u008d\2\2\u0274\u0275\5b\62\2\u0275")
        buf.write("\u0276\7V\2\2\u0276\u0288\3\2\2\2\u0277\u0288\7\u0115")
        buf.write("\2\2\u0278\u0279\7\u008e\2\2\u0279\u027a\7\u0116\2\2\u027a")
        buf.write("\u027b\7\u008f\2\2\u027b\u027c\7\u0090\2\2\u027c\u0285")
        buf.write("\7\u0116\2\2\u027d\u0283\7O\2\2\u027e\u0284\5\u009cO\2")
        buf.write("\u027f\u0280\5\u009aN\2\u0280\u0281\7\4\2\2\u0281\u0282")
        buf.write("\7\5\2\2\u0282\u0284\3\2\2\2\u0283\u027e\3\2\2\2\u0283")
        buf.write("\u027f\3\2\2\2\u0284\u0286\3\2\2\2\u0285\u027d\3\2\2\2")
        buf.write("\u0285\u0286\3\2\2\2\u0286\u0288\3\2\2\2\u0287\u0272\3")
        buf.write("\2\2\2\u0287\u0274\3\2\2\2\u0287\u0277\3\2\2\2\u0287\u0278")
        buf.write("\3\2\2\2\u0288\u0289\3\2\2\2\u0289\u028a\7\5\2\2\u028a")
        buf.write("I\3\2\2\2\u028b\u028c\7\4\2\2\u028c\u028d\5L\'\2\u028d")
        buf.write("\u028e\7\5\2\2\u028eK\3\2\2\2\u028f\u0294\5\u009cO\2\u0290")
        buf.write("\u0291\7\3\2\2\u0291\u0293\5\u009cO\2\u0292\u0290\3\2")
        buf.write("\2\2\u0293\u0296\3\2\2\2\u0294\u0292\3\2\2\2\u0294\u0295")
        buf.write("\3\2\2\2\u0295M\3\2\2\2\u0296\u0294\3\2\2\2\u0297\u0298")
        buf.write("\7\4\2\2\u0298\u029d\5P)\2\u0299\u029a\7\3\2\2\u029a\u029c")
        buf.write("\5P)\2\u029b\u0299\3\2\2\2\u029c\u029f\3\2\2\2\u029d\u029b")
        buf.write("\3\2\2\2\u029d\u029e\3\2\2\2\u029e\u02a0\3\2\2\2\u029f")
        buf.write("\u029d\3\2\2\2\u02a0\u02a1\7\5\2\2\u02a1O\3\2\2\2\u02a2")
        buf.write("\u02a4\5\u009cO\2\u02a3\u02a5\t\4\2\2\u02a4\u02a3\3\2")
        buf.write("\2\2\u02a4\u02a5\3\2\2\2\u02a5Q\3\2\2\2\u02a6\u02a7\7")
        buf.write("\4\2\2\u02a7\u02ac\5T+\2\u02a8\u02a9\7\3\2\2\u02a9\u02ab")
        buf.write("\5T+\2\u02aa\u02a8\3\2\2\2\u02ab\u02ae\3\2\2\2\u02ac\u02aa")
        buf.write("\3\2\2\2\u02ac\u02ad\3\2\2\2\u02ad\u02af\3\2\2\2\u02ae")
        buf.write("\u02ac\3\2\2\2\u02af\u02b0\7\5\2\2\u02b0S\3\2\2\2\u02b1")
        buf.write("\u02b4\5\u009cO\2\u02b2\u02b3\7\u0082\2\2\u02b3\u02b5")
        buf.write("\7\u0111\2\2\u02b4\u02b2\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5")
        buf.write("U\3\2\2\2\u02b6\u02b8\5\\/\2\u02b7\u02b9\5H%\2\u02b8\u02b7")
        buf.write("\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02be\3\2\2\2\u02ba")
        buf.write("\u02bc\7\13\2\2\u02bb\u02ba\3\2\2\2\u02bb\u02bc\3\2\2")
        buf.write("\2\u02bc\u02bd\3\2\2\2\u02bd\u02bf\5\u009eP\2\u02be\u02bb")
        buf.write("\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02e8\3\2\2\2\u02c0")
        buf.write("\u02c1\7\4\2\2\u02c1\u02c2\5$\23\2\u02c2\u02c4\7\5\2\2")
        buf.write("\u02c3\u02c5\5H%\2\u02c4\u02c3\3\2\2\2\u02c4\u02c5\3\2")
        buf.write("\2\2\u02c5\u02ca\3\2\2\2\u02c6\u02c8\7\13\2\2\u02c7\u02c6")
        buf.write("\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\u02c9\3\2\2\2\u02c9")
        buf.write("\u02cb\5\u009eP\2\u02ca\u02c7\3\2\2\2\u02ca\u02cb\3\2")
        buf.write("\2\2\u02cb\u02e8\3\2\2\2\u02cc\u02cd\7\4\2\2\u02cd\u02ce")
        buf.write("\5@!\2\u02ce\u02d0\7\5\2\2\u02cf\u02d1\5H%\2\u02d0\u02cf")
        buf.write("\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02d6\3\2\2\2\u02d2")
        buf.write("\u02d4\7\13\2\2\u02d3\u02d2\3\2\2\2\u02d3\u02d4\3\2\2")
        buf.write("\2\u02d4\u02d5\3\2\2\2\u02d5\u02d7\5\u009eP\2\u02d6\u02d3")
        buf.write("\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7\u02e8\3\2\2\2\u02d8")
        buf.write("\u02e8\5X-\2\u02d9\u02da\5\u009cO\2\u02da\u02e3\7\4\2")
        buf.write("\2\u02db\u02e0\5b\62\2\u02dc\u02dd\7\3\2\2\u02dd\u02df")
        buf.write("\5b\62\2\u02de\u02dc\3\2\2\2\u02df\u02e2\3\2\2\2\u02e0")
        buf.write("\u02de\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1\u02e4\3\2\2\2")
        buf.write("\u02e2\u02e0\3\2\2\2\u02e3\u02db\3\2\2\2\u02e3\u02e4\3")
        buf.write("\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e6\7\5\2\2\u02e6\u02e8")
        buf.write("\3\2\2\2\u02e7\u02b6\3\2\2\2\u02e7\u02c0\3\2\2\2\u02e7")
        buf.write("\u02cc\3\2\2\2\u02e7\u02d8\3\2\2\2\u02e7\u02d9\3\2\2\2")
        buf.write("\u02e8W\3\2\2\2\u02e9\u02eb\7_\2\2\u02ea\u02e9\3\2\2\2")
        buf.write("\u02ea\u02eb\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02f1\5")
        buf.write("b\62\2\u02ed\u02ee\7\3\2\2\u02ee\u02f0\5b\62\2\u02ef\u02ed")
        buf.write("\3\2\2\2\u02f0\u02f3\3\2\2\2\u02f1\u02ef\3\2\2\2\u02f1")
        buf.write("\u02f2\3\2\2\2\u02f2\u02fb\3\2\2\2\u02f3\u02f1\3\2\2\2")
        buf.write("\u02f4\u02f6\7\13\2\2\u02f5\u02f4\3\2\2\2\u02f5\u02f6")
        buf.write("\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u02f9\5\u009cO\2\u02f8")
        buf.write("\u02fa\5J&\2\u02f9\u02f8\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa")
        buf.write("\u02fc\3\2\2\2\u02fb\u02f5\3\2\2\2\u02fb\u02fc\3\2\2\2")
        buf.write("\u02fcY\3\2\2\2\u02fd\u02ff\7_\2\2\u02fe\u02fd\3\2\2\2")
        buf.write("\u02fe\u02ff\3\2\2\2\u02ff\u0300\3\2\2\2\u0300\u0301\7")
        buf.write("\4\2\2\u0301\u0306\5b\62\2\u0302\u0303\7\3\2\2\u0303\u0305")
        buf.write("\5b\62\2\u0304\u0302\3\2\2\2\u0305\u0308\3\2\2\2\u0306")
        buf.write("\u0304\3\2\2\2\u0306\u0307\3\2\2\2\u0307\u0309\3\2\2\2")
        buf.write("\u0308\u0306\3\2\2\2\u0309\u030a\7\5\2\2\u030a[\3\2\2")
        buf.write("\2\u030b\u030c\5\u009cO\2\u030c\u030d\7\u011c\2\2\u030d")
        buf.write("\u030f\3\2\2\2\u030e\u030b\3\2\2\2\u030e\u030f\3\2\2\2")
        buf.write("\u030f\u0310\3\2\2\2\u0310\u0311\5\u009cO\2\u0311]\3\2")
        buf.write("\2\2\u0312\u031a\5b\62\2\u0313\u0315\7\13\2\2\u0314\u0313")
        buf.write("\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0318\3\2\2\2\u0316")
        buf.write("\u0319\5\u009cO\2\u0317\u0319\5J&\2\u0318\u0316\3\2\2")
        buf.write("\2\u0318\u0317\3\2\2\2\u0319\u031b\3\2\2\2\u031a\u0314")
        buf.write("\3\2\2\2\u031a\u031b\3\2\2\2\u031b_\3\2\2\2\u031c\u0321")
        buf.write("\5^\60\2\u031d\u031e\7\3\2\2\u031e\u0320\5^\60\2\u031f")
        buf.write("\u031d\3\2\2\2\u0320\u0323\3\2\2\2\u0321\u031f\3\2\2\2")
        buf.write("\u0321\u0322\3\2\2\2\u0322\u0326\3\2\2\2\u0323\u0321\3")
        buf.write("\2\2\2\u0324\u0326\7\u0108\2\2\u0325\u031c\3\2\2\2\u0325")
        buf.write("\u0324\3\2\2\2\u0326a\3\2\2\2\u0327\u0328\5d\63\2\u0328")
        buf.write("c\3\2\2\2\u0329\u032a\b\63\1\2\u032a\u032b\7\35\2\2\u032b")
        buf.write("\u0333\5d\63\7\u032c\u0333\5f\64\2\u032d\u032e\7\37\2")
        buf.write("\2\u032e\u032f\7\4\2\2\u032f\u0330\5\f\7\2\u0330\u0331")
        buf.write("\7\5\2\2\u0331\u0333\3\2\2\2\u0332\u0329\3\2\2\2\u0332")
        buf.write("\u032c\3\2\2\2\u0332\u032d\3\2\2\2\u0333\u033c\3\2\2\2")
        buf.write("\u0334\u0335\f\5\2\2\u0335\u0336\7\33\2\2\u0336\u033b")
        buf.write("\5d\63\6\u0337\u0338\f\4\2\2\u0338\u0339\7\32\2\2\u0339")
        buf.write("\u033b\5d\63\5\u033a\u0334\3\2\2\2\u033a\u0337\3\2\2\2")
        buf.write("\u033b\u033e\3\2\2\2\u033c\u033a\3\2\2\2\u033c\u033d\3")
        buf.write("\2\2\2\u033de\3\2\2\2\u033e\u033c\3\2\2\2\u033f\u0341")
        buf.write("\5j\66\2\u0340\u0342\5h\65\2\u0341\u0340\3\2\2\2\u0341")
        buf.write("\u0342\3\2\2\2\u0342g\3\2\2\2\u0343\u0345\7\35\2\2\u0344")
        buf.write("\u0343\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u0346\3\2\2\2")
        buf.write("\u0346\u0347\7 \2\2\u0347\u0348\5j\66\2\u0348\u0349\7")
        buf.write("\33\2\2\u0349\u034a\5j\66\2\u034a\u036d\3\2\2\2\u034b")
        buf.write("\u034d\7\35\2\2\u034c\u034b\3\2\2\2\u034c\u034d\3\2\2")
        buf.write("\2\u034d\u034e\3\2\2\2\u034e\u034f\7\34\2\2\u034f\u0350")
        buf.write("\7\4\2\2\u0350\u0355\5b\62\2\u0351\u0352\7\3\2\2\u0352")
        buf.write("\u0354\5b\62\2\u0353\u0351\3\2\2\2\u0354\u0357\3\2\2\2")
        buf.write("\u0355\u0353\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u0358\3")
        buf.write("\2\2\2\u0357\u0355\3\2\2\2\u0358\u0359\7\5\2\2\u0359\u036d")
        buf.write("\3\2\2\2\u035a\u035c\7\35\2\2\u035b\u035a\3\2\2\2\u035b")
        buf.write("\u035c\3\2\2\2\u035c\u035d\3\2\2\2\u035d\u035e\7\34\2")
        buf.write("\2\u035e\u035f\7\4\2\2\u035f\u0360\5\f\7\2\u0360\u0361")
        buf.write("\7\5\2\2\u0361\u036d\3\2\2\2\u0362\u0364\7\35\2\2\u0363")
        buf.write("\u0362\3\2\2\2\u0363\u0364\3\2\2\2\u0364\u0365\3\2\2\2")
        buf.write("\u0365\u0366\t\b\2\2\u0366\u036d\5j\66\2\u0367\u0369\7")
        buf.write("#\2\2\u0368\u036a\7\35\2\2\u0369\u0368\3\2\2\2\u0369\u036a")
        buf.write("\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036d\7$\2\2\u036c")
        buf.write("\u0344\3\2\2\2\u036c\u034c\3\2\2\2\u036c\u035b\3\2\2\2")
        buf.write("\u036c\u0363\3\2\2\2\u036c\u0367\3\2\2\2\u036di\3\2\2")
        buf.write("\2\u036e\u036f\b\66\1\2\u036f\u0370\5l\67\2\u0370\u0371")
        buf.write("\7\4\2\2\u0371\u0372\5\u0084C\2\u0372\u0373\7\5\2\2\u0373")
        buf.write("\u0378\3\2\2\2\u0374\u0378\5l\67\2\u0375\u0376\t\t\2\2")
        buf.write("\u0376\u0378\5j\66\t\u0377\u036e\3\2\2\2\u0377\u0374\3")
        buf.write("\2\2\2\u0377\u0375\3\2\2\2\u0378\u038e\3\2\2\2\u0379\u037a")
        buf.write("\f\b\2\2\u037a\u037b\t\n\2\2\u037b\u038d\5j\66\t\u037c")
        buf.write("\u037d\f\7\2\2\u037d\u037e\t\13\2\2\u037e\u038d\5j\66")
        buf.write("\b\u037f\u0380\f\6\2\2\u0380\u0381\7\u010d\2\2\u0381\u038d")
        buf.write("\5j\66\7\u0382\u0383\f\5\2\2\u0383\u0384\7\u010f\2\2\u0384")
        buf.write("\u038d\5j\66\6\u0385\u0386\f\4\2\2\u0386\u0387\7\u010e")
        buf.write("\2\2\u0387\u038d\5j\66\5\u0388\u0389\f\3\2\2\u0389\u038a")
        buf.write("\5v<\2\u038a\u038b\5j\66\4\u038b\u038d\3\2\2\2\u038c\u0379")
        buf.write("\3\2\2\2\u038c\u037c\3\2\2\2\u038c\u037f\3\2\2\2\u038c")
        buf.write("\u0382\3\2\2\2\u038c\u0385\3\2\2\2\u038c\u0388\3\2\2\2")
        buf.write("\u038d\u0390\3\2\2\2\u038e\u038c\3\2\2\2\u038e\u038f\3")
        buf.write("\2\2\2\u038fk\3\2\2\2\u0390\u038e\3\2\2\2\u0391\u0392")
        buf.write("\b\67\1\2\u0392\u0396\t\f\2\2\u0393\u0394\7\4\2\2\u0394")
        buf.write("\u0395\7\u0116\2\2\u0395\u0397\7\5\2\2\u0396\u0393\3\2")
        buf.write("\2\2\u0396\u0397\3\2\2\2\u0397\u040b\3\2\2\2\u0398\u0399")
        buf.write("\7\u00ed\2\2\u0399\u039a\7\4\2\2\u039a\u039b\5b\62\2\u039b")
        buf.write("\u039c\7\t\2\2\u039c\u039f\5b\62\2\u039d\u039e\7*\2\2")
        buf.write("\u039e\u03a0\5b\62\2\u039f\u039d\3\2\2\2\u039f\u03a0\3")
        buf.write("\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a2\7\5\2\2\u03a2\u040b")
        buf.write("\3\2\2\2\u03a3\u03a4\7\u00fb\2\2\u03a4\u03a5\7\4\2\2\u03a5")
        buf.write("\u03a6\5b\62\2\u03a6\u03a7\7\34\2\2\u03a7\u03a8\5b\62")
        buf.write("\2\u03a8\u03a9\7\5\2\2\u03a9\u040b\3\2\2\2\u03aa\u03ab")
        buf.write("\7\u00ee\2\2\u03ab\u03b1\7\4\2\2\u03ac\u03ae\t\r\2\2\u03ad")
        buf.write("\u03af\5b\62\2\u03ae\u03ad\3\2\2\2\u03ae\u03af\3\2\2\2")
        buf.write("\u03af\u03b0\3\2\2\2\u03b0\u03b2\7\t\2\2\u03b1\u03ac\3")
        buf.write("\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b4")
        buf.write("\5b\62\2\u03b4\u03b5\7\5\2\2\u03b5\u040b\3\2\2\2\u03b6")
        buf.write("\u03b7\7A\2\2\u03b7\u03b9\5j\66\2\u03b8\u03ba\5\u008e")
        buf.write("H\2\u03b9\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03b9")
        buf.write("\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03bf\3\2\2\2\u03bd")
        buf.write("\u03be\7D\2\2\u03be\u03c0\5b\62\2\u03bf\u03bd\3\2\2\2")
        buf.write("\u03bf\u03c0\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c2\7")
        buf.write("E\2\2\u03c2\u040b\3\2\2\2\u03c3\u03c5\7A\2\2\u03c4\u03c6")
        buf.write("\5\u008eH\2\u03c5\u03c4\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7")
        buf.write("\u03c5\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u03cb\3\2\2\2")
        buf.write("\u03c9\u03ca\7D\2\2\u03ca\u03cc\5b\62\2\u03cb\u03c9\3")
        buf.write("\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03ce")
        buf.write("\7E\2\2\u03ce\u040b\3\2\2\2\u03cf\u03d0\7m\2\2\u03d0\u03d1")
        buf.write("\7\4\2\2\u03d1\u03d2\5b\62\2\u03d2\u03d4\7\13\2\2\u03d3")
        buf.write("\u03d5\5\u0084C\2\u03d4\u03d3\3\2\2\2\u03d4\u03d5\3\2")
        buf.write("\2\2\u03d5\u03d7\3\2\2\2\u03d6\u03d8\5n8\2\u03d7\u03d6")
        buf.write("\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9")
        buf.write("\u03da\7\5\2\2\u03da\u040b\3\2\2\2\u03db\u040b\7\u0108")
        buf.write("\2\2\u03dc\u03dd\5\u009aN\2\u03dd\u03de\7\u011c\2\2\u03de")
        buf.write("\u03df\7\u0108\2\2\u03df\u040b\3\2\2\2\u03e0\u03e1\5\u009a")
        buf.write("N\2\u03e1\u03ed\7\4\2\2\u03e2\u03e4\5> \2\u03e3\u03e2")
        buf.write("\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5")
        buf.write("\u03ea\5b\62\2\u03e6\u03e7\7\3\2\2\u03e7\u03e9\5b\62\2")
        buf.write("\u03e8\u03e6\3\2\2\2\u03e9\u03ec\3\2\2\2\u03ea\u03e8\3")
        buf.write("\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03ee\3\2\2\2\u03ec\u03ea")
        buf.write("\3\2\2\2\u03ed\u03e3\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee")
        buf.write("\u03ef\3\2\2\2\u03ef\u03f2\7\5\2\2\u03f0\u03f1\7R\2\2")
        buf.write("\u03f1\u03f3\5\u0094K\2\u03f2\u03f0\3\2\2\2\u03f2\u03f3")
        buf.write("\3\2\2\2\u03f3\u040b\3\2\2\2\u03f4\u03f5\7\u0105\2\2\u03f5")
        buf.write("\u040b\5\u009cO\2\u03f6\u040b\5\u009cO\2\u03f7\u03f8\7")
        buf.write("\4\2\2\u03f8\u03fb\5b\62\2\u03f9\u03fa\7\3\2\2\u03fa\u03fc")
        buf.write("\5b\62\2\u03fb\u03f9\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd")
        buf.write("\u03fb\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u03ff\3\2\2\2")
        buf.write("\u03ff\u0400\7\5\2\2\u0400\u040b\3\2\2\2\u0401\u0402\7")
        buf.write("\4\2\2\u0402\u0403\5\f\7\2\u0403\u0404\7\5\2\2\u0404\u040b")
        buf.write("\3\2\2\2\u0405\u0406\7\4\2\2\u0406\u0407\5b\62\2\u0407")
        buf.write("\u0408\7\5\2\2\u0408\u040b\3\2\2\2\u0409\u040b\5r:\2\u040a")
        buf.write("\u0391\3\2\2\2\u040a\u0398\3\2\2\2\u040a\u03a3\3\2\2\2")
        buf.write("\u040a\u03aa\3\2\2\2\u040a\u03b6\3\2\2\2\u040a\u03c3\3")
        buf.write("\2\2\2\u040a\u03cf\3\2\2\2\u040a\u03db\3\2\2\2\u040a\u03dc")
        buf.write("\3\2\2\2\u040a\u03e0\3\2\2\2\u040a\u03f4\3\2\2\2\u040a")
        buf.write("\u03f6\3\2\2\2\u040a\u03f7\3\2\2\2\u040a\u0401\3\2\2\2")
        buf.write("\u040a\u0405\3\2\2\2\u040a\u0409\3\2\2\2\u040b\u041f\3")
        buf.write("\2\2\2\u040c\u040d\f\26\2\2\u040d\u041e\5t;\2\u040e\u0411")
        buf.write("\f\25\2\2\u040f\u0410\7\u0110\2\2\u0410\u0412\5l\67\2")
        buf.write("\u0411\u040f\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0411\3")
        buf.write("\2\2\2\u0413\u0414\3\2\2\2\u0414\u041e\3\2\2\2\u0415\u0416")
        buf.write("\f\r\2\2\u0416\u0417\7\6\2\2\u0417\u0418\5j\66\2\u0418")
        buf.write("\u0419\7\7\2\2\u0419\u041e\3\2\2\2\u041a\u041b\f\f\2\2")
        buf.write("\u041b\u041c\7\u011c\2\2\u041c\u041e\5\u009cO\2\u041d")
        buf.write("\u040c\3\2\2\2\u041d\u040e\3\2\2\2\u041d\u0415\3\2\2\2")
        buf.write("\u041d\u041a\3\2\2\2\u041e\u0421\3\2\2\2\u041f\u041d\3")
        buf.write("\2\2\2\u041f\u0420\3\2\2\2\u0420m\3\2\2\2\u0421\u041f")
        buf.write("\3\2\2\2\u0422\u0423\t\16\2\2\u0423\u0426\7\u0111\2\2")
        buf.write("\u0424\u0426\5p9\2\u0425\u0422\3\2\2\2\u0425\u0424\3\2")
        buf.write("\2\2\u0426o\3\2\2\2\u0427\u0428\7\4\2\2\u0428\u0429\7")
        buf.write("\u0116\2\2\u0429\u042a\7\5\2\2\u042aq\3\2\2\2\u042b\u0438")
        buf.write("\7$\2\2\u042c\u0438\5~@\2\u042d\u042e\5\u009cO\2\u042e")
        buf.write("\u042f\7\u0111\2\2\u042f\u0438\3\2\2\2\u0430\u0438\5\u00a2")
        buf.write("R\2\u0431\u0438\5|?\2\u0432\u0434\7\u0111\2\2\u0433\u0432")
        buf.write("\3\2\2\2\u0434\u0435\3\2\2\2\u0435\u0433\3\2\2\2\u0435")
        buf.write("\u0436\3\2\2\2\u0436\u0438\3\2\2\2\u0437\u042b\3\2\2\2")
        buf.write("\u0437\u042c\3\2\2\2\u0437\u042d\3\2\2\2\u0437\u0430\3")
        buf.write("\2\2\2\u0437\u0431\3\2\2\2\u0437\u0433\3\2\2\2\u0438s")
        buf.write("\3\2\2\2\u0439\u043b\7\4\2\2\u043a\u043c\7\35\2\2\u043b")
        buf.write("\u043a\3\2\2\2\u043b\u043c\3\2\2\2\u043c\u043d\3\2\2\2")
        buf.write("\u043d\u043e\t\17\2\2\u043e\u043f\7\5\2\2\u043fu\3\2\2")
        buf.write("\2\u0440\u0441\t\20\2\2\u0441w\3\2\2\2\u0442\u0443\t\21")
        buf.write("\2\2\u0443y\3\2\2\2\u0444\u0445\t\22\2\2\u0445{\3\2\2")
        buf.write("\2\u0446\u0447\t\23\2\2\u0447}\3\2\2\2\u0448\u044c\7@")
        buf.write("\2\2\u0449\u044b\5\u0080A\2\u044a\u0449\3\2\2\2\u044b")
        buf.write("\u044e\3\2\2\2\u044c\u044a\3\2\2\2\u044c\u044d\3\2\2\2")
        buf.write("\u044d\177\3\2\2\2\u044e\u044c\3\2\2\2\u044f\u0450\5\u0082")
        buf.write("B\2\u0450\u0453\5\u009cO\2\u0451\u0452\7z\2\2\u0452\u0454")
        buf.write("\5\u009cO\2\u0453\u0451\3\2\2\2\u0453\u0454\3\2\2\2\u0454")
        buf.write("\u0081\3\2\2\2\u0455\u0457\t\13\2\2\u0456\u0455\3\2\2")
        buf.write("\2\u0456\u0457\3\2\2\2\u0457\u0458\3\2\2\2\u0458\u045b")
        buf.write("\t\7\2\2\u0459\u045b\7\u0111\2\2\u045a\u0456\3\2\2\2\u045a")
        buf.write("\u0459\3\2\2\2\u045b\u0083\3\2\2\2\u045c\u0487\7+\2\2")
        buf.write("\u045d\u0487\7,\2\2\u045e\u0487\7-\2\2\u045f\u0487\7.")
        buf.write("\2\2\u0460\u0487\7/\2\2\u0461\u0469\t\24\2\2\u0462\u0463")
        buf.write("\7\4\2\2\u0463\u0466\7\u0116\2\2\u0464\u0465\7\3\2\2\u0465")
        buf.write("\u0467\7\u0116\2\2\u0466\u0464\3\2\2\2\u0466\u0467\3\2")
        buf.write("\2\2\u0467\u0468\3\2\2\2\u0468\u046a\7\5\2\2\u0469\u0462")
        buf.write("\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u0487\3\2\2\2\u046b")
        buf.write("\u0487\7\64\2\2\u046c\u0487\7\65\2\2\u046d\u0487\7\66")
        buf.write("\2\2\u046e\u0487\7\67\2\2\u046f\u0487\78\2\2\u0470\u0487")
        buf.write("\7\u00f8\2\2\u0471\u0475\7\u00f8\2\2\u0472\u0473\7\4\2")
        buf.write("\2\u0473\u0474\7\u0116\2\2\u0474\u0476\7\5\2\2\u0475\u0472")
        buf.write("\3\2\2\2\u0475\u0476\3\2\2\2\u0476\u0487\3\2\2\2\u0477")
        buf.write("\u047b\79\2\2\u0478\u0479\7\4\2\2\u0479\u047a\7\u0116")
        buf.write("\2\2\u047a\u047c\7\5\2\2\u047b\u0478\3\2\2\2\u047b\u047c")
        buf.write("\3\2\2\2\u047c\u0487\3\2\2\2\u047d\u0481\t\25\2\2\u047e")
        buf.write("\u047f\7\4\2\2\u047f\u0480\7\u0116\2\2\u0480\u0482\7\5")
        buf.write("\2\2\u0481\u047e\3\2\2\2\u0481\u0482\3\2\2\2\u0482\u0487")
        buf.write("\3\2\2\2\u0483\u0487\7?\2\2\u0484\u0487\5\u0086D\2\u0485")
        buf.write("\u0487\5\u0088E\2\u0486\u045c\3\2\2\2\u0486\u045d\3\2")
        buf.write("\2\2\u0486\u045e\3\2\2\2\u0486\u045f\3\2\2\2\u0486\u0460")
        buf.write("\3\2\2\2\u0486\u0461\3\2\2\2\u0486\u046b\3\2\2\2\u0486")
        buf.write("\u046c\3\2\2\2\u0486\u046d\3\2\2\2\u0486\u046e\3\2\2\2")
        buf.write("\u0486\u046f\3\2\2\2\u0486\u0470\3\2\2\2\u0486\u0471\3")
        buf.write("\2\2\2\u0486\u0477\3\2\2\2\u0486\u047d\3\2\2\2\u0486\u0483")
        buf.write("\3\2\2\2\u0486\u0484\3\2\2\2\u0486\u0485\3\2\2\2\u0487")
        buf.write("\u0085\3\2\2\2\u0488\u0489\7@\2\2\u0489\u048a\5\u009c")
        buf.write("O\2\u048a\u0087\3\2\2\2\u048b\u048c\7\177\2\2\u048c\u048d")
        buf.write("\7\u0100\2\2\u048d\u048e\5\u0084C\2\u048e\u048f\7\u0102")
        buf.write("\2\2\u048f\u04a1\3\2\2\2\u0490\u0491\7\u0080\2\2\u0491")
        buf.write("\u0492\7\u0100\2\2\u0492\u0493\5\u0084C\2\u0493\u0494")
        buf.write("\7\3\2\2\u0494\u0495\5\u0084C\2\u0495\u0496\7\u0102\2")
        buf.write("\2\u0496\u04a1\3\2\2\2\u0497\u049e\7\u0081\2\2\u0498\u049a")
        buf.write("\7\u0100\2\2\u0499\u049b\5\u008aF\2\u049a\u0499\3\2\2")
        buf.write("\2\u049a\u049b\3\2\2\2\u049b\u049c\3\2\2\2\u049c\u049f")
        buf.write("\7\u0102\2\2\u049d\u049f\7\u00fe\2\2\u049e\u0498\3\2\2")
        buf.write("\2\u049e\u049d\3\2\2\2\u049f\u04a1\3\2\2\2\u04a0\u048b")
        buf.write("\3\2\2\2\u04a0\u0490\3\2\2\2\u04a0\u0497\3\2\2\2\u04a1")
        buf.write("\u0089\3\2\2\2\u04a2\u04a7\5\u008cG\2\u04a3\u04a4\7\3")
        buf.write("\2\2\u04a4\u04a6\5\u008cG\2\u04a5\u04a3\3\2\2\2\u04a6")
        buf.write("\u04a9\3\2\2\2\u04a7\u04a5\3\2\2\2\u04a7\u04a8\3\2\2\2")
        buf.write("\u04a8\u008b\3\2\2\2\u04a9\u04a7\3\2\2\2\u04aa\u04ac\5")
        buf.write("\u009cO\2\u04ab\u04ad\7\u0105\2\2\u04ac\u04ab\3\2\2\2")
        buf.write("\u04ac\u04ad\3\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\u04b1\5")
        buf.write("\u0084C\2\u04af\u04b0\7\u0082\2\2\u04b0\u04b2\7\u0111")
        buf.write("\2\2\u04b1\u04af\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2\u008d")
        buf.write("\3\2\2\2\u04b3\u04b4\7B\2\2\u04b4\u04b5\5b\62\2\u04b5")
        buf.write("\u04b6\7C\2\2\u04b6\u04b7\5b\62\2\u04b7\u008f\3\2\2\2")
        buf.write("\u04b8\u04b9\7Q\2\2\u04b9\u04be\5\u0092J\2\u04ba\u04bb")
        buf.write("\7\3\2\2\u04bb\u04bd\5\u0092J\2\u04bc\u04ba\3\2\2\2\u04bd")
        buf.write("\u04c0\3\2\2\2\u04be\u04bc\3\2\2\2\u04be\u04bf\3\2\2\2")
        buf.write("\u04bf\u0091\3\2\2\2\u04c0\u04be\3\2\2\2\u04c1\u04c2\5")
        buf.write("\u009cO\2\u04c2\u04c3\7\13\2\2\u04c3\u04c4\5\u0094K\2")
        buf.write("\u04c4\u0093\3\2\2\2\u04c5\u04f0\5\u009cO\2\u04c6\u04e9")
        buf.write("\7\4\2\2\u04c7\u04c8\7\u0092\2\2\u04c8\u04c9\7\20\2\2")
        buf.write("\u04c9\u04ce\5b\62\2\u04ca\u04cb\7\3\2\2\u04cb\u04cd\5")
        buf.write("b\62\2\u04cc\u04ca\3\2\2\2\u04cd\u04d0\3\2\2\2\u04ce\u04cc")
        buf.write("\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf\u04ea\3\2\2\2\u04d0")
        buf.write("\u04ce\3\2\2\2\u04d1\u04d2\t\26\2\2\u04d2\u04d3\7\20\2")
        buf.write("\2\u04d3\u04d8\5b\62\2\u04d4\u04d5\7\3\2\2\u04d5\u04d7")
        buf.write("\5b\62\2\u04d6\u04d4\3\2\2\2\u04d7\u04da\3\2\2\2\u04d8")
        buf.write("\u04d6\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04dc\3\2\2\2")
        buf.write("\u04da\u04d8\3\2\2\2\u04db\u04d1\3\2\2\2\u04db\u04dc\3")
        buf.write("\2\2\2\u04dc\u04e7\3\2\2\2\u04dd\u04de\t\27\2\2\u04de")
        buf.write("\u04df\7\20\2\2\u04df\u04e4\5,\27\2\u04e0\u04e1\7\3\2")
        buf.write("\2\u04e1\u04e3\5,\27\2\u04e2\u04e0\3\2\2\2\u04e3\u04e6")
        buf.write("\3\2\2\2\u04e4\u04e2\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5")
        buf.write("\u04e8\3\2\2\2\u04e6\u04e4\3\2\2\2\u04e7\u04dd\3\2\2\2")
        buf.write("\u04e7\u04e8\3\2\2\2\u04e8\u04ea\3\2\2\2\u04e9\u04c7\3")
        buf.write("\2\2\2\u04e9\u04db\3\2\2\2\u04ea\u04ec\3\2\2\2\u04eb\u04ed")
        buf.write("\5\u0096L\2\u04ec\u04eb\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed")
        buf.write("\u04ee\3\2\2\2\u04ee\u04f0\7\5\2\2\u04ef\u04c5\3\2\2\2")
        buf.write("\u04ef\u04c6\3\2\2\2\u04f0\u0095\3\2\2\2\u04f1\u04f2\7")
        buf.write("T\2\2\u04f2\u0502\5\u0098M\2\u04f3\u04f4\7V\2\2\u04f4")
        buf.write("\u0502\5\u0098M\2\u04f5\u04f6\7T\2\2\u04f6\u04f7\7 \2")
        buf.write("\2\u04f7\u04f8\5\u0098M\2\u04f8\u04f9\7\33\2\2\u04f9\u04fa")
        buf.write("\5\u0098M\2\u04fa\u0502\3\2\2\2\u04fb\u04fc\7V\2\2\u04fc")
        buf.write("\u04fd\7 \2\2\u04fd\u04fe\5\u0098M\2\u04fe\u04ff\7\33")
        buf.write("\2\2\u04ff\u0500\5\u0098M\2\u0500\u0502\3\2\2\2\u0501")
        buf.write("\u04f1\3\2\2\2\u0501\u04f3\3\2\2\2\u0501\u04f5\3\2\2\2")
        buf.write("\u0501\u04fb\3\2\2\2\u0502\u0097\3\2\2\2\u0503\u0504\7")
        buf.write("W\2\2\u0504\u050b\t\30\2\2\u0505\u0506\7Z\2\2\u0506\u050b")
        buf.write("\7]\2\2\u0507\u0508\5b\62\2\u0508\u0509\t\30\2\2\u0509")
        buf.write("\u050b\3\2\2\2\u050a\u0503\3\2\2\2\u050a\u0505\3\2\2\2")
        buf.write("\u050a\u0507\3\2\2\2\u050b\u0099\3\2\2\2\u050c\u0511\5")
        buf.write("\u009cO\2\u050d\u050e\7\u011c\2\2\u050e\u0510\5\u009c")
        buf.write("O\2\u050f\u050d\3\2\2\2\u0510\u0513\3\2\2\2\u0511\u050f")
        buf.write("\3\2\2\2\u0511\u0512\3\2\2\2\u0512\u009b\3\2\2\2\u0513")
        buf.write("\u0511\3\2\2\2\u0514\u0524\5\u009eP\2\u0515\u0524\7\u00e8")
        buf.write("\2\2\u0516\u0524\7M\2\2\u0517\u0524\7I\2\2\u0518\u0524")
        buf.write("\7J\2\2\u0519\u0524\7K\2\2\u051a\u0524\7L\2\2\u051b\u0524")
        buf.write("\7N\2\2\u051c\u0524\7F\2\2\u051d\u0524\7G\2\2\u051e\u0524")
        buf.write("\7O\2\2\u051f\u0524\7v\2\2\u0520\u0524\7y\2\2\u0521\u0524")
        buf.write("\7w\2\2\u0522\u0524\7x\2\2\u0523\u0514\3\2\2\2\u0523\u0515")
        buf.write("\3\2\2\2\u0523\u0516\3\2\2\2\u0523\u0517\3\2\2\2\u0523")
        buf.write("\u0518\3\2\2\2\u0523\u0519\3\2\2\2\u0523\u051a\3\2\2\2")
        buf.write("\u0523\u051b\3\2\2\2\u0523\u051c\3\2\2\2\u0523\u051d\3")
        buf.write("\2\2\2\u0523\u051e\3\2\2\2\u0523\u051f\3\2\2\2\u0523\u0520")
        buf.write("\3\2\2\2\u0523\u0521\3\2\2\2\u0523\u0522\3\2\2\2\u0524")
        buf.write("\u009d\3\2\2\2\u0525\u0527\7\u0104\2\2\u0526\u0525\3\2")
        buf.write("\2\2\u0526\u0527\3\2\2\2\u0527\u0528\3\2\2\2\u0528\u052c")
        buf.write("\7\u011b\2\2\u0529\u052c\5\u00a0Q\2\u052a\u052c\5\u00a4")
        buf.write("S\2\u052b\u0526\3\2\2\2\u052b\u0529\3\2\2\2\u052b\u052a")
        buf.write("\3\2\2\2\u052c\u009f\3\2\2\2\u052d\u052e\7\u011d\2\2\u052e")
        buf.write("\u00a1\3\2\2\2\u052f\u0531\7\u0107\2\2\u0530\u052f\3\2")
        buf.write("\2\2\u0530\u0531\3\2\2\2\u0531\u0532\3\2\2\2\u0532\u0550")
        buf.write("\7\u0117\2\2\u0533\u0535\7\u0107\2\2\u0534\u0533\3\2\2")
        buf.write("\2\u0534\u0535\3\2\2\2\u0535\u0536\3\2\2\2\u0536\u0550")
        buf.write("\7\u0118\2\2\u0537\u0539\7\u0107\2\2\u0538\u0537\3\2\2")
        buf.write("\2\u0538\u0539\3\2\2\2\u0539\u053a\3\2\2\2\u053a\u0550")
        buf.write("\7\u0116\2\2\u053b\u053d\7\u0107\2\2\u053c\u053b\3\2\2")
        buf.write("\2\u053c\u053d\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u0550")
        buf.write("\7\u0112\2\2\u053f\u0541\7\u0107\2\2\u0540\u053f\3\2\2")
        buf.write("\2\u0540\u0541\3\2\2\2\u0541\u0542\3\2\2\2\u0542\u0550")
        buf.write("\7\u0113\2\2\u0543\u0545\7\u0107\2\2\u0544\u0543\3\2\2")
        buf.write("\2\u0544\u0545\3\2\2\2\u0545\u0546\3\2\2\2\u0546\u0550")
        buf.write("\7\u0114\2\2\u0547\u0549\7\u0107\2\2\u0548\u0547\3\2\2")
        buf.write("\2\u0548\u0549\3\2\2\2\u0549\u054a\3\2\2\2\u054a\u0550")
        buf.write("\7\u0119\2\2\u054b\u054d\7\u0107\2\2\u054c\u054b\3\2\2")
        buf.write("\2\u054c\u054d\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u0550")
        buf.write("\7\u011a\2\2\u054f\u0530\3\2\2\2\u054f\u0534\3\2\2\2\u054f")
        buf.write("\u0538\3\2\2\2\u054f\u053c\3\2\2\2\u054f\u0540\3\2\2\2")
        buf.write("\u054f\u0544\3\2\2\2\u054f\u0548\3\2\2\2\u054f\u054c\3")
        buf.write("\2\2\2\u0550\u00a3\3\2\2\2\u0551\u0552\t\31\2\2\u0552")
        buf.write("\u00a5\3\2\2\2\u00bd\u00ac\u00b0\u00b5\u00ba\u00bf\u00c5")
        buf.write("\u00c9\u00d4\u00db\u00de\u00e4\u00ed\u00f0\u00f4\u00f7")
        buf.write("\u00fa\u00ff\u0104\u0108\u0110\u0114\u0118\u011c\u0123")
        buf.write("\u012b\u012f\u013b\u0149\u014e\u0161\u0164\u016d\u0170")
        buf.write("\u0179\u017c\u0185\u0188\u018b\u018f\u0197\u019c\u01a7")
        buf.write("\u01ab\u01af\u01b3\u01b7\u01bc\u01c0\u01c3\u01c6\u01c9")
        buf.write("\u01cc\u01d4\u01da\u01ed\u01fc\u0201\u0209\u020c\u0210")
        buf.write("\u0215\u021e\u0221\u0226\u022d\u0230\u0238\u023f\u0246")
        buf.write("\u0249\u024e\u0254\u0258\u025b\u025e\u0269\u026e\u0283")
        buf.write("\u0285\u0287\u0294\u029d\u02a4\u02ac\u02b4\u02b8\u02bb")
        buf.write("\u02be\u02c4\u02c7\u02ca\u02d0\u02d3\u02d6\u02e0\u02e3")
        buf.write("\u02e7\u02ea\u02f1\u02f5\u02f9\u02fb\u02fe\u0306\u030e")
        buf.write("\u0314\u0318\u031a\u0321\u0325\u0332\u033a\u033c\u0341")
        buf.write("\u0344\u034c\u0355\u035b\u0363\u0369\u036c\u0377\u038c")
        buf.write("\u038e\u0396\u039f\u03ae\u03b1\u03bb\u03bf\u03c7\u03cb")
        buf.write("\u03d4\u03d7\u03e3\u03ea\u03ed\u03f2\u03fd\u040a\u0413")
        buf.write("\u041d\u041f\u0425\u0435\u0437\u043b\u044c\u0453\u0456")
        buf.write("\u045a\u0466\u0469\u0475\u047b\u0481\u0486\u049a\u049e")
        buf.write("\u04a0\u04a7\u04ac\u04b1\u04be\u04ce\u04d8\u04db\u04e4")
        buf.write("\u04e7\u04e9\u04ec\u04ef\u0501\u050a\u0511\u0523\u0526")
        buf.write("\u052b\u0530\u0534\u0538\u053c\u0540\u0544\u0548\u054c")
        buf.write("\u054f")
        return buf.getvalue()


class TeradataParser ( Parser ):

    grammarFileName = "Teradata.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "'('", "')'", "'['", "']'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ET'", "'BT'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'<=>'", "'<>'", 
                     "'!='", "'<'", "<INVALID>", "'>'", "<INVALID>", "'$'", 
                     "':'", "'+'", "'-'", "'*'", "'/'", "'%'", "'DIV'", 
                     "'~'", "'&'", "'|'", "'^'", "'||'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'.'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "SELECT", "FROM", "ADD", 
                      "AS", "ALL", "DISTINCT", "WHERE", "GROUP", "BY", "GROUPING", 
                      "SETS", "CUBE", "ROLLUP", "ORDER", "HAVING", "QUALIFY", 
                      "LIMIT", "AT", "OR", "AND", "IN", "NOT", "NO", "EXISTS", 
                      "BETWEEN", "LIKE", "RLIKE", "IS", "NULL", "TRUE", 
                      "FALSE", "NULLS", "ASC", "DESC", "FOR", "BYTEINT", 
                      "SMALLINT", "INT", "INTEGER", "BIGINT", "DECIMAL", 
                      "DEC", "NUMERIC", "NUMBER", "FLOAT", "REAL", "DOUBLE_PRECISION", 
                      "DATE", "DATETIME", "TIMESTAMP", "CHAR", "CHARACTER", 
                      "VARCHAR", "CHARACTER_VARYING", "CHAR_VARYING", "LONG_VARCHAR", 
                      "INTERVAL", "CASE", "WHEN", "THEN", "ELSE", "END", 
                      "JOIN", "CROSS", "OUTER", "INNER", "LEFT", "SEMI", 
                      "RIGHT", "FULL", "NATURAL", "ON", "LATERAL", "WINDOW", 
                      "OVER", "PARTITION", "RANGE", "PRESERVE", "ROWS", 
                      "UNBOUNDED", "PRECEDING", "FOLLOWING", "CURRENT", 
                      "FIRST", "LAST", "ROW", "WITH", "VALUES", "CREATE", 
                      "TABLE", "VIEW", "REPLACE", "INSERT", "UPDATE", "DELETE", 
                      "INTO", "DESCRIBE", "EXPLAIN", "FORMAT", "LOGICAL", 
                      "CODEGEN", "CAST", "SHOW", "TABLES", "COLUMNS", "COLUMN", 
                      "USE", "PARTITIONS", "FUNCTIONS", "DROP", "UNION", 
                      "EXCEPT", "SETMINUS", "INTERSECT", "TO", "TABLESAMPLE", 
                      "STRATIFY", "ALTER", "RENAME", "ARRAY", "MAP", "STRUCT", 
                      "COMMENT", "MULTISET", "SET", "RESET", "DATA", "START", 
                      "TRANSACTION", "COMMIT", "ROLLBACK", "MACRO", "IF", 
                      "PERCENTLIT", "BUCKET", "OUT", "OF", "SORT", "CLUSTER", 
                      "DISTRIBUTE", "OVERWRITE", "TRANSFORM", "REDUCE", 
                      "USING", "SERDE", "SERDEPROPERTIES", "RECORDREADER", 
                      "RECORDWRITER", "DELIMITED", "FIELDS", "TERMINATED", 
                      "COLLECTION", "ITEMS", "KEYS", "ESCAPED", "LINES", 
                      "SEPARATED", "FUNCTION", "EXTENDED", "REFRESH", "CLEAR", 
                      "CACHE", "UNCACHE", "LAZY", "FORMATTED", "TEMPORARY", 
                      "GLOBAL", "VOLATILE", "OPTIONS", "UNSET", "TBLPROPERTIES", 
                      "DBPROPERTIES", "BUCKETS", "SKEWED", "STORED", "DIRECTORIES", 
                      "LOCATION", "EXCHANGE", "ARCHIVE", "UNARCHIVE", "FILEFORMAT", 
                      "TOUCH", "COMPACT", "CONCATENATE", "CHANGE", "CASCADE", 
                      "RESTRICT", "CLUSTERED", "SORTED", "PURGE", "INPUTFORMAT", 
                      "OUTPUTFORMAT", "DATABASE", "DATABASES", "DFS", "TRUNCATE", 
                      "ANALYZE", "COMPUTE", "LIST", "STATISTICS", "PARTITIONED", 
                      "EXTERNAL", "DEFINED", "REVOKE", "GRANT", "LOCK", 
                      "UNLOCK", "MSCK", "REPAIR", "RECOVER", "EXPORT", "IMPORT", 
                      "LOAD", "ROLE", "ROLES", "COMPACTIONS", "PRINCIPALS", 
                      "TRANSACTIONS", "INDEX", "INDEXES", "UNIQUE", "PRIMARY", 
                      "LOCKS", "OPTION", "ANTI", "LOCAL", "INPATH", "CURRENT_DATE", 
                      "CURRENT_TIMESTAMP", "SUBSTRING", "TRIM", "BOTH", 
                      "TRAILING", "LEADING", "CS", "CASESPECIFIC", "LOG", 
                      "ET", "BT", "BEGIN", "TIME", "FALLBACK", "TITLE", 
                      "POSITION", "EQ", "NSEQ", "NEQ", "NEQJ", "LT", "LTE", 
                      "GT", "GTE", "DOLLAR", "REFERENCE", "PLUS", "MINUS", 
                      "ASTERISK", "SLASH", "PERCENT", "DIV", "TILDE", "AMPERSAND", 
                      "PIPE", "HAT", "STRING_CONCATENATE", "STRING", "BIGINT_LITERAL", 
                      "SMALLINT_LITERAL", "TINYINT_LITERAL", "BYTELENGTH_LITERAL", 
                      "INTEGER_VALUE", "DECIMAL_VALUE", "SCIENTIFIC_DECIMAL_VALUE", 
                      "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", "IDENTIFIER", 
                      "DOT", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", 
                      "BRACKETED_COMMENT", "WS", "UNRECOGNIZED" ]

    RULE_statement = 0
    RULE_createTable = 1
    RULE_columnsList = 2
    RULE_tableProperties = 3
    RULE_tableIndex = 4
    RULE_query = 5
    RULE_transactions = 6
    RULE_insertInto = 7
    RULE_update = 8
    RULE_updateSetExpression = 9
    RULE_updateCondition = 10
    RULE_delete = 11
    RULE_deleteCondition = 12
    RULE_dropTable = 13
    RULE_ctes = 14
    RULE_namedQuery = 15
    RULE_tableProvider = 16
    RULE_queryNoWith = 17
    RULE_queryOrganization = 18
    RULE_queryTerm = 19
    RULE_queryPrimary = 20
    RULE_sortItem = 21
    RULE_querySpecification = 22
    RULE_fromClause = 23
    RULE_whereClause = 24
    RULE_havingClause = 25
    RULE_qualifyClause = 26
    RULE_aggregation = 27
    RULE_groupingSet = 28
    RULE_lateralView = 29
    RULE_setQuantifier = 30
    RULE_relation = 31
    RULE_joinRelation = 32
    RULE_joinType = 33
    RULE_joinCriteria = 34
    RULE_sample = 35
    RULE_identifierList = 36
    RULE_identifierSeq = 37
    RULE_orderedIdentifierList = 38
    RULE_orderedIdentifier = 39
    RULE_identifierCommentList = 40
    RULE_identifierComment = 41
    RULE_relationPrimary = 42
    RULE_inlineTable = 43
    RULE_valuesExpression = 44
    RULE_tableIdentifier = 45
    RULE_namedExpression = 46
    RULE_namedExpressionSeq = 47
    RULE_expression = 48
    RULE_booleanExpression = 49
    RULE_predicated = 50
    RULE_predicate = 51
    RULE_valueExpression = 52
    RULE_primaryExpression = 53
    RULE_dataAttribute = 54
    RULE_dataTypePrecision = 55
    RULE_constant = 56
    RULE_caseSpecific = 57
    RULE_comparisonOperator = 58
    RULE_arithmeticOperator = 59
    RULE_predicateOperator = 60
    RULE_booleanValue = 61
    RULE_interval = 62
    RULE_intervalField = 63
    RULE_intervalValue = 64
    RULE_dataType = 65
    RULE_intervalDataType = 66
    RULE_complexDataType = 67
    RULE_colTypeList = 68
    RULE_colType = 69
    RULE_whenClause = 70
    RULE_windows = 71
    RULE_namedWindow = 72
    RULE_windowSpec = 73
    RULE_windowFrame = 74
    RULE_frameBound = 75
    RULE_qualifiedName = 76
    RULE_identifier = 77
    RULE_strictIdentifier = 78
    RULE_quotedIdentifier = 79
    RULE_number = 80
    RULE_nonReserved = 81

    ruleNames =  [ "statement", "createTable", "columnsList", "tableProperties", 
                   "tableIndex", "query", "transactions", "insertInto", 
                   "update", "updateSetExpression", "updateCondition", "delete", 
                   "deleteCondition", "dropTable", "ctes", "namedQuery", 
                   "tableProvider", "queryNoWith", "queryOrganization", 
                   "queryTerm", "queryPrimary", "sortItem", "querySpecification", 
                   "fromClause", "whereClause", "havingClause", "qualifyClause", 
                   "aggregation", "groupingSet", "lateralView", "setQuantifier", 
                   "relation", "joinRelation", "joinType", "joinCriteria", 
                   "sample", "identifierList", "identifierSeq", "orderedIdentifierList", 
                   "orderedIdentifier", "identifierCommentList", "identifierComment", 
                   "relationPrimary", "inlineTable", "valuesExpression", 
                   "tableIdentifier", "namedExpression", "namedExpressionSeq", 
                   "expression", "booleanExpression", "predicated", "predicate", 
                   "valueExpression", "primaryExpression", "dataAttribute", 
                   "dataTypePrecision", "constant", "caseSpecific", "comparisonOperator", 
                   "arithmeticOperator", "predicateOperator", "booleanValue", 
                   "interval", "intervalField", "intervalValue", "dataType", 
                   "intervalDataType", "complexDataType", "colTypeList", 
                   "colType", "whenClause", "windows", "namedWindow", "windowSpec", 
                   "windowFrame", "frameBound", "qualifiedName", "identifier", 
                   "strictIdentifier", "quotedIdentifier", "number", "nonReserved" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    SELECT=6
    FROM=7
    ADD=8
    AS=9
    ALL=10
    DISTINCT=11
    WHERE=12
    GROUP=13
    BY=14
    GROUPING=15
    SETS=16
    CUBE=17
    ROLLUP=18
    ORDER=19
    HAVING=20
    QUALIFY=21
    LIMIT=22
    AT=23
    OR=24
    AND=25
    IN=26
    NOT=27
    NO=28
    EXISTS=29
    BETWEEN=30
    LIKE=31
    RLIKE=32
    IS=33
    NULL=34
    TRUE=35
    FALSE=36
    NULLS=37
    ASC=38
    DESC=39
    FOR=40
    BYTEINT=41
    SMALLINT=42
    INT=43
    INTEGER=44
    BIGINT=45
    DECIMAL=46
    DEC=47
    NUMERIC=48
    NUMBER=49
    FLOAT=50
    REAL=51
    DOUBLE_PRECISION=52
    DATE=53
    DATETIME=54
    TIMESTAMP=55
    CHAR=56
    CHARACTER=57
    VARCHAR=58
    CHARACTER_VARYING=59
    CHAR_VARYING=60
    LONG_VARCHAR=61
    INTERVAL=62
    CASE=63
    WHEN=64
    THEN=65
    ELSE=66
    END=67
    JOIN=68
    CROSS=69
    OUTER=70
    INNER=71
    LEFT=72
    SEMI=73
    RIGHT=74
    FULL=75
    NATURAL=76
    ON=77
    LATERAL=78
    WINDOW=79
    OVER=80
    PARTITION=81
    RANGE=82
    PRESERVE=83
    ROWS=84
    UNBOUNDED=85
    PRECEDING=86
    FOLLOWING=87
    CURRENT=88
    FIRST=89
    LAST=90
    ROW=91
    WITH=92
    VALUES=93
    CREATE=94
    TABLE=95
    VIEW=96
    REPLACE=97
    INSERT=98
    UPDATE=99
    DELETE=100
    INTO=101
    DESCRIBE=102
    EXPLAIN=103
    FORMAT=104
    LOGICAL=105
    CODEGEN=106
    CAST=107
    SHOW=108
    TABLES=109
    COLUMNS=110
    COLUMN=111
    USE=112
    PARTITIONS=113
    FUNCTIONS=114
    DROP=115
    UNION=116
    EXCEPT=117
    SETMINUS=118
    INTERSECT=119
    TO=120
    TABLESAMPLE=121
    STRATIFY=122
    ALTER=123
    RENAME=124
    ARRAY=125
    MAP=126
    STRUCT=127
    COMMENT=128
    MULTISET=129
    SET=130
    RESET=131
    DATA=132
    START=133
    TRANSACTION=134
    COMMIT=135
    ROLLBACK=136
    MACRO=137
    IF=138
    PERCENTLIT=139
    BUCKET=140
    OUT=141
    OF=142
    SORT=143
    CLUSTER=144
    DISTRIBUTE=145
    OVERWRITE=146
    TRANSFORM=147
    REDUCE=148
    USING=149
    SERDE=150
    SERDEPROPERTIES=151
    RECORDREADER=152
    RECORDWRITER=153
    DELIMITED=154
    FIELDS=155
    TERMINATED=156
    COLLECTION=157
    ITEMS=158
    KEYS=159
    ESCAPED=160
    LINES=161
    SEPARATED=162
    FUNCTION=163
    EXTENDED=164
    REFRESH=165
    CLEAR=166
    CACHE=167
    UNCACHE=168
    LAZY=169
    FORMATTED=170
    TEMPORARY=171
    GLOBAL=172
    VOLATILE=173
    OPTIONS=174
    UNSET=175
    TBLPROPERTIES=176
    DBPROPERTIES=177
    BUCKETS=178
    SKEWED=179
    STORED=180
    DIRECTORIES=181
    LOCATION=182
    EXCHANGE=183
    ARCHIVE=184
    UNARCHIVE=185
    FILEFORMAT=186
    TOUCH=187
    COMPACT=188
    CONCATENATE=189
    CHANGE=190
    CASCADE=191
    RESTRICT=192
    CLUSTERED=193
    SORTED=194
    PURGE=195
    INPUTFORMAT=196
    OUTPUTFORMAT=197
    DATABASE=198
    DATABASES=199
    DFS=200
    TRUNCATE=201
    ANALYZE=202
    COMPUTE=203
    LIST=204
    STATISTICS=205
    PARTITIONED=206
    EXTERNAL=207
    DEFINED=208
    REVOKE=209
    GRANT=210
    LOCK=211
    UNLOCK=212
    MSCK=213
    REPAIR=214
    RECOVER=215
    EXPORT=216
    IMPORT=217
    LOAD=218
    ROLE=219
    ROLES=220
    COMPACTIONS=221
    PRINCIPALS=222
    TRANSACTIONS=223
    INDEX=224
    INDEXES=225
    UNIQUE=226
    PRIMARY=227
    LOCKS=228
    OPTION=229
    ANTI=230
    LOCAL=231
    INPATH=232
    CURRENT_DATE=233
    CURRENT_TIMESTAMP=234
    SUBSTRING=235
    TRIM=236
    BOTH=237
    TRAILING=238
    LEADING=239
    CS=240
    CASESPECIFIC=241
    LOG=242
    ET=243
    BT=244
    BEGIN=245
    TIME=246
    FALLBACK=247
    TITLE=248
    POSITION=249
    EQ=250
    NSEQ=251
    NEQ=252
    NEQJ=253
    LT=254
    LTE=255
    GT=256
    GTE=257
    DOLLAR=258
    REFERENCE=259
    PLUS=260
    MINUS=261
    ASTERISK=262
    SLASH=263
    PERCENT=264
    DIV=265
    TILDE=266
    AMPERSAND=267
    PIPE=268
    HAT=269
    STRING_CONCATENATE=270
    STRING=271
    BIGINT_LITERAL=272
    SMALLINT_LITERAL=273
    TINYINT_LITERAL=274
    BYTELENGTH_LITERAL=275
    INTEGER_VALUE=276
    DECIMAL_VALUE=277
    SCIENTIFIC_DECIMAL_VALUE=278
    DOUBLE_LITERAL=279
    BIGDECIMAL_LITERAL=280
    IDENTIFIER=281
    DOT=282
    BACKQUOTED_IDENTIFIER=283
    SIMPLE_COMMENT=284
    BRACKETED_COMMENT=285
    WS=286
    UNRECOGNIZED=287

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InsertCallbackContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def insertInto(self):
            return self.getTypedRuleContext(TeradataParser.InsertIntoContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertCallback" ):
                listener.enterInsertCallback(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertCallback" ):
                listener.exitInsertCallback(self)


    class UpdateCallbackContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def update(self):
            return self.getTypedRuleContext(TeradataParser.UpdateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateCallback" ):
                listener.enterUpdateCallback(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateCallback" ):
                listener.exitUpdateCallback(self)


    class CreateCallbackContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def createTable(self):
            return self.getTypedRuleContext(TeradataParser.CreateTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateCallback" ):
                listener.enterCreateCallback(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateCallback" ):
                listener.exitCreateCallback(self)


    class QueryCallbackContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(TeradataParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryCallback" ):
                listener.enterQueryCallback(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryCallback" ):
                listener.exitQueryCallback(self)


    class DeleteCallbackContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def delete(self):
            return self.getTypedRuleContext(TeradataParser.DeleteContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteCallback" ):
                listener.enterDeleteCallback(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteCallback" ):
                listener.exitDeleteCallback(self)


    class DropCallbackContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dropTable(self):
            return self.getTypedRuleContext(TeradataParser.DropTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropCallback" ):
                listener.enterDropCallback(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropCallback" ):
                listener.exitDropCallback(self)



    def statement(self):

        localctx = TeradataParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_statement)
        try:
            self.state = 170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                localctx = TeradataParser.QueryCallbackContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 164
                self.query()
                pass

            elif la_ == 2:
                localctx = TeradataParser.CreateCallbackContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 165
                self.createTable()
                pass

            elif la_ == 3:
                localctx = TeradataParser.InsertCallbackContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 166
                self.insertInto()
                pass

            elif la_ == 4:
                localctx = TeradataParser.UpdateCallbackContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 167
                self.update()
                pass

            elif la_ == 5:
                localctx = TeradataParser.DeleteCallbackContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 168
                self.delete()
                pass

            elif la_ == 6:
                localctx = TeradataParser.DropCallbackContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 169
                self.dropTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(TeradataParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(TeradataParser.TableIdentifierContext,0)


        def GLOBAL(self):
            return self.getToken(TeradataParser.GLOBAL, 0)

        def TEMPORARY(self):
            return self.getToken(TeradataParser.TEMPORARY, 0)

        def VOLATILE(self):
            return self.getToken(TeradataParser.VOLATILE, 0)

        def tableProperties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.TablePropertiesContext)
            else:
                return self.getTypedRuleContext(TeradataParser.TablePropertiesContext,i)


        def tableIndex(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.TableIndexContext)
            else:
                return self.getTypedRuleContext(TeradataParser.TableIndexContext,i)


        def ON(self):
            return self.getToken(TeradataParser.ON, 0)

        def COMMIT(self):
            return self.getToken(TeradataParser.COMMIT, 0)

        def PRESERVE(self):
            return self.getToken(TeradataParser.PRESERVE, 0)

        def ROWS(self):
            return self.getToken(TeradataParser.ROWS, 0)

        def SET(self):
            return self.getToken(TeradataParser.SET, 0)

        def MULTISET(self):
            return self.getToken(TeradataParser.MULTISET, 0)

        def AS(self):
            return self.getToken(TeradataParser.AS, 0)

        def query(self):
            return self.getTypedRuleContext(TeradataParser.QueryContext,0)


        def WITH(self):
            return self.getToken(TeradataParser.WITH, 0)

        def DATA(self):
            return self.getToken(TeradataParser.DATA, 0)

        def columnsList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ColumnsListContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ColumnsListContext,i)


        def getRuleIndex(self):
            return TeradataParser.RULE_createTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)




    def createTable(self):

        localctx = TeradataParser.CreateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_createTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 172
            self.match(TeradataParser.CREATE)
            self.state = 174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.MULTISET or _la==TeradataParser.SET:
                self.state = 173
                _la = self._input.LA(1)
                if not(_la==TeradataParser.MULTISET or _la==TeradataParser.SET):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 179
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TeradataParser.GLOBAL]:
                self.state = 176
                self.match(TeradataParser.GLOBAL)
                self.state = 177
                self.match(TeradataParser.TEMPORARY)
                pass
            elif token in [TeradataParser.VOLATILE]:
                self.state = 178
                self.match(TeradataParser.VOLATILE)
                pass
            elif token in [TeradataParser.TABLE]:
                pass
            else:
                pass
            self.state = 181
            self.match(TeradataParser.TABLE)
            self.state = 182
            self.tableIdentifier()
            self.state = 189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TeradataParser.T__0 or _la==TeradataParser.NO or _la==TeradataParser.LOG or _la==TeradataParser.FALLBACK:
                self.state = 184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.T__0:
                    self.state = 183
                    self.match(TeradataParser.T__0)


                self.state = 186
                self.tableProperties()
                self.state = 191
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TeradataParser.T__1]:
                self.state = 192
                self.match(TeradataParser.T__1)
                self.state = 197 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 193
                    self.columnsList()
                    self.state = 195
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TeradataParser.T__0:
                        self.state = 194
                        self.match(TeradataParser.T__0)


                    self.state = 199 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TeradataParser.SELECT) | (1 << TeradataParser.FROM) | (1 << TeradataParser.ADD) | (1 << TeradataParser.AS) | (1 << TeradataParser.ALL) | (1 << TeradataParser.DISTINCT) | (1 << TeradataParser.WHERE) | (1 << TeradataParser.GROUP) | (1 << TeradataParser.BY) | (1 << TeradataParser.GROUPING) | (1 << TeradataParser.SETS) | (1 << TeradataParser.CUBE) | (1 << TeradataParser.ROLLUP) | (1 << TeradataParser.ORDER) | (1 << TeradataParser.HAVING) | (1 << TeradataParser.LIMIT) | (1 << TeradataParser.AT) | (1 << TeradataParser.OR) | (1 << TeradataParser.AND) | (1 << TeradataParser.IN) | (1 << TeradataParser.NOT) | (1 << TeradataParser.NO) | (1 << TeradataParser.EXISTS) | (1 << TeradataParser.BETWEEN) | (1 << TeradataParser.LIKE) | (1 << TeradataParser.RLIKE) | (1 << TeradataParser.IS) | (1 << TeradataParser.NULL) | (1 << TeradataParser.TRUE) | (1 << TeradataParser.FALSE) | (1 << TeradataParser.NULLS) | (1 << TeradataParser.ASC) | (1 << TeradataParser.DESC) | (1 << TeradataParser.FOR) | (1 << TeradataParser.BYTEINT) | (1 << TeradataParser.SMALLINT) | (1 << TeradataParser.INT) | (1 << TeradataParser.INTEGER) | (1 << TeradataParser.BIGINT) | (1 << TeradataParser.DECIMAL) | (1 << TeradataParser.DEC) | (1 << TeradataParser.NUMERIC) | (1 << TeradataParser.NUMBER) | (1 << TeradataParser.FLOAT) | (1 << TeradataParser.REAL) | (1 << TeradataParser.DOUBLE_PRECISION) | (1 << TeradataParser.DATE) | (1 << TeradataParser.DATETIME) | (1 << TeradataParser.TIMESTAMP) | (1 << TeradataParser.CHAR) | (1 << TeradataParser.CHARACTER) | (1 << TeradataParser.VARCHAR) | (1 << TeradataParser.CHARACTER_VARYING) | (1 << TeradataParser.CHAR_VARYING) | (1 << TeradataParser.LONG_VARCHAR) | (1 << TeradataParser.INTERVAL) | (1 << TeradataParser.CASE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TeradataParser.WHEN - 64)) | (1 << (TeradataParser.THEN - 64)) | (1 << (TeradataParser.ELSE - 64)) | (1 << (TeradataParser.END - 64)) | (1 << (TeradataParser.JOIN - 64)) | (1 << (TeradataParser.CROSS - 64)) | (1 << (TeradataParser.OUTER - 64)) | (1 << (TeradataParser.INNER - 64)) | (1 << (TeradataParser.LEFT - 64)) | (1 << (TeradataParser.SEMI - 64)) | (1 << (TeradataParser.RIGHT - 64)) | (1 << (TeradataParser.FULL - 64)) | (1 << (TeradataParser.NATURAL - 64)) | (1 << (TeradataParser.ON - 64)) | (1 << (TeradataParser.LATERAL - 64)) | (1 << (TeradataParser.WINDOW - 64)) | (1 << (TeradataParser.OVER - 64)) | (1 << (TeradataParser.PARTITION - 64)) | (1 << (TeradataParser.RANGE - 64)) | (1 << (TeradataParser.PRESERVE - 64)) | (1 << (TeradataParser.ROWS - 64)) | (1 << (TeradataParser.UNBOUNDED - 64)) | (1 << (TeradataParser.PRECEDING - 64)) | (1 << (TeradataParser.FOLLOWING - 64)) | (1 << (TeradataParser.CURRENT - 64)) | (1 << (TeradataParser.FIRST - 64)) | (1 << (TeradataParser.LAST - 64)) | (1 << (TeradataParser.ROW - 64)) | (1 << (TeradataParser.WITH - 64)) | (1 << (TeradataParser.VALUES - 64)) | (1 << (TeradataParser.CREATE - 64)) | (1 << (TeradataParser.TABLE - 64)) | (1 << (TeradataParser.VIEW - 64)) | (1 << (TeradataParser.REPLACE - 64)) | (1 << (TeradataParser.INSERT - 64)) | (1 << (TeradataParser.UPDATE - 64)) | (1 << (TeradataParser.DELETE - 64)) | (1 << (TeradataParser.INTO - 64)) | (1 << (TeradataParser.DESCRIBE - 64)) | (1 << (TeradataParser.EXPLAIN - 64)) | (1 << (TeradataParser.FORMAT - 64)) | (1 << (TeradataParser.LOGICAL - 64)) | (1 << (TeradataParser.CODEGEN - 64)) | (1 << (TeradataParser.CAST - 64)) | (1 << (TeradataParser.SHOW - 64)) | (1 << (TeradataParser.TABLES - 64)) | (1 << (TeradataParser.COLUMNS - 64)) | (1 << (TeradataParser.COLUMN - 64)) | (1 << (TeradataParser.USE - 64)) | (1 << (TeradataParser.PARTITIONS - 64)) | (1 << (TeradataParser.FUNCTIONS - 64)) | (1 << (TeradataParser.DROP - 64)) | (1 << (TeradataParser.UNION - 64)) | (1 << (TeradataParser.EXCEPT - 64)) | (1 << (TeradataParser.SETMINUS - 64)) | (1 << (TeradataParser.INTERSECT - 64)) | (1 << (TeradataParser.TO - 64)) | (1 << (TeradataParser.TABLESAMPLE - 64)) | (1 << (TeradataParser.STRATIFY - 64)) | (1 << (TeradataParser.ALTER - 64)) | (1 << (TeradataParser.RENAME - 64)) | (1 << (TeradataParser.ARRAY - 64)) | (1 << (TeradataParser.MAP - 64)) | (1 << (TeradataParser.STRUCT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (TeradataParser.COMMENT - 128)) | (1 << (TeradataParser.MULTISET - 128)) | (1 << (TeradataParser.SET - 128)) | (1 << (TeradataParser.RESET - 128)) | (1 << (TeradataParser.DATA - 128)) | (1 << (TeradataParser.START - 128)) | (1 << (TeradataParser.TRANSACTION - 128)) | (1 << (TeradataParser.COMMIT - 128)) | (1 << (TeradataParser.ROLLBACK - 128)) | (1 << (TeradataParser.MACRO - 128)) | (1 << (TeradataParser.IF - 128)) | (1 << (TeradataParser.PERCENTLIT - 128)) | (1 << (TeradataParser.BUCKET - 128)) | (1 << (TeradataParser.OUT - 128)) | (1 << (TeradataParser.OF - 128)) | (1 << (TeradataParser.SORT - 128)) | (1 << (TeradataParser.CLUSTER - 128)) | (1 << (TeradataParser.DISTRIBUTE - 128)) | (1 << (TeradataParser.OVERWRITE - 128)) | (1 << (TeradataParser.TRANSFORM - 128)) | (1 << (TeradataParser.REDUCE - 128)) | (1 << (TeradataParser.USING - 128)) | (1 << (TeradataParser.SERDE - 128)) | (1 << (TeradataParser.SERDEPROPERTIES - 128)) | (1 << (TeradataParser.RECORDREADER - 128)) | (1 << (TeradataParser.RECORDWRITER - 128)) | (1 << (TeradataParser.DELIMITED - 128)) | (1 << (TeradataParser.FIELDS - 128)) | (1 << (TeradataParser.TERMINATED - 128)) | (1 << (TeradataParser.COLLECTION - 128)) | (1 << (TeradataParser.ITEMS - 128)) | (1 << (TeradataParser.KEYS - 128)) | (1 << (TeradataParser.ESCAPED - 128)) | (1 << (TeradataParser.LINES - 128)) | (1 << (TeradataParser.SEPARATED - 128)) | (1 << (TeradataParser.FUNCTION - 128)) | (1 << (TeradataParser.EXTENDED - 128)) | (1 << (TeradataParser.REFRESH - 128)) | (1 << (TeradataParser.CLEAR - 128)) | (1 << (TeradataParser.CACHE - 128)) | (1 << (TeradataParser.UNCACHE - 128)) | (1 << (TeradataParser.LAZY - 128)) | (1 << (TeradataParser.FORMATTED - 128)) | (1 << (TeradataParser.TEMPORARY - 128)) | (1 << (TeradataParser.GLOBAL - 128)) | (1 << (TeradataParser.VOLATILE - 128)) | (1 << (TeradataParser.OPTIONS - 128)) | (1 << (TeradataParser.UNSET - 128)) | (1 << (TeradataParser.TBLPROPERTIES - 128)) | (1 << (TeradataParser.DBPROPERTIES - 128)) | (1 << (TeradataParser.BUCKETS - 128)) | (1 << (TeradataParser.SKEWED - 128)) | (1 << (TeradataParser.STORED - 128)) | (1 << (TeradataParser.DIRECTORIES - 128)) | (1 << (TeradataParser.LOCATION - 128)) | (1 << (TeradataParser.EXCHANGE - 128)) | (1 << (TeradataParser.ARCHIVE - 128)) | (1 << (TeradataParser.UNARCHIVE - 128)) | (1 << (TeradataParser.FILEFORMAT - 128)) | (1 << (TeradataParser.TOUCH - 128)) | (1 << (TeradataParser.COMPACT - 128)) | (1 << (TeradataParser.CONCATENATE - 128)) | (1 << (TeradataParser.CHANGE - 128)) | (1 << (TeradataParser.CASCADE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (TeradataParser.RESTRICT - 192)) | (1 << (TeradataParser.CLUSTERED - 192)) | (1 << (TeradataParser.SORTED - 192)) | (1 << (TeradataParser.PURGE - 192)) | (1 << (TeradataParser.INPUTFORMAT - 192)) | (1 << (TeradataParser.OUTPUTFORMAT - 192)) | (1 << (TeradataParser.DATABASE - 192)) | (1 << (TeradataParser.DATABASES - 192)) | (1 << (TeradataParser.DFS - 192)) | (1 << (TeradataParser.TRUNCATE - 192)) | (1 << (TeradataParser.ANALYZE - 192)) | (1 << (TeradataParser.COMPUTE - 192)) | (1 << (TeradataParser.LIST - 192)) | (1 << (TeradataParser.STATISTICS - 192)) | (1 << (TeradataParser.PARTITIONED - 192)) | (1 << (TeradataParser.EXTERNAL - 192)) | (1 << (TeradataParser.DEFINED - 192)) | (1 << (TeradataParser.REVOKE - 192)) | (1 << (TeradataParser.GRANT - 192)) | (1 << (TeradataParser.LOCK - 192)) | (1 << (TeradataParser.UNLOCK - 192)) | (1 << (TeradataParser.MSCK - 192)) | (1 << (TeradataParser.REPAIR - 192)) | (1 << (TeradataParser.RECOVER - 192)) | (1 << (TeradataParser.EXPORT - 192)) | (1 << (TeradataParser.IMPORT - 192)) | (1 << (TeradataParser.LOAD - 192)) | (1 << (TeradataParser.ROLE - 192)) | (1 << (TeradataParser.ROLES - 192)) | (1 << (TeradataParser.COMPACTIONS - 192)) | (1 << (TeradataParser.PRINCIPALS - 192)) | (1 << (TeradataParser.TRANSACTIONS - 192)) | (1 << (TeradataParser.INDEX - 192)) | (1 << (TeradataParser.INDEXES - 192)) | (1 << (TeradataParser.UNIQUE - 192)) | (1 << (TeradataParser.PRIMARY - 192)) | (1 << (TeradataParser.LOCKS - 192)) | (1 << (TeradataParser.OPTION - 192)) | (1 << (TeradataParser.ANTI - 192)) | (1 << (TeradataParser.LOCAL - 192)) | (1 << (TeradataParser.INPATH - 192)) | (1 << (TeradataParser.CURRENT_DATE - 192)) | (1 << (TeradataParser.CURRENT_TIMESTAMP - 192)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (TeradataParser.DOLLAR - 258)) | (1 << (TeradataParser.DIV - 258)) | (1 << (TeradataParser.IDENTIFIER - 258)) | (1 << (TeradataParser.BACKQUOTED_IDENTIFIER - 258)))) != 0)):
                        break

                self.state = 201
                self.match(TeradataParser.T__2)
                pass
            elif token in [TeradataParser.AS]:
                self.state = 203
                self.match(TeradataParser.AS)
                self.state = 204
                self.match(TeradataParser.T__1)
                self.state = 205
                self.query()
                self.state = 206
                self.match(TeradataParser.T__2)
                self.state = 207
                self.match(TeradataParser.WITH)
                self.state = 208
                self.match(TeradataParser.DATA)
                pass
            elif token in [TeradataParser.EOF, TeradataParser.ON, TeradataParser.UNIQUE, TeradataParser.PRIMARY]:
                pass
            else:
                pass
            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.UNIQUE or _la==TeradataParser.PRIMARY:
                self.state = 212
                self.tableIndex()
                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TeradataParser.T__0:
                    self.state = 213
                    self.match(TeradataParser.T__0)
                    self.state = 214
                    self.tableIndex()
                    self.state = 219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.ON:
                self.state = 222
                self.match(TeradataParser.ON)
                self.state = 223
                self.match(TeradataParser.COMMIT)
                self.state = 224
                self.match(TeradataParser.PRESERVE)
                self.state = 225
                self.match(TeradataParser.ROWS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnsListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(TeradataParser.DataTypeContext,0)


        def FORMAT(self):
            return self.getToken(TeradataParser.FORMAT, 0)

        def STRING(self):
            return self.getToken(TeradataParser.STRING, 0)

        def INTEGER_VALUE(self):
            return self.getToken(TeradataParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_columnsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnsList" ):
                listener.enterColumnsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnsList" ):
                listener.exitColumnsList(self)




    def columnsList(self):

        localctx = TeradataParser.ColumnsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_columnsList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.identifier()
            self.state = 229
            self.dataType()
            self.state = 235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 230
                self.match(TeradataParser.FORMAT)
                self.state = 231
                self.match(TeradataParser.STRING)

            elif la_ == 2:
                self.state = 232
                self.match(TeradataParser.T__1)
                self.state = 233
                self.match(TeradataParser.INTEGER_VALUE)
                self.state = 234
                self.match(TeradataParser.T__2)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FALLBACK(self):
            return self.getToken(TeradataParser.FALLBACK, 0)

        def NO(self):
            return self.getToken(TeradataParser.NO, 0)

        def LOG(self):
            return self.getToken(TeradataParser.LOG, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_tableProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProperties" ):
                listener.enterTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProperties" ):
                listener.exitTableProperties(self)




    def tableProperties(self):

        localctx = TeradataParser.TablePropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_tableProperties)
        self._la = 0 # Token type
        try:
            self.state = 245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.NO:
                    self.state = 237
                    self.match(TeradataParser.NO)


                self.state = 240
                self.match(TeradataParser.FALLBACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.NO:
                    self.state = 241
                    self.match(TeradataParser.NO)


                self.state = 244
                self.match(TeradataParser.LOG)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY(self):
            return self.getToken(TeradataParser.PRIMARY, 0)

        def INDEX(self):
            return self.getToken(TeradataParser.INDEX, 0)

        def identifierList(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierListContext,0)


        def UNIQUE(self):
            return self.getToken(TeradataParser.UNIQUE, 0)

        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_tableIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIndex" ):
                listener.enterTableIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIndex" ):
                listener.exitTableIndex(self)




    def tableIndex(self):

        localctx = TeradataParser.TableIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_tableIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.UNIQUE:
                self.state = 247
                self.match(TeradataParser.UNIQUE)


            self.state = 250
            self.match(TeradataParser.PRIMARY)
            self.state = 251
            self.match(TeradataParser.INDEX)
            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TeradataParser.SELECT) | (1 << TeradataParser.FROM) | (1 << TeradataParser.ADD) | (1 << TeradataParser.AS) | (1 << TeradataParser.ALL) | (1 << TeradataParser.DISTINCT) | (1 << TeradataParser.WHERE) | (1 << TeradataParser.GROUP) | (1 << TeradataParser.BY) | (1 << TeradataParser.GROUPING) | (1 << TeradataParser.SETS) | (1 << TeradataParser.CUBE) | (1 << TeradataParser.ROLLUP) | (1 << TeradataParser.ORDER) | (1 << TeradataParser.HAVING) | (1 << TeradataParser.LIMIT) | (1 << TeradataParser.AT) | (1 << TeradataParser.OR) | (1 << TeradataParser.AND) | (1 << TeradataParser.IN) | (1 << TeradataParser.NOT) | (1 << TeradataParser.NO) | (1 << TeradataParser.EXISTS) | (1 << TeradataParser.BETWEEN) | (1 << TeradataParser.LIKE) | (1 << TeradataParser.RLIKE) | (1 << TeradataParser.IS) | (1 << TeradataParser.NULL) | (1 << TeradataParser.TRUE) | (1 << TeradataParser.FALSE) | (1 << TeradataParser.NULLS) | (1 << TeradataParser.ASC) | (1 << TeradataParser.DESC) | (1 << TeradataParser.FOR) | (1 << TeradataParser.BYTEINT) | (1 << TeradataParser.SMALLINT) | (1 << TeradataParser.INT) | (1 << TeradataParser.INTEGER) | (1 << TeradataParser.BIGINT) | (1 << TeradataParser.DECIMAL) | (1 << TeradataParser.DEC) | (1 << TeradataParser.NUMERIC) | (1 << TeradataParser.NUMBER) | (1 << TeradataParser.FLOAT) | (1 << TeradataParser.REAL) | (1 << TeradataParser.DOUBLE_PRECISION) | (1 << TeradataParser.DATE) | (1 << TeradataParser.DATETIME) | (1 << TeradataParser.TIMESTAMP) | (1 << TeradataParser.CHAR) | (1 << TeradataParser.CHARACTER) | (1 << TeradataParser.VARCHAR) | (1 << TeradataParser.CHARACTER_VARYING) | (1 << TeradataParser.CHAR_VARYING) | (1 << TeradataParser.LONG_VARCHAR) | (1 << TeradataParser.INTERVAL) | (1 << TeradataParser.CASE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TeradataParser.WHEN - 64)) | (1 << (TeradataParser.THEN - 64)) | (1 << (TeradataParser.ELSE - 64)) | (1 << (TeradataParser.END - 64)) | (1 << (TeradataParser.JOIN - 64)) | (1 << (TeradataParser.CROSS - 64)) | (1 << (TeradataParser.OUTER - 64)) | (1 << (TeradataParser.INNER - 64)) | (1 << (TeradataParser.LEFT - 64)) | (1 << (TeradataParser.SEMI - 64)) | (1 << (TeradataParser.RIGHT - 64)) | (1 << (TeradataParser.FULL - 64)) | (1 << (TeradataParser.NATURAL - 64)) | (1 << (TeradataParser.ON - 64)) | (1 << (TeradataParser.LATERAL - 64)) | (1 << (TeradataParser.WINDOW - 64)) | (1 << (TeradataParser.OVER - 64)) | (1 << (TeradataParser.PARTITION - 64)) | (1 << (TeradataParser.RANGE - 64)) | (1 << (TeradataParser.PRESERVE - 64)) | (1 << (TeradataParser.ROWS - 64)) | (1 << (TeradataParser.UNBOUNDED - 64)) | (1 << (TeradataParser.PRECEDING - 64)) | (1 << (TeradataParser.FOLLOWING - 64)) | (1 << (TeradataParser.CURRENT - 64)) | (1 << (TeradataParser.FIRST - 64)) | (1 << (TeradataParser.LAST - 64)) | (1 << (TeradataParser.ROW - 64)) | (1 << (TeradataParser.WITH - 64)) | (1 << (TeradataParser.VALUES - 64)) | (1 << (TeradataParser.CREATE - 64)) | (1 << (TeradataParser.TABLE - 64)) | (1 << (TeradataParser.VIEW - 64)) | (1 << (TeradataParser.REPLACE - 64)) | (1 << (TeradataParser.INSERT - 64)) | (1 << (TeradataParser.UPDATE - 64)) | (1 << (TeradataParser.DELETE - 64)) | (1 << (TeradataParser.INTO - 64)) | (1 << (TeradataParser.DESCRIBE - 64)) | (1 << (TeradataParser.EXPLAIN - 64)) | (1 << (TeradataParser.FORMAT - 64)) | (1 << (TeradataParser.LOGICAL - 64)) | (1 << (TeradataParser.CODEGEN - 64)) | (1 << (TeradataParser.CAST - 64)) | (1 << (TeradataParser.SHOW - 64)) | (1 << (TeradataParser.TABLES - 64)) | (1 << (TeradataParser.COLUMNS - 64)) | (1 << (TeradataParser.COLUMN - 64)) | (1 << (TeradataParser.USE - 64)) | (1 << (TeradataParser.PARTITIONS - 64)) | (1 << (TeradataParser.FUNCTIONS - 64)) | (1 << (TeradataParser.DROP - 64)) | (1 << (TeradataParser.UNION - 64)) | (1 << (TeradataParser.EXCEPT - 64)) | (1 << (TeradataParser.SETMINUS - 64)) | (1 << (TeradataParser.INTERSECT - 64)) | (1 << (TeradataParser.TO - 64)) | (1 << (TeradataParser.TABLESAMPLE - 64)) | (1 << (TeradataParser.STRATIFY - 64)) | (1 << (TeradataParser.ALTER - 64)) | (1 << (TeradataParser.RENAME - 64)) | (1 << (TeradataParser.ARRAY - 64)) | (1 << (TeradataParser.MAP - 64)) | (1 << (TeradataParser.STRUCT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (TeradataParser.COMMENT - 128)) | (1 << (TeradataParser.MULTISET - 128)) | (1 << (TeradataParser.SET - 128)) | (1 << (TeradataParser.RESET - 128)) | (1 << (TeradataParser.DATA - 128)) | (1 << (TeradataParser.START - 128)) | (1 << (TeradataParser.TRANSACTION - 128)) | (1 << (TeradataParser.COMMIT - 128)) | (1 << (TeradataParser.ROLLBACK - 128)) | (1 << (TeradataParser.MACRO - 128)) | (1 << (TeradataParser.IF - 128)) | (1 << (TeradataParser.PERCENTLIT - 128)) | (1 << (TeradataParser.BUCKET - 128)) | (1 << (TeradataParser.OUT - 128)) | (1 << (TeradataParser.OF - 128)) | (1 << (TeradataParser.SORT - 128)) | (1 << (TeradataParser.CLUSTER - 128)) | (1 << (TeradataParser.DISTRIBUTE - 128)) | (1 << (TeradataParser.OVERWRITE - 128)) | (1 << (TeradataParser.TRANSFORM - 128)) | (1 << (TeradataParser.REDUCE - 128)) | (1 << (TeradataParser.USING - 128)) | (1 << (TeradataParser.SERDE - 128)) | (1 << (TeradataParser.SERDEPROPERTIES - 128)) | (1 << (TeradataParser.RECORDREADER - 128)) | (1 << (TeradataParser.RECORDWRITER - 128)) | (1 << (TeradataParser.DELIMITED - 128)) | (1 << (TeradataParser.FIELDS - 128)) | (1 << (TeradataParser.TERMINATED - 128)) | (1 << (TeradataParser.COLLECTION - 128)) | (1 << (TeradataParser.ITEMS - 128)) | (1 << (TeradataParser.KEYS - 128)) | (1 << (TeradataParser.ESCAPED - 128)) | (1 << (TeradataParser.LINES - 128)) | (1 << (TeradataParser.SEPARATED - 128)) | (1 << (TeradataParser.FUNCTION - 128)) | (1 << (TeradataParser.EXTENDED - 128)) | (1 << (TeradataParser.REFRESH - 128)) | (1 << (TeradataParser.CLEAR - 128)) | (1 << (TeradataParser.CACHE - 128)) | (1 << (TeradataParser.UNCACHE - 128)) | (1 << (TeradataParser.LAZY - 128)) | (1 << (TeradataParser.FORMATTED - 128)) | (1 << (TeradataParser.TEMPORARY - 128)) | (1 << (TeradataParser.GLOBAL - 128)) | (1 << (TeradataParser.VOLATILE - 128)) | (1 << (TeradataParser.OPTIONS - 128)) | (1 << (TeradataParser.UNSET - 128)) | (1 << (TeradataParser.TBLPROPERTIES - 128)) | (1 << (TeradataParser.DBPROPERTIES - 128)) | (1 << (TeradataParser.BUCKETS - 128)) | (1 << (TeradataParser.SKEWED - 128)) | (1 << (TeradataParser.STORED - 128)) | (1 << (TeradataParser.DIRECTORIES - 128)) | (1 << (TeradataParser.LOCATION - 128)) | (1 << (TeradataParser.EXCHANGE - 128)) | (1 << (TeradataParser.ARCHIVE - 128)) | (1 << (TeradataParser.UNARCHIVE - 128)) | (1 << (TeradataParser.FILEFORMAT - 128)) | (1 << (TeradataParser.TOUCH - 128)) | (1 << (TeradataParser.COMPACT - 128)) | (1 << (TeradataParser.CONCATENATE - 128)) | (1 << (TeradataParser.CHANGE - 128)) | (1 << (TeradataParser.CASCADE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (TeradataParser.RESTRICT - 192)) | (1 << (TeradataParser.CLUSTERED - 192)) | (1 << (TeradataParser.SORTED - 192)) | (1 << (TeradataParser.PURGE - 192)) | (1 << (TeradataParser.INPUTFORMAT - 192)) | (1 << (TeradataParser.OUTPUTFORMAT - 192)) | (1 << (TeradataParser.DATABASE - 192)) | (1 << (TeradataParser.DATABASES - 192)) | (1 << (TeradataParser.DFS - 192)) | (1 << (TeradataParser.TRUNCATE - 192)) | (1 << (TeradataParser.ANALYZE - 192)) | (1 << (TeradataParser.COMPUTE - 192)) | (1 << (TeradataParser.LIST - 192)) | (1 << (TeradataParser.STATISTICS - 192)) | (1 << (TeradataParser.PARTITIONED - 192)) | (1 << (TeradataParser.EXTERNAL - 192)) | (1 << (TeradataParser.DEFINED - 192)) | (1 << (TeradataParser.REVOKE - 192)) | (1 << (TeradataParser.GRANT - 192)) | (1 << (TeradataParser.LOCK - 192)) | (1 << (TeradataParser.UNLOCK - 192)) | (1 << (TeradataParser.MSCK - 192)) | (1 << (TeradataParser.REPAIR - 192)) | (1 << (TeradataParser.RECOVER - 192)) | (1 << (TeradataParser.EXPORT - 192)) | (1 << (TeradataParser.IMPORT - 192)) | (1 << (TeradataParser.LOAD - 192)) | (1 << (TeradataParser.ROLE - 192)) | (1 << (TeradataParser.ROLES - 192)) | (1 << (TeradataParser.COMPACTIONS - 192)) | (1 << (TeradataParser.PRINCIPALS - 192)) | (1 << (TeradataParser.TRANSACTIONS - 192)) | (1 << (TeradataParser.INDEX - 192)) | (1 << (TeradataParser.INDEXES - 192)) | (1 << (TeradataParser.UNIQUE - 192)) | (1 << (TeradataParser.PRIMARY - 192)) | (1 << (TeradataParser.LOCKS - 192)) | (1 << (TeradataParser.OPTION - 192)) | (1 << (TeradataParser.ANTI - 192)) | (1 << (TeradataParser.LOCAL - 192)) | (1 << (TeradataParser.INPATH - 192)) | (1 << (TeradataParser.CURRENT_DATE - 192)) | (1 << (TeradataParser.CURRENT_TIMESTAMP - 192)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (TeradataParser.DOLLAR - 258)) | (1 << (TeradataParser.DIV - 258)) | (1 << (TeradataParser.IDENTIFIER - 258)) | (1 << (TeradataParser.BACKQUOTED_IDENTIFIER - 258)))) != 0):
                self.state = 252
                self.identifier()


            self.state = 255
            self.identifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryNoWith(self):
            return self.getTypedRuleContext(TeradataParser.QueryNoWithContext,0)


        def ctes(self):
            return self.getTypedRuleContext(TeradataParser.CtesContext,0)


        def transactions(self):
            return self.getTypedRuleContext(TeradataParser.TransactionsContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = TeradataParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_query)
        try:
            self.state = 262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 258
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 257
                    self.ctes()


                self.state = 260
                self.queryNoWith()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 261
                self.transactions()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BT(self):
            return self.getToken(TeradataParser.BT, 0)

        def BEGIN(self):
            return self.getToken(TeradataParser.BEGIN, 0)

        def TRANSACTION(self):
            return self.getToken(TeradataParser.TRANSACTION, 0)

        def ET(self):
            return self.getToken(TeradataParser.ET, 0)

        def END(self):
            return self.getToken(TeradataParser.END, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_transactions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactions" ):
                listener.enterTransactions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactions" ):
                listener.exitTransactions(self)




    def transactions(self):

        localctx = TeradataParser.TransactionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_transactions)
        try:
            self.state = 270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TeradataParser.BT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 264
                self.match(TeradataParser.BT)
                pass
            elif token in [TeradataParser.BEGIN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 265
                self.match(TeradataParser.BEGIN)
                self.state = 266
                self.match(TeradataParser.TRANSACTION)
                pass
            elif token in [TeradataParser.ET]:
                self.enterOuterAlt(localctx, 3)
                self.state = 267
                self.match(TeradataParser.ET)
                pass
            elif token in [TeradataParser.END]:
                self.enterOuterAlt(localctx, 4)
                self.state = 268
                self.match(TeradataParser.END)
                self.state = 269
                self.match(TeradataParser.TRANSACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertIntoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(TeradataParser.INSERT, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(TeradataParser.TableIdentifierContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(TeradataParser.QueryOrganizationContext,0)


        def valuesExpression(self):
            return self.getTypedRuleContext(TeradataParser.ValuesExpressionContext,0)


        def queryTerm(self):
            return self.getTypedRuleContext(TeradataParser.QueryTermContext,0)


        def INTO(self):
            return self.getToken(TeradataParser.INTO, 0)

        def identifierList(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_insertInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertInto" ):
                listener.enterInsertInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertInto" ):
                listener.exitInsertInto(self)




    def insertInto(self):

        localctx = TeradataParser.InsertIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_insertInto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.match(TeradataParser.INSERT)
            self.state = 274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 273
                self.match(TeradataParser.INTO)


            self.state = 276
            self.tableIdentifier()
            self.state = 278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 277
                self.identifierList()


            self.state = 282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 280
                self.valuesExpression()
                pass

            elif la_ == 2:
                self.state = 281
                self.queryTerm(0)
                pass


            self.state = 284
            self.queryOrganization()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.left = None # RelationPrimaryContext

        def UPDATE(self):
            return self.getToken(TeradataParser.UPDATE, 0)

        def SET(self):
            return self.getToken(TeradataParser.SET, 0)

        def updateSetExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.UpdateSetExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.UpdateSetExpressionContext,i)


        def relationPrimary(self):
            return self.getTypedRuleContext(TeradataParser.RelationPrimaryContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(TeradataParser.FromClauseContext,0)


        def updateCondition(self):
            return self.getTypedRuleContext(TeradataParser.UpdateConditionContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_update

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate" ):
                listener.enterUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate" ):
                listener.exitUpdate(self)




    def update(self):

        localctx = TeradataParser.UpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_update)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.match(TeradataParser.UPDATE)
            self.state = 287
            localctx.left = self.relationPrimary()
            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.FROM:
                self.state = 288
                self.fromClause()


            self.state = 291
            self.match(TeradataParser.SET)
            self.state = 292
            self.updateSetExpression()
            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TeradataParser.T__0:
                self.state = 293
                self.match(TeradataParser.T__0)
                self.state = 294
                self.updateSetExpression()
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.WHERE:
                self.state = 300
                self.updateCondition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateSetExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(TeradataParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(TeradataParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_updateSetExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateSetExpression" ):
                listener.enterUpdateSetExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateSetExpression" ):
                listener.exitUpdateSetExpression(self)




    def updateSetExpression(self):

        localctx = TeradataParser.UpdateSetExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_updateSetExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.identifier()
            self.state = 304
            self.match(TeradataParser.EQ)
            self.state = 305
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whereClause(self):
            return self.getTypedRuleContext(TeradataParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_updateCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateCondition" ):
                listener.enterUpdateCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateCondition" ):
                listener.exitUpdateCondition(self)




    def updateCondition(self):

        localctx = TeradataParser.UpdateConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_updateCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self.whereClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.right = None # RelationPrimaryContext

        def DELETE(self):
            return self.getToken(TeradataParser.DELETE, 0)

        def FROM(self):
            return self.getToken(TeradataParser.FROM, 0)

        def relationPrimary(self):
            return self.getTypedRuleContext(TeradataParser.RelationPrimaryContext,0)


        def deleteCondition(self):
            return self.getTypedRuleContext(TeradataParser.DeleteConditionContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete" ):
                listener.enterDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete" ):
                listener.exitDelete(self)




    def delete(self):

        localctx = TeradataParser.DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.match(TeradataParser.DELETE)
            self.state = 310
            self.match(TeradataParser.FROM)
            self.state = 311
            localctx.right = self.relationPrimary()
            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.WHERE:
                self.state = 312
                self.deleteCondition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whereClause(self):
            return self.getTypedRuleContext(TeradataParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_deleteCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteCondition" ):
                listener.enterDeleteCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteCondition" ):
                listener.exitDeleteCondition(self)




    def deleteCondition(self):

        localctx = TeradataParser.DeleteConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_deleteCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.whereClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataParser.DROP, 0)

        def TABLE(self):
            return self.getToken(TeradataParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(TeradataParser.TableIdentifierContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_dropTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)




    def dropTable(self):

        localctx = TeradataParser.DropTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_dropTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(TeradataParser.DROP)
            self.state = 318
            self.match(TeradataParser.TABLE)
            self.state = 319
            self.tableIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(TeradataParser.NamedQueryContext,i)


        def getRuleIndex(self):
            return TeradataParser.RULE_ctes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtes" ):
                listener.enterCtes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtes" ):
                listener.exitCtes(self)




    def ctes(self):

        localctx = TeradataParser.CtesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_ctes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self.match(TeradataParser.WITH)
            self.state = 322
            self.namedQuery()
            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TeradataParser.T__0:
                self.state = 323
                self.match(TeradataParser.T__0)
                self.state = 324
                self.namedQuery()
                self.state = 329
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def query(self):
            return self.getTypedRuleContext(TeradataParser.QueryContext,0)


        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(TeradataParser.AS, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)




    def namedQuery(self):

        localctx = TeradataParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            localctx.name = self.identifier()
            self.state = 332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.AS:
                self.state = 331
                self.match(TeradataParser.AS)


            self.state = 334
            self.match(TeradataParser.T__1)
            self.state = 335
            self.query()
            self.state = 336
            self.match(TeradataParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableProviderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataParser.USING, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(TeradataParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_tableProvider

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProvider" ):
                listener.enterTableProvider(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProvider" ):
                listener.exitTableProvider(self)




    def tableProvider(self):

        localctx = TeradataParser.TableProviderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_tableProvider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.match(TeradataParser.USING)
            self.state = 339
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryNoWithContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryTerm(self):
            return self.getTypedRuleContext(TeradataParser.QueryTermContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(TeradataParser.QueryOrganizationContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_queryNoWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryNoWith" ):
                listener.enterQueryNoWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryNoWith" ):
                listener.exitQueryNoWith(self)




    def queryNoWith(self):

        localctx = TeradataParser.QueryNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_queryNoWith)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.queryTerm(0)
            self.state = 342
            self.queryOrganization()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOrganizationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._sortItem = None # SortItemContext
            self.order = list() # of SortItemContexts
            self._expression = None # ExpressionContext
            self.clusterBy = list() # of ExpressionContexts
            self.distributeBy = list() # of ExpressionContexts
            self.sort = list() # of SortItemContexts
            self.limit = None # ExpressionContext

        def ORDER(self):
            return self.getToken(TeradataParser.ORDER, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataParser.BY)
            else:
                return self.getToken(TeradataParser.BY, i)

        def CLUSTER(self):
            return self.getToken(TeradataParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(TeradataParser.DISTRIBUTE, 0)

        def SORT(self):
            return self.getToken(TeradataParser.SORT, 0)

        def windows(self):
            return self.getTypedRuleContext(TeradataParser.WindowsContext,0)


        def LIMIT(self):
            return self.getToken(TeradataParser.LIMIT, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.SortItemContext)
            else:
                return self.getTypedRuleContext(TeradataParser.SortItemContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ExpressionContext,i)


        def getRuleIndex(self):
            return TeradataParser.RULE_queryOrganization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryOrganization" ):
                listener.enterQueryOrganization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryOrganization" ):
                listener.exitQueryOrganization(self)




    def queryOrganization(self):

        localctx = TeradataParser.QueryOrganizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_queryOrganization)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.ORDER:
                self.state = 344
                self.match(TeradataParser.ORDER)
                self.state = 345
                self.match(TeradataParser.BY)
                self.state = 346
                localctx._sortItem = self.sortItem()
                localctx.order.append(localctx._sortItem)
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TeradataParser.T__0:
                    self.state = 347
                    self.match(TeradataParser.T__0)
                    self.state = 348
                    localctx._sortItem = self.sortItem()
                    localctx.order.append(localctx._sortItem)
                    self.state = 353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.CLUSTER:
                self.state = 356
                self.match(TeradataParser.CLUSTER)
                self.state = 357
                self.match(TeradataParser.BY)
                self.state = 358
                localctx._expression = self.expression()
                localctx.clusterBy.append(localctx._expression)
                self.state = 363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TeradataParser.T__0:
                    self.state = 359
                    self.match(TeradataParser.T__0)
                    self.state = 360
                    localctx._expression = self.expression()
                    localctx.clusterBy.append(localctx._expression)
                    self.state = 365
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.DISTRIBUTE:
                self.state = 368
                self.match(TeradataParser.DISTRIBUTE)
                self.state = 369
                self.match(TeradataParser.BY)
                self.state = 370
                localctx._expression = self.expression()
                localctx.distributeBy.append(localctx._expression)
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TeradataParser.T__0:
                    self.state = 371
                    self.match(TeradataParser.T__0)
                    self.state = 372
                    localctx._expression = self.expression()
                    localctx.distributeBy.append(localctx._expression)
                    self.state = 377
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.SORT:
                self.state = 380
                self.match(TeradataParser.SORT)
                self.state = 381
                self.match(TeradataParser.BY)
                self.state = 382
                localctx._sortItem = self.sortItem()
                localctx.sort.append(localctx._sortItem)
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TeradataParser.T__0:
                    self.state = 383
                    self.match(TeradataParser.T__0)
                    self.state = 384
                    localctx._sortItem = self.sortItem()
                    localctx.sort.append(localctx._sortItem)
                    self.state = 389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.WINDOW:
                self.state = 392
                self.windows()


            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.LIMIT:
                self.state = 395
                self.match(TeradataParser.LIMIT)
                self.state = 396
                localctx.limit = self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(TeradataParser.QueryPrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(TeradataParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(TeradataParser.INTERSECT, 0)
        def UNION(self):
            return self.getToken(TeradataParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(TeradataParser.EXCEPT, 0)
        def SETMINUS(self):
            return self.getToken(TeradataParser.SETMINUS, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(TeradataParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = TeradataParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 400
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 410
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TeradataParser.SetOperationContext(self, TeradataParser.QueryTermContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                    self.state = 402
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 403
                    localctx.operator = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & ((1 << (TeradataParser.UNION - 116)) | (1 << (TeradataParser.EXCEPT - 116)) | (1 << (TeradataParser.SETMINUS - 116)) | (1 << (TeradataParser.INTERSECT - 116)))) != 0)):
                        localctx.operator = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 405
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                    if la_ == 1:
                        self.state = 404
                        self.setQuantifier()


                    self.state = 407
                    localctx.right = self.queryTerm(2) 
                self.state = 412
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryNoWith(self):
            return self.getTypedRuleContext(TeradataParser.QueryNoWithContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)


    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(TeradataParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)


    class InlineTableDefault1Context(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(TeradataParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault1" ):
                listener.enterInlineTableDefault1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault1" ):
                listener.exitInlineTableDefault1(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(TeradataParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(TeradataParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)



    def queryPrimary(self):

        localctx = TeradataParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_queryPrimary)
        try:
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                localctx = TeradataParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 413
                self.querySpecification()
                pass

            elif la_ == 2:
                localctx = TeradataParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 414
                self.match(TeradataParser.TABLE)
                self.state = 415
                self.tableIdentifier()
                pass

            elif la_ == 3:
                localctx = TeradataParser.InlineTableDefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 416
                self.inlineTable()
                pass

            elif la_ == 4:
                localctx = TeradataParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 417
                self.match(TeradataParser.T__1)
                self.state = 418
                self.queryNoWith()
                self.state = 419
                self.match(TeradataParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrder = None # Token

        def expression(self):
            return self.getTypedRuleContext(TeradataParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(TeradataParser.NULLS, 0)

        def ASC(self):
            return self.getToken(TeradataParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataParser.DESC, 0)

        def LAST(self):
            return self.getToken(TeradataParser.LAST, 0)

        def FIRST(self):
            return self.getToken(TeradataParser.FIRST, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)




    def sortItem(self):

        localctx = TeradataParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self.expression()
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.ASC or _la==TeradataParser.DESC:
                self.state = 424
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==TeradataParser.ASC or _la==TeradataParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.NULLS:
                self.state = 427
                self.match(TeradataParser.NULLS)
                self.state = 428
                localctx.nullOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==TeradataParser.FIRST or _la==TeradataParser.LAST):
                    localctx.nullOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(TeradataParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(TeradataParser.NamedExpressionSeqContext,0)


        def setQuantifier(self):
            return self.getTypedRuleContext(TeradataParser.SetQuantifierContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(TeradataParser.FromClauseContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(TeradataParser.LateralViewContext,i)


        def whereClause(self):
            return self.getTypedRuleContext(TeradataParser.WhereClauseContext,0)


        def aggregation(self):
            return self.getTypedRuleContext(TeradataParser.AggregationContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(TeradataParser.HavingClauseContext,0)


        def qualifyClause(self):
            return self.getTypedRuleContext(TeradataParser.QualifyClauseContext,0)


        def windows(self):
            return self.getTypedRuleContext(TeradataParser.WindowsContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)




    def querySpecification(self):

        localctx = TeradataParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_querySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.match(TeradataParser.SELECT)
            self.state = 433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 432
                self.setQuantifier()


            self.state = 435
            self.namedExpressionSeq()
            self.state = 437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 436
                self.fromClause()


            self.state = 442
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 439
                    self.lateralView() 
                self.state = 444
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

            self.state = 446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 445
                self.whereClause()


            self.state = 449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 448
                self.aggregation()


            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 451
                self.havingClause()


            self.state = 455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 454
                self.qualifyClause()


            self.state = 458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 457
                self.windows()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(TeradataParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.RelationContext)
            else:
                return self.getTypedRuleContext(TeradataParser.RelationContext,i)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(TeradataParser.LateralViewContext,i)


        def getRuleIndex(self):
            return TeradataParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = TeradataParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.match(TeradataParser.FROM)
            self.state = 461
            self.relation()
            self.state = 466
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 462
                    self.match(TeradataParser.T__0)
                    self.state = 463
                    self.relation() 
                self.state = 468
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

            self.state = 472
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 469
                    self.lateralView() 
                self.state = 474
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(TeradataParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(TeradataParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)




    def whereClause(self):

        localctx = TeradataParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(TeradataParser.WHERE)
            self.state = 476
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(TeradataParser.HAVING, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(TeradataParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)




    def havingClause(self):

        localctx = TeradataParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(TeradataParser.HAVING)
            self.state = 479
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifyClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUALIFY(self):
            return self.getToken(TeradataParser.QUALIFY, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(TeradataParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_qualifyClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifyClause" ):
                listener.enterQualifyClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifyClause" ):
                listener.exitQualifyClause(self)




    def qualifyClause(self):

        localctx = TeradataParser.QualifyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_qualifyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.match(TeradataParser.QUALIFY)
            self.state = 482
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.groupingExpressions = list() # of ExpressionContexts
            self.kind = None # Token

        def GROUP(self):
            return self.getToken(TeradataParser.GROUP, 0)

        def BY(self):
            return self.getToken(TeradataParser.BY, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(TeradataParser.WITH, 0)

        def SETS(self):
            return self.getToken(TeradataParser.SETS, 0)

        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(TeradataParser.GroupingSetContext,i)


        def ROLLUP(self):
            return self.getToken(TeradataParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(TeradataParser.CUBE, 0)

        def GROUPING(self):
            return self.getToken(TeradataParser.GROUPING, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_aggregation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregation" ):
                listener.enterAggregation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregation" ):
                listener.exitAggregation(self)




    def aggregation(self):

        localctx = TeradataParser.AggregationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_aggregation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.match(TeradataParser.GROUP)
            self.state = 485
            self.match(TeradataParser.BY)
            self.state = 486
            localctx._expression = self.expression()
            localctx.groupingExpressions.append(localctx._expression)
            self.state = 491
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 487
                    self.match(TeradataParser.T__0)
                    self.state = 488
                    localctx._expression = self.expression()
                    localctx.groupingExpressions.append(localctx._expression) 
                self.state = 493
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

            self.state = 511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 494
                self.match(TeradataParser.WITH)
                self.state = 495
                localctx.kind = self.match(TeradataParser.ROLLUP)

            elif la_ == 2:
                self.state = 496
                self.match(TeradataParser.WITH)
                self.state = 497
                localctx.kind = self.match(TeradataParser.CUBE)

            elif la_ == 3:
                self.state = 498
                localctx.kind = self.match(TeradataParser.GROUPING)
                self.state = 499
                self.match(TeradataParser.SETS)
                self.state = 500
                self.match(TeradataParser.T__1)
                self.state = 501
                self.groupingSet()
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TeradataParser.T__0:
                    self.state = 502
                    self.match(TeradataParser.T__0)
                    self.state = 503
                    self.groupingSet()
                    self.state = 508
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 509
                self.match(TeradataParser.T__2)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ExpressionContext,i)


        def getRuleIndex(self):
            return TeradataParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)




    def groupingSet(self):

        localctx = TeradataParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 513
                self.match(TeradataParser.T__1)
                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TeradataParser.T__1) | (1 << TeradataParser.SELECT) | (1 << TeradataParser.FROM) | (1 << TeradataParser.ADD) | (1 << TeradataParser.AS) | (1 << TeradataParser.ALL) | (1 << TeradataParser.DISTINCT) | (1 << TeradataParser.WHERE) | (1 << TeradataParser.GROUP) | (1 << TeradataParser.BY) | (1 << TeradataParser.GROUPING) | (1 << TeradataParser.SETS) | (1 << TeradataParser.CUBE) | (1 << TeradataParser.ROLLUP) | (1 << TeradataParser.ORDER) | (1 << TeradataParser.HAVING) | (1 << TeradataParser.LIMIT) | (1 << TeradataParser.AT) | (1 << TeradataParser.OR) | (1 << TeradataParser.AND) | (1 << TeradataParser.IN) | (1 << TeradataParser.NOT) | (1 << TeradataParser.NO) | (1 << TeradataParser.EXISTS) | (1 << TeradataParser.BETWEEN) | (1 << TeradataParser.LIKE) | (1 << TeradataParser.RLIKE) | (1 << TeradataParser.IS) | (1 << TeradataParser.NULL) | (1 << TeradataParser.TRUE) | (1 << TeradataParser.FALSE) | (1 << TeradataParser.NULLS) | (1 << TeradataParser.ASC) | (1 << TeradataParser.DESC) | (1 << TeradataParser.FOR) | (1 << TeradataParser.BYTEINT) | (1 << TeradataParser.SMALLINT) | (1 << TeradataParser.INT) | (1 << TeradataParser.INTEGER) | (1 << TeradataParser.BIGINT) | (1 << TeradataParser.DECIMAL) | (1 << TeradataParser.DEC) | (1 << TeradataParser.NUMERIC) | (1 << TeradataParser.NUMBER) | (1 << TeradataParser.FLOAT) | (1 << TeradataParser.REAL) | (1 << TeradataParser.DOUBLE_PRECISION) | (1 << TeradataParser.DATE) | (1 << TeradataParser.DATETIME) | (1 << TeradataParser.TIMESTAMP) | (1 << TeradataParser.CHAR) | (1 << TeradataParser.CHARACTER) | (1 << TeradataParser.VARCHAR) | (1 << TeradataParser.CHARACTER_VARYING) | (1 << TeradataParser.CHAR_VARYING) | (1 << TeradataParser.LONG_VARCHAR) | (1 << TeradataParser.INTERVAL) | (1 << TeradataParser.CASE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TeradataParser.WHEN - 64)) | (1 << (TeradataParser.THEN - 64)) | (1 << (TeradataParser.ELSE - 64)) | (1 << (TeradataParser.END - 64)) | (1 << (TeradataParser.JOIN - 64)) | (1 << (TeradataParser.CROSS - 64)) | (1 << (TeradataParser.OUTER - 64)) | (1 << (TeradataParser.INNER - 64)) | (1 << (TeradataParser.LEFT - 64)) | (1 << (TeradataParser.SEMI - 64)) | (1 << (TeradataParser.RIGHT - 64)) | (1 << (TeradataParser.FULL - 64)) | (1 << (TeradataParser.NATURAL - 64)) | (1 << (TeradataParser.ON - 64)) | (1 << (TeradataParser.LATERAL - 64)) | (1 << (TeradataParser.WINDOW - 64)) | (1 << (TeradataParser.OVER - 64)) | (1 << (TeradataParser.PARTITION - 64)) | (1 << (TeradataParser.RANGE - 64)) | (1 << (TeradataParser.PRESERVE - 64)) | (1 << (TeradataParser.ROWS - 64)) | (1 << (TeradataParser.UNBOUNDED - 64)) | (1 << (TeradataParser.PRECEDING - 64)) | (1 << (TeradataParser.FOLLOWING - 64)) | (1 << (TeradataParser.CURRENT - 64)) | (1 << (TeradataParser.FIRST - 64)) | (1 << (TeradataParser.LAST - 64)) | (1 << (TeradataParser.ROW - 64)) | (1 << (TeradataParser.WITH - 64)) | (1 << (TeradataParser.VALUES - 64)) | (1 << (TeradataParser.CREATE - 64)) | (1 << (TeradataParser.TABLE - 64)) | (1 << (TeradataParser.VIEW - 64)) | (1 << (TeradataParser.REPLACE - 64)) | (1 << (TeradataParser.INSERT - 64)) | (1 << (TeradataParser.UPDATE - 64)) | (1 << (TeradataParser.DELETE - 64)) | (1 << (TeradataParser.INTO - 64)) | (1 << (TeradataParser.DESCRIBE - 64)) | (1 << (TeradataParser.EXPLAIN - 64)) | (1 << (TeradataParser.FORMAT - 64)) | (1 << (TeradataParser.LOGICAL - 64)) | (1 << (TeradataParser.CODEGEN - 64)) | (1 << (TeradataParser.CAST - 64)) | (1 << (TeradataParser.SHOW - 64)) | (1 << (TeradataParser.TABLES - 64)) | (1 << (TeradataParser.COLUMNS - 64)) | (1 << (TeradataParser.COLUMN - 64)) | (1 << (TeradataParser.USE - 64)) | (1 << (TeradataParser.PARTITIONS - 64)) | (1 << (TeradataParser.FUNCTIONS - 64)) | (1 << (TeradataParser.DROP - 64)) | (1 << (TeradataParser.UNION - 64)) | (1 << (TeradataParser.EXCEPT - 64)) | (1 << (TeradataParser.SETMINUS - 64)) | (1 << (TeradataParser.INTERSECT - 64)) | (1 << (TeradataParser.TO - 64)) | (1 << (TeradataParser.TABLESAMPLE - 64)) | (1 << (TeradataParser.STRATIFY - 64)) | (1 << (TeradataParser.ALTER - 64)) | (1 << (TeradataParser.RENAME - 64)) | (1 << (TeradataParser.ARRAY - 64)) | (1 << (TeradataParser.MAP - 64)) | (1 << (TeradataParser.STRUCT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (TeradataParser.COMMENT - 128)) | (1 << (TeradataParser.MULTISET - 128)) | (1 << (TeradataParser.SET - 128)) | (1 << (TeradataParser.RESET - 128)) | (1 << (TeradataParser.DATA - 128)) | (1 << (TeradataParser.START - 128)) | (1 << (TeradataParser.TRANSACTION - 128)) | (1 << (TeradataParser.COMMIT - 128)) | (1 << (TeradataParser.ROLLBACK - 128)) | (1 << (TeradataParser.MACRO - 128)) | (1 << (TeradataParser.IF - 128)) | (1 << (TeradataParser.PERCENTLIT - 128)) | (1 << (TeradataParser.BUCKET - 128)) | (1 << (TeradataParser.OUT - 128)) | (1 << (TeradataParser.OF - 128)) | (1 << (TeradataParser.SORT - 128)) | (1 << (TeradataParser.CLUSTER - 128)) | (1 << (TeradataParser.DISTRIBUTE - 128)) | (1 << (TeradataParser.OVERWRITE - 128)) | (1 << (TeradataParser.TRANSFORM - 128)) | (1 << (TeradataParser.REDUCE - 128)) | (1 << (TeradataParser.USING - 128)) | (1 << (TeradataParser.SERDE - 128)) | (1 << (TeradataParser.SERDEPROPERTIES - 128)) | (1 << (TeradataParser.RECORDREADER - 128)) | (1 << (TeradataParser.RECORDWRITER - 128)) | (1 << (TeradataParser.DELIMITED - 128)) | (1 << (TeradataParser.FIELDS - 128)) | (1 << (TeradataParser.TERMINATED - 128)) | (1 << (TeradataParser.COLLECTION - 128)) | (1 << (TeradataParser.ITEMS - 128)) | (1 << (TeradataParser.KEYS - 128)) | (1 << (TeradataParser.ESCAPED - 128)) | (1 << (TeradataParser.LINES - 128)) | (1 << (TeradataParser.SEPARATED - 128)) | (1 << (TeradataParser.FUNCTION - 128)) | (1 << (TeradataParser.EXTENDED - 128)) | (1 << (TeradataParser.REFRESH - 128)) | (1 << (TeradataParser.CLEAR - 128)) | (1 << (TeradataParser.CACHE - 128)) | (1 << (TeradataParser.UNCACHE - 128)) | (1 << (TeradataParser.LAZY - 128)) | (1 << (TeradataParser.FORMATTED - 128)) | (1 << (TeradataParser.TEMPORARY - 128)) | (1 << (TeradataParser.GLOBAL - 128)) | (1 << (TeradataParser.VOLATILE - 128)) | (1 << (TeradataParser.OPTIONS - 128)) | (1 << (TeradataParser.UNSET - 128)) | (1 << (TeradataParser.TBLPROPERTIES - 128)) | (1 << (TeradataParser.DBPROPERTIES - 128)) | (1 << (TeradataParser.BUCKETS - 128)) | (1 << (TeradataParser.SKEWED - 128)) | (1 << (TeradataParser.STORED - 128)) | (1 << (TeradataParser.DIRECTORIES - 128)) | (1 << (TeradataParser.LOCATION - 128)) | (1 << (TeradataParser.EXCHANGE - 128)) | (1 << (TeradataParser.ARCHIVE - 128)) | (1 << (TeradataParser.UNARCHIVE - 128)) | (1 << (TeradataParser.FILEFORMAT - 128)) | (1 << (TeradataParser.TOUCH - 128)) | (1 << (TeradataParser.COMPACT - 128)) | (1 << (TeradataParser.CONCATENATE - 128)) | (1 << (TeradataParser.CHANGE - 128)) | (1 << (TeradataParser.CASCADE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (TeradataParser.RESTRICT - 192)) | (1 << (TeradataParser.CLUSTERED - 192)) | (1 << (TeradataParser.SORTED - 192)) | (1 << (TeradataParser.PURGE - 192)) | (1 << (TeradataParser.INPUTFORMAT - 192)) | (1 << (TeradataParser.OUTPUTFORMAT - 192)) | (1 << (TeradataParser.DATABASE - 192)) | (1 << (TeradataParser.DATABASES - 192)) | (1 << (TeradataParser.DFS - 192)) | (1 << (TeradataParser.TRUNCATE - 192)) | (1 << (TeradataParser.ANALYZE - 192)) | (1 << (TeradataParser.COMPUTE - 192)) | (1 << (TeradataParser.LIST - 192)) | (1 << (TeradataParser.STATISTICS - 192)) | (1 << (TeradataParser.PARTITIONED - 192)) | (1 << (TeradataParser.EXTERNAL - 192)) | (1 << (TeradataParser.DEFINED - 192)) | (1 << (TeradataParser.REVOKE - 192)) | (1 << (TeradataParser.GRANT - 192)) | (1 << (TeradataParser.LOCK - 192)) | (1 << (TeradataParser.UNLOCK - 192)) | (1 << (TeradataParser.MSCK - 192)) | (1 << (TeradataParser.REPAIR - 192)) | (1 << (TeradataParser.RECOVER - 192)) | (1 << (TeradataParser.EXPORT - 192)) | (1 << (TeradataParser.IMPORT - 192)) | (1 << (TeradataParser.LOAD - 192)) | (1 << (TeradataParser.ROLE - 192)) | (1 << (TeradataParser.ROLES - 192)) | (1 << (TeradataParser.COMPACTIONS - 192)) | (1 << (TeradataParser.PRINCIPALS - 192)) | (1 << (TeradataParser.TRANSACTIONS - 192)) | (1 << (TeradataParser.INDEX - 192)) | (1 << (TeradataParser.INDEXES - 192)) | (1 << (TeradataParser.UNIQUE - 192)) | (1 << (TeradataParser.PRIMARY - 192)) | (1 << (TeradataParser.LOCKS - 192)) | (1 << (TeradataParser.OPTION - 192)) | (1 << (TeradataParser.ANTI - 192)) | (1 << (TeradataParser.LOCAL - 192)) | (1 << (TeradataParser.INPATH - 192)) | (1 << (TeradataParser.CURRENT_DATE - 192)) | (1 << (TeradataParser.CURRENT_TIMESTAMP - 192)) | (1 << (TeradataParser.SUBSTRING - 192)) | (1 << (TeradataParser.TRIM - 192)) | (1 << (TeradataParser.POSITION - 192)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (TeradataParser.DOLLAR - 258)) | (1 << (TeradataParser.REFERENCE - 258)) | (1 << (TeradataParser.PLUS - 258)) | (1 << (TeradataParser.MINUS - 258)) | (1 << (TeradataParser.ASTERISK - 258)) | (1 << (TeradataParser.DIV - 258)) | (1 << (TeradataParser.TILDE - 258)) | (1 << (TeradataParser.STRING - 258)) | (1 << (TeradataParser.BIGINT_LITERAL - 258)) | (1 << (TeradataParser.SMALLINT_LITERAL - 258)) | (1 << (TeradataParser.TINYINT_LITERAL - 258)) | (1 << (TeradataParser.INTEGER_VALUE - 258)) | (1 << (TeradataParser.DECIMAL_VALUE - 258)) | (1 << (TeradataParser.SCIENTIFIC_DECIMAL_VALUE - 258)) | (1 << (TeradataParser.DOUBLE_LITERAL - 258)) | (1 << (TeradataParser.BIGDECIMAL_LITERAL - 258)) | (1 << (TeradataParser.IDENTIFIER - 258)) | (1 << (TeradataParser.BACKQUOTED_IDENTIFIER - 258)))) != 0):
                    self.state = 514
                    self.expression()
                    self.state = 519
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==TeradataParser.T__0:
                        self.state = 515
                        self.match(TeradataParser.T__0)
                        self.state = 516
                        self.expression()
                        self.state = 521
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 524
                self.match(TeradataParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 525
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tblName = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.colName = list() # of IdentifierContexts

        def LATERAL(self):
            return self.getToken(TeradataParser.LATERAL, 0)

        def VIEW(self):
            return self.getToken(TeradataParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(TeradataParser.QualifiedNameContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TeradataParser.IdentifierContext,i)


        def OUTER(self):
            return self.getToken(TeradataParser.OUTER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ExpressionContext,i)


        def AS(self):
            return self.getToken(TeradataParser.AS, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_lateralView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateralView" ):
                listener.enterLateralView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateralView" ):
                listener.exitLateralView(self)




    def lateralView(self):

        localctx = TeradataParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_lateralView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(TeradataParser.LATERAL)
            self.state = 529
            self.match(TeradataParser.VIEW)
            self.state = 531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 530
                self.match(TeradataParser.OUTER)


            self.state = 533
            self.qualifiedName()
            self.state = 534
            self.match(TeradataParser.T__1)
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TeradataParser.T__1) | (1 << TeradataParser.SELECT) | (1 << TeradataParser.FROM) | (1 << TeradataParser.ADD) | (1 << TeradataParser.AS) | (1 << TeradataParser.ALL) | (1 << TeradataParser.DISTINCT) | (1 << TeradataParser.WHERE) | (1 << TeradataParser.GROUP) | (1 << TeradataParser.BY) | (1 << TeradataParser.GROUPING) | (1 << TeradataParser.SETS) | (1 << TeradataParser.CUBE) | (1 << TeradataParser.ROLLUP) | (1 << TeradataParser.ORDER) | (1 << TeradataParser.HAVING) | (1 << TeradataParser.LIMIT) | (1 << TeradataParser.AT) | (1 << TeradataParser.OR) | (1 << TeradataParser.AND) | (1 << TeradataParser.IN) | (1 << TeradataParser.NOT) | (1 << TeradataParser.NO) | (1 << TeradataParser.EXISTS) | (1 << TeradataParser.BETWEEN) | (1 << TeradataParser.LIKE) | (1 << TeradataParser.RLIKE) | (1 << TeradataParser.IS) | (1 << TeradataParser.NULL) | (1 << TeradataParser.TRUE) | (1 << TeradataParser.FALSE) | (1 << TeradataParser.NULLS) | (1 << TeradataParser.ASC) | (1 << TeradataParser.DESC) | (1 << TeradataParser.FOR) | (1 << TeradataParser.BYTEINT) | (1 << TeradataParser.SMALLINT) | (1 << TeradataParser.INT) | (1 << TeradataParser.INTEGER) | (1 << TeradataParser.BIGINT) | (1 << TeradataParser.DECIMAL) | (1 << TeradataParser.DEC) | (1 << TeradataParser.NUMERIC) | (1 << TeradataParser.NUMBER) | (1 << TeradataParser.FLOAT) | (1 << TeradataParser.REAL) | (1 << TeradataParser.DOUBLE_PRECISION) | (1 << TeradataParser.DATE) | (1 << TeradataParser.DATETIME) | (1 << TeradataParser.TIMESTAMP) | (1 << TeradataParser.CHAR) | (1 << TeradataParser.CHARACTER) | (1 << TeradataParser.VARCHAR) | (1 << TeradataParser.CHARACTER_VARYING) | (1 << TeradataParser.CHAR_VARYING) | (1 << TeradataParser.LONG_VARCHAR) | (1 << TeradataParser.INTERVAL) | (1 << TeradataParser.CASE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TeradataParser.WHEN - 64)) | (1 << (TeradataParser.THEN - 64)) | (1 << (TeradataParser.ELSE - 64)) | (1 << (TeradataParser.END - 64)) | (1 << (TeradataParser.JOIN - 64)) | (1 << (TeradataParser.CROSS - 64)) | (1 << (TeradataParser.OUTER - 64)) | (1 << (TeradataParser.INNER - 64)) | (1 << (TeradataParser.LEFT - 64)) | (1 << (TeradataParser.SEMI - 64)) | (1 << (TeradataParser.RIGHT - 64)) | (1 << (TeradataParser.FULL - 64)) | (1 << (TeradataParser.NATURAL - 64)) | (1 << (TeradataParser.ON - 64)) | (1 << (TeradataParser.LATERAL - 64)) | (1 << (TeradataParser.WINDOW - 64)) | (1 << (TeradataParser.OVER - 64)) | (1 << (TeradataParser.PARTITION - 64)) | (1 << (TeradataParser.RANGE - 64)) | (1 << (TeradataParser.PRESERVE - 64)) | (1 << (TeradataParser.ROWS - 64)) | (1 << (TeradataParser.UNBOUNDED - 64)) | (1 << (TeradataParser.PRECEDING - 64)) | (1 << (TeradataParser.FOLLOWING - 64)) | (1 << (TeradataParser.CURRENT - 64)) | (1 << (TeradataParser.FIRST - 64)) | (1 << (TeradataParser.LAST - 64)) | (1 << (TeradataParser.ROW - 64)) | (1 << (TeradataParser.WITH - 64)) | (1 << (TeradataParser.VALUES - 64)) | (1 << (TeradataParser.CREATE - 64)) | (1 << (TeradataParser.TABLE - 64)) | (1 << (TeradataParser.VIEW - 64)) | (1 << (TeradataParser.REPLACE - 64)) | (1 << (TeradataParser.INSERT - 64)) | (1 << (TeradataParser.UPDATE - 64)) | (1 << (TeradataParser.DELETE - 64)) | (1 << (TeradataParser.INTO - 64)) | (1 << (TeradataParser.DESCRIBE - 64)) | (1 << (TeradataParser.EXPLAIN - 64)) | (1 << (TeradataParser.FORMAT - 64)) | (1 << (TeradataParser.LOGICAL - 64)) | (1 << (TeradataParser.CODEGEN - 64)) | (1 << (TeradataParser.CAST - 64)) | (1 << (TeradataParser.SHOW - 64)) | (1 << (TeradataParser.TABLES - 64)) | (1 << (TeradataParser.COLUMNS - 64)) | (1 << (TeradataParser.COLUMN - 64)) | (1 << (TeradataParser.USE - 64)) | (1 << (TeradataParser.PARTITIONS - 64)) | (1 << (TeradataParser.FUNCTIONS - 64)) | (1 << (TeradataParser.DROP - 64)) | (1 << (TeradataParser.UNION - 64)) | (1 << (TeradataParser.EXCEPT - 64)) | (1 << (TeradataParser.SETMINUS - 64)) | (1 << (TeradataParser.INTERSECT - 64)) | (1 << (TeradataParser.TO - 64)) | (1 << (TeradataParser.TABLESAMPLE - 64)) | (1 << (TeradataParser.STRATIFY - 64)) | (1 << (TeradataParser.ALTER - 64)) | (1 << (TeradataParser.RENAME - 64)) | (1 << (TeradataParser.ARRAY - 64)) | (1 << (TeradataParser.MAP - 64)) | (1 << (TeradataParser.STRUCT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (TeradataParser.COMMENT - 128)) | (1 << (TeradataParser.MULTISET - 128)) | (1 << (TeradataParser.SET - 128)) | (1 << (TeradataParser.RESET - 128)) | (1 << (TeradataParser.DATA - 128)) | (1 << (TeradataParser.START - 128)) | (1 << (TeradataParser.TRANSACTION - 128)) | (1 << (TeradataParser.COMMIT - 128)) | (1 << (TeradataParser.ROLLBACK - 128)) | (1 << (TeradataParser.MACRO - 128)) | (1 << (TeradataParser.IF - 128)) | (1 << (TeradataParser.PERCENTLIT - 128)) | (1 << (TeradataParser.BUCKET - 128)) | (1 << (TeradataParser.OUT - 128)) | (1 << (TeradataParser.OF - 128)) | (1 << (TeradataParser.SORT - 128)) | (1 << (TeradataParser.CLUSTER - 128)) | (1 << (TeradataParser.DISTRIBUTE - 128)) | (1 << (TeradataParser.OVERWRITE - 128)) | (1 << (TeradataParser.TRANSFORM - 128)) | (1 << (TeradataParser.REDUCE - 128)) | (1 << (TeradataParser.USING - 128)) | (1 << (TeradataParser.SERDE - 128)) | (1 << (TeradataParser.SERDEPROPERTIES - 128)) | (1 << (TeradataParser.RECORDREADER - 128)) | (1 << (TeradataParser.RECORDWRITER - 128)) | (1 << (TeradataParser.DELIMITED - 128)) | (1 << (TeradataParser.FIELDS - 128)) | (1 << (TeradataParser.TERMINATED - 128)) | (1 << (TeradataParser.COLLECTION - 128)) | (1 << (TeradataParser.ITEMS - 128)) | (1 << (TeradataParser.KEYS - 128)) | (1 << (TeradataParser.ESCAPED - 128)) | (1 << (TeradataParser.LINES - 128)) | (1 << (TeradataParser.SEPARATED - 128)) | (1 << (TeradataParser.FUNCTION - 128)) | (1 << (TeradataParser.EXTENDED - 128)) | (1 << (TeradataParser.REFRESH - 128)) | (1 << (TeradataParser.CLEAR - 128)) | (1 << (TeradataParser.CACHE - 128)) | (1 << (TeradataParser.UNCACHE - 128)) | (1 << (TeradataParser.LAZY - 128)) | (1 << (TeradataParser.FORMATTED - 128)) | (1 << (TeradataParser.TEMPORARY - 128)) | (1 << (TeradataParser.GLOBAL - 128)) | (1 << (TeradataParser.VOLATILE - 128)) | (1 << (TeradataParser.OPTIONS - 128)) | (1 << (TeradataParser.UNSET - 128)) | (1 << (TeradataParser.TBLPROPERTIES - 128)) | (1 << (TeradataParser.DBPROPERTIES - 128)) | (1 << (TeradataParser.BUCKETS - 128)) | (1 << (TeradataParser.SKEWED - 128)) | (1 << (TeradataParser.STORED - 128)) | (1 << (TeradataParser.DIRECTORIES - 128)) | (1 << (TeradataParser.LOCATION - 128)) | (1 << (TeradataParser.EXCHANGE - 128)) | (1 << (TeradataParser.ARCHIVE - 128)) | (1 << (TeradataParser.UNARCHIVE - 128)) | (1 << (TeradataParser.FILEFORMAT - 128)) | (1 << (TeradataParser.TOUCH - 128)) | (1 << (TeradataParser.COMPACT - 128)) | (1 << (TeradataParser.CONCATENATE - 128)) | (1 << (TeradataParser.CHANGE - 128)) | (1 << (TeradataParser.CASCADE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (TeradataParser.RESTRICT - 192)) | (1 << (TeradataParser.CLUSTERED - 192)) | (1 << (TeradataParser.SORTED - 192)) | (1 << (TeradataParser.PURGE - 192)) | (1 << (TeradataParser.INPUTFORMAT - 192)) | (1 << (TeradataParser.OUTPUTFORMAT - 192)) | (1 << (TeradataParser.DATABASE - 192)) | (1 << (TeradataParser.DATABASES - 192)) | (1 << (TeradataParser.DFS - 192)) | (1 << (TeradataParser.TRUNCATE - 192)) | (1 << (TeradataParser.ANALYZE - 192)) | (1 << (TeradataParser.COMPUTE - 192)) | (1 << (TeradataParser.LIST - 192)) | (1 << (TeradataParser.STATISTICS - 192)) | (1 << (TeradataParser.PARTITIONED - 192)) | (1 << (TeradataParser.EXTERNAL - 192)) | (1 << (TeradataParser.DEFINED - 192)) | (1 << (TeradataParser.REVOKE - 192)) | (1 << (TeradataParser.GRANT - 192)) | (1 << (TeradataParser.LOCK - 192)) | (1 << (TeradataParser.UNLOCK - 192)) | (1 << (TeradataParser.MSCK - 192)) | (1 << (TeradataParser.REPAIR - 192)) | (1 << (TeradataParser.RECOVER - 192)) | (1 << (TeradataParser.EXPORT - 192)) | (1 << (TeradataParser.IMPORT - 192)) | (1 << (TeradataParser.LOAD - 192)) | (1 << (TeradataParser.ROLE - 192)) | (1 << (TeradataParser.ROLES - 192)) | (1 << (TeradataParser.COMPACTIONS - 192)) | (1 << (TeradataParser.PRINCIPALS - 192)) | (1 << (TeradataParser.TRANSACTIONS - 192)) | (1 << (TeradataParser.INDEX - 192)) | (1 << (TeradataParser.INDEXES - 192)) | (1 << (TeradataParser.UNIQUE - 192)) | (1 << (TeradataParser.PRIMARY - 192)) | (1 << (TeradataParser.LOCKS - 192)) | (1 << (TeradataParser.OPTION - 192)) | (1 << (TeradataParser.ANTI - 192)) | (1 << (TeradataParser.LOCAL - 192)) | (1 << (TeradataParser.INPATH - 192)) | (1 << (TeradataParser.CURRENT_DATE - 192)) | (1 << (TeradataParser.CURRENT_TIMESTAMP - 192)) | (1 << (TeradataParser.SUBSTRING - 192)) | (1 << (TeradataParser.TRIM - 192)) | (1 << (TeradataParser.POSITION - 192)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (TeradataParser.DOLLAR - 258)) | (1 << (TeradataParser.REFERENCE - 258)) | (1 << (TeradataParser.PLUS - 258)) | (1 << (TeradataParser.MINUS - 258)) | (1 << (TeradataParser.ASTERISK - 258)) | (1 << (TeradataParser.DIV - 258)) | (1 << (TeradataParser.TILDE - 258)) | (1 << (TeradataParser.STRING - 258)) | (1 << (TeradataParser.BIGINT_LITERAL - 258)) | (1 << (TeradataParser.SMALLINT_LITERAL - 258)) | (1 << (TeradataParser.TINYINT_LITERAL - 258)) | (1 << (TeradataParser.INTEGER_VALUE - 258)) | (1 << (TeradataParser.DECIMAL_VALUE - 258)) | (1 << (TeradataParser.SCIENTIFIC_DECIMAL_VALUE - 258)) | (1 << (TeradataParser.DOUBLE_LITERAL - 258)) | (1 << (TeradataParser.BIGDECIMAL_LITERAL - 258)) | (1 << (TeradataParser.IDENTIFIER - 258)) | (1 << (TeradataParser.BACKQUOTED_IDENTIFIER - 258)))) != 0):
                self.state = 535
                self.expression()
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TeradataParser.T__0:
                    self.state = 536
                    self.match(TeradataParser.T__0)
                    self.state = 537
                    self.expression()
                    self.state = 542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 545
            self.match(TeradataParser.T__2)
            self.state = 546
            localctx.tblName = self.identifier()
            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 548
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 547
                    self.match(TeradataParser.AS)


                self.state = 550
                localctx._identifier = self.identifier()
                localctx.colName.append(localctx._identifier)
                self.state = 555
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 551
                        self.match(TeradataParser.T__0)
                        self.state = 552
                        localctx._identifier = self.identifier()
                        localctx.colName.append(localctx._identifier) 
                    self.state = 557
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,64,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(TeradataParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(TeradataParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)




    def setQuantifier(self):

        localctx = TeradataParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            _la = self._input.LA(1)
            if not(_la==TeradataParser.ALL or _la==TeradataParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(TeradataParser.RelationPrimaryContext,0)


        def joinRelation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.JoinRelationContext)
            else:
                return self.getTypedRuleContext(TeradataParser.JoinRelationContext,i)


        def getRuleIndex(self):
            return TeradataParser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)




    def relation(self):

        localctx = TeradataParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_relation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.relationPrimary()
            self.state = 566
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 563
                    self.joinRelation() 
                self.state = 568
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinRelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.right = None # RelationPrimaryContext

        def JOIN(self):
            return self.getToken(TeradataParser.JOIN, 0)

        def relationPrimary(self):
            return self.getTypedRuleContext(TeradataParser.RelationPrimaryContext,0)


        def joinType(self):
            return self.getTypedRuleContext(TeradataParser.JoinTypeContext,0)


        def joinCriteria(self):
            return self.getTypedRuleContext(TeradataParser.JoinCriteriaContext,0)


        def NATURAL(self):
            return self.getToken(TeradataParser.NATURAL, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_joinRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)




    def joinRelation(self):

        localctx = TeradataParser.JoinRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_joinRelation)
        try:
            self.state = 580
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TeradataParser.JOIN, TeradataParser.CROSS, TeradataParser.INNER, TeradataParser.LEFT, TeradataParser.RIGHT, TeradataParser.FULL, TeradataParser.ANTI]:
                self.enterOuterAlt(localctx, 1)
                self.state = 569
                self.joinType()
                self.state = 570
                self.match(TeradataParser.JOIN)
                self.state = 571
                localctx.right = self.relationPrimary()
                self.state = 573
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 572
                    self.joinCriteria()


                pass
            elif token in [TeradataParser.NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 575
                self.match(TeradataParser.NATURAL)
                self.state = 576
                self.joinType()
                self.state = 577
                self.match(TeradataParser.JOIN)
                self.state = 578
                localctx.right = self.relationPrimary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(TeradataParser.INNER, 0)

        def CROSS(self):
            return self.getToken(TeradataParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(TeradataParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(TeradataParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(TeradataParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(TeradataParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(TeradataParser.FULL, 0)

        def ANTI(self):
            return self.getToken(TeradataParser.ANTI, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)




    def joinType(self):

        localctx = TeradataParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.INNER:
                    self.state = 582
                    self.match(TeradataParser.INNER)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 585
                self.match(TeradataParser.CROSS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 586
                self.match(TeradataParser.LEFT)
                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.OUTER:
                    self.state = 587
                    self.match(TeradataParser.OUTER)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 590
                self.match(TeradataParser.LEFT)
                self.state = 591
                self.match(TeradataParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 592
                self.match(TeradataParser.RIGHT)
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.OUTER:
                    self.state = 593
                    self.match(TeradataParser.OUTER)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 596
                self.match(TeradataParser.FULL)
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.OUTER:
                    self.state = 597
                    self.match(TeradataParser.OUTER)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.LEFT:
                    self.state = 600
                    self.match(TeradataParser.LEFT)


                self.state = 603
                self.match(TeradataParser.ANTI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(TeradataParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(TeradataParser.USING, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TeradataParser.IdentifierContext,i)


        def getRuleIndex(self):
            return TeradataParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)




    def joinCriteria(self):

        localctx = TeradataParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_joinCriteria)
        self._la = 0 # Token type
        try:
            self.state = 620
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TeradataParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 606
                self.match(TeradataParser.ON)
                self.state = 607
                self.booleanExpression(0)
                pass
            elif token in [TeradataParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 608
                self.match(TeradataParser.USING)
                self.state = 609
                self.match(TeradataParser.T__1)
                self.state = 610
                self.identifier()
                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TeradataParser.T__0:
                    self.state = 611
                    self.match(TeradataParser.T__0)
                    self.state = 612
                    self.identifier()
                    self.state = 617
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 618
                self.match(TeradataParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.percentage = None # Token
            self.sampleType = None # Token
            self.numerator = None # Token
            self.denominator = None # Token

        def TABLESAMPLE(self):
            return self.getToken(TeradataParser.TABLESAMPLE, 0)

        def BYTELENGTH_LITERAL(self):
            return self.getToken(TeradataParser.BYTELENGTH_LITERAL, 0)

        def expression(self):
            return self.getTypedRuleContext(TeradataParser.ExpressionContext,0)


        def OUT(self):
            return self.getToken(TeradataParser.OUT, 0)

        def OF(self):
            return self.getToken(TeradataParser.OF, 0)

        def PERCENTLIT(self):
            return self.getToken(TeradataParser.PERCENTLIT, 0)

        def ROWS(self):
            return self.getToken(TeradataParser.ROWS, 0)

        def BUCKET(self):
            return self.getToken(TeradataParser.BUCKET, 0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataParser.INTEGER_VALUE)
            else:
                return self.getToken(TeradataParser.INTEGER_VALUE, i)

        def DECIMAL_VALUE(self):
            return self.getToken(TeradataParser.DECIMAL_VALUE, 0)

        def ON(self):
            return self.getToken(TeradataParser.ON, 0)

        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)


        def qualifiedName(self):
            return self.getTypedRuleContext(TeradataParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_sample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample" ):
                listener.enterSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample" ):
                listener.exitSample(self)




    def sample(self):

        localctx = TeradataParser.SampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_sample)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.match(TeradataParser.TABLESAMPLE)
            self.state = 623
            self.match(TeradataParser.T__1)
            self.state = 645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 624
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==TeradataParser.INTEGER_VALUE or _la==TeradataParser.DECIMAL_VALUE):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 625
                localctx.sampleType = self.match(TeradataParser.PERCENTLIT)
                pass

            elif la_ == 2:
                self.state = 626
                self.expression()
                self.state = 627
                localctx.sampleType = self.match(TeradataParser.ROWS)
                pass

            elif la_ == 3:
                self.state = 629
                localctx.sampleType = self.match(TeradataParser.BYTELENGTH_LITERAL)
                pass

            elif la_ == 4:
                self.state = 630
                localctx.sampleType = self.match(TeradataParser.BUCKET)
                self.state = 631
                localctx.numerator = self.match(TeradataParser.INTEGER_VALUE)
                self.state = 632
                self.match(TeradataParser.OUT)
                self.state = 633
                self.match(TeradataParser.OF)
                self.state = 634
                localctx.denominator = self.match(TeradataParser.INTEGER_VALUE)
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.ON:
                    self.state = 635
                    self.match(TeradataParser.ON)
                    self.state = 641
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                    if la_ == 1:
                        self.state = 636
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 637
                        self.qualifiedName()
                        self.state = 638
                        self.match(TeradataParser.T__1)
                        self.state = 639
                        self.match(TeradataParser.T__2)
                        pass




                pass


            self.state = 647
            self.match(TeradataParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierSeq(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierSeqContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = TeradataParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(TeradataParser.T__1)
            self.state = 650
            self.identifierSeq()
            self.state = 651
            self.match(TeradataParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TeradataParser.IdentifierContext,i)


        def getRuleIndex(self):
            return TeradataParser.RULE_identifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierSeq" ):
                listener.enterIdentifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierSeq" ):
                listener.exitIdentifierSeq(self)




    def identifierSeq(self):

        localctx = TeradataParser.IdentifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_identifierSeq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.identifier()
            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TeradataParser.T__0:
                self.state = 654
                self.match(TeradataParser.T__0)
                self.state = 655
                self.identifier()
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.OrderedIdentifierContext)
            else:
                return self.getTypedRuleContext(TeradataParser.OrderedIdentifierContext,i)


        def getRuleIndex(self):
            return TeradataParser.RULE_orderedIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifierList" ):
                listener.enterOrderedIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifierList" ):
                listener.exitOrderedIdentifierList(self)




    def orderedIdentifierList(self):

        localctx = TeradataParser.OrderedIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_orderedIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.match(TeradataParser.T__1)
            self.state = 662
            self.orderedIdentifier()
            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TeradataParser.T__0:
                self.state = 663
                self.match(TeradataParser.T__0)
                self.state = 664
                self.orderedIdentifier()
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 670
            self.match(TeradataParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token

        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)


        def ASC(self):
            return self.getToken(TeradataParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataParser.DESC, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_orderedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifier" ):
                listener.enterOrderedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifier" ):
                listener.exitOrderedIdentifier(self)




    def orderedIdentifier(self):

        localctx = TeradataParser.OrderedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_orderedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.identifier()
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.ASC or _la==TeradataParser.DESC:
                self.state = 673
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==TeradataParser.ASC or _la==TeradataParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.IdentifierCommentContext)
            else:
                return self.getTypedRuleContext(TeradataParser.IdentifierCommentContext,i)


        def getRuleIndex(self):
            return TeradataParser.RULE_identifierCommentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierCommentList" ):
                listener.enterIdentifierCommentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierCommentList" ):
                listener.exitIdentifierCommentList(self)




    def identifierCommentList(self):

        localctx = TeradataParser.IdentifierCommentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_identifierCommentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(TeradataParser.T__1)
            self.state = 677
            self.identifierComment()
            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TeradataParser.T__0:
                self.state = 678
                self.match(TeradataParser.T__0)
                self.state = 679
                self.identifierComment()
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 685
            self.match(TeradataParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)


        def COMMENT(self):
            return self.getToken(TeradataParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(TeradataParser.STRING, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_identifierComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierComment" ):
                listener.enterIdentifierComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierComment" ):
                listener.exitIdentifierComment(self)




    def identifierComment(self):

        localctx = TeradataParser.IdentifierCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_identifierComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.identifier()
            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.COMMENT:
                self.state = 688
                self.match(TeradataParser.COMMENT)
                self.state = 689
                self.match(TeradataParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableIdentifier(self):
            return self.getTypedRuleContext(TeradataParser.TableIdentifierContext,0)


        def sample(self):
            return self.getTypedRuleContext(TeradataParser.SampleContext,0)


        def strictIdentifier(self):
            return self.getTypedRuleContext(TeradataParser.StrictIdentifierContext,0)


        def AS(self):
            return self.getToken(TeradataParser.AS, 0)

        def queryNoWith(self):
            return self.getTypedRuleContext(TeradataParser.QueryNoWithContext,0)


        def relation(self):
            return self.getTypedRuleContext(TeradataParser.RelationContext,0)


        def inlineTable(self):
            return self.getTypedRuleContext(TeradataParser.InlineTableContext,0)


        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ExpressionContext,i)


        def getRuleIndex(self):
            return TeradataParser.RULE_relationPrimary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationPrimary" ):
                listener.enterRelationPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationPrimary" ):
                listener.exitRelationPrimary(self)




    def relationPrimary(self):

        localctx = TeradataParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_relationPrimary)
        self._la = 0 # Token type
        try:
            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 692
                self.tableIdentifier()
                self.state = 694
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 693
                    self.sample()


                self.state = 700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 697
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                    if la_ == 1:
                        self.state = 696
                        self.match(TeradataParser.AS)


                    self.state = 699
                    self.strictIdentifier()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 702
                self.match(TeradataParser.T__1)
                self.state = 703
                self.queryNoWith()
                self.state = 704
                self.match(TeradataParser.T__2)
                self.state = 706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 705
                    self.sample()


                self.state = 712
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 709
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                    if la_ == 1:
                        self.state = 708
                        self.match(TeradataParser.AS)


                    self.state = 711
                    self.strictIdentifier()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 714
                self.match(TeradataParser.T__1)
                self.state = 715
                self.relation()
                self.state = 716
                self.match(TeradataParser.T__2)
                self.state = 718
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 717
                    self.sample()


                self.state = 724
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 721
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                    if la_ == 1:
                        self.state = 720
                        self.match(TeradataParser.AS)


                    self.state = 723
                    self.strictIdentifier()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 726
                self.inlineTable()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 727
                self.identifier()
                self.state = 728
                self.match(TeradataParser.T__1)
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TeradataParser.T__1) | (1 << TeradataParser.SELECT) | (1 << TeradataParser.FROM) | (1 << TeradataParser.ADD) | (1 << TeradataParser.AS) | (1 << TeradataParser.ALL) | (1 << TeradataParser.DISTINCT) | (1 << TeradataParser.WHERE) | (1 << TeradataParser.GROUP) | (1 << TeradataParser.BY) | (1 << TeradataParser.GROUPING) | (1 << TeradataParser.SETS) | (1 << TeradataParser.CUBE) | (1 << TeradataParser.ROLLUP) | (1 << TeradataParser.ORDER) | (1 << TeradataParser.HAVING) | (1 << TeradataParser.LIMIT) | (1 << TeradataParser.AT) | (1 << TeradataParser.OR) | (1 << TeradataParser.AND) | (1 << TeradataParser.IN) | (1 << TeradataParser.NOT) | (1 << TeradataParser.NO) | (1 << TeradataParser.EXISTS) | (1 << TeradataParser.BETWEEN) | (1 << TeradataParser.LIKE) | (1 << TeradataParser.RLIKE) | (1 << TeradataParser.IS) | (1 << TeradataParser.NULL) | (1 << TeradataParser.TRUE) | (1 << TeradataParser.FALSE) | (1 << TeradataParser.NULLS) | (1 << TeradataParser.ASC) | (1 << TeradataParser.DESC) | (1 << TeradataParser.FOR) | (1 << TeradataParser.BYTEINT) | (1 << TeradataParser.SMALLINT) | (1 << TeradataParser.INT) | (1 << TeradataParser.INTEGER) | (1 << TeradataParser.BIGINT) | (1 << TeradataParser.DECIMAL) | (1 << TeradataParser.DEC) | (1 << TeradataParser.NUMERIC) | (1 << TeradataParser.NUMBER) | (1 << TeradataParser.FLOAT) | (1 << TeradataParser.REAL) | (1 << TeradataParser.DOUBLE_PRECISION) | (1 << TeradataParser.DATE) | (1 << TeradataParser.DATETIME) | (1 << TeradataParser.TIMESTAMP) | (1 << TeradataParser.CHAR) | (1 << TeradataParser.CHARACTER) | (1 << TeradataParser.VARCHAR) | (1 << TeradataParser.CHARACTER_VARYING) | (1 << TeradataParser.CHAR_VARYING) | (1 << TeradataParser.LONG_VARCHAR) | (1 << TeradataParser.INTERVAL) | (1 << TeradataParser.CASE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TeradataParser.WHEN - 64)) | (1 << (TeradataParser.THEN - 64)) | (1 << (TeradataParser.ELSE - 64)) | (1 << (TeradataParser.END - 64)) | (1 << (TeradataParser.JOIN - 64)) | (1 << (TeradataParser.CROSS - 64)) | (1 << (TeradataParser.OUTER - 64)) | (1 << (TeradataParser.INNER - 64)) | (1 << (TeradataParser.LEFT - 64)) | (1 << (TeradataParser.SEMI - 64)) | (1 << (TeradataParser.RIGHT - 64)) | (1 << (TeradataParser.FULL - 64)) | (1 << (TeradataParser.NATURAL - 64)) | (1 << (TeradataParser.ON - 64)) | (1 << (TeradataParser.LATERAL - 64)) | (1 << (TeradataParser.WINDOW - 64)) | (1 << (TeradataParser.OVER - 64)) | (1 << (TeradataParser.PARTITION - 64)) | (1 << (TeradataParser.RANGE - 64)) | (1 << (TeradataParser.PRESERVE - 64)) | (1 << (TeradataParser.ROWS - 64)) | (1 << (TeradataParser.UNBOUNDED - 64)) | (1 << (TeradataParser.PRECEDING - 64)) | (1 << (TeradataParser.FOLLOWING - 64)) | (1 << (TeradataParser.CURRENT - 64)) | (1 << (TeradataParser.FIRST - 64)) | (1 << (TeradataParser.LAST - 64)) | (1 << (TeradataParser.ROW - 64)) | (1 << (TeradataParser.WITH - 64)) | (1 << (TeradataParser.VALUES - 64)) | (1 << (TeradataParser.CREATE - 64)) | (1 << (TeradataParser.TABLE - 64)) | (1 << (TeradataParser.VIEW - 64)) | (1 << (TeradataParser.REPLACE - 64)) | (1 << (TeradataParser.INSERT - 64)) | (1 << (TeradataParser.UPDATE - 64)) | (1 << (TeradataParser.DELETE - 64)) | (1 << (TeradataParser.INTO - 64)) | (1 << (TeradataParser.DESCRIBE - 64)) | (1 << (TeradataParser.EXPLAIN - 64)) | (1 << (TeradataParser.FORMAT - 64)) | (1 << (TeradataParser.LOGICAL - 64)) | (1 << (TeradataParser.CODEGEN - 64)) | (1 << (TeradataParser.CAST - 64)) | (1 << (TeradataParser.SHOW - 64)) | (1 << (TeradataParser.TABLES - 64)) | (1 << (TeradataParser.COLUMNS - 64)) | (1 << (TeradataParser.COLUMN - 64)) | (1 << (TeradataParser.USE - 64)) | (1 << (TeradataParser.PARTITIONS - 64)) | (1 << (TeradataParser.FUNCTIONS - 64)) | (1 << (TeradataParser.DROP - 64)) | (1 << (TeradataParser.UNION - 64)) | (1 << (TeradataParser.EXCEPT - 64)) | (1 << (TeradataParser.SETMINUS - 64)) | (1 << (TeradataParser.INTERSECT - 64)) | (1 << (TeradataParser.TO - 64)) | (1 << (TeradataParser.TABLESAMPLE - 64)) | (1 << (TeradataParser.STRATIFY - 64)) | (1 << (TeradataParser.ALTER - 64)) | (1 << (TeradataParser.RENAME - 64)) | (1 << (TeradataParser.ARRAY - 64)) | (1 << (TeradataParser.MAP - 64)) | (1 << (TeradataParser.STRUCT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (TeradataParser.COMMENT - 128)) | (1 << (TeradataParser.MULTISET - 128)) | (1 << (TeradataParser.SET - 128)) | (1 << (TeradataParser.RESET - 128)) | (1 << (TeradataParser.DATA - 128)) | (1 << (TeradataParser.START - 128)) | (1 << (TeradataParser.TRANSACTION - 128)) | (1 << (TeradataParser.COMMIT - 128)) | (1 << (TeradataParser.ROLLBACK - 128)) | (1 << (TeradataParser.MACRO - 128)) | (1 << (TeradataParser.IF - 128)) | (1 << (TeradataParser.PERCENTLIT - 128)) | (1 << (TeradataParser.BUCKET - 128)) | (1 << (TeradataParser.OUT - 128)) | (1 << (TeradataParser.OF - 128)) | (1 << (TeradataParser.SORT - 128)) | (1 << (TeradataParser.CLUSTER - 128)) | (1 << (TeradataParser.DISTRIBUTE - 128)) | (1 << (TeradataParser.OVERWRITE - 128)) | (1 << (TeradataParser.TRANSFORM - 128)) | (1 << (TeradataParser.REDUCE - 128)) | (1 << (TeradataParser.USING - 128)) | (1 << (TeradataParser.SERDE - 128)) | (1 << (TeradataParser.SERDEPROPERTIES - 128)) | (1 << (TeradataParser.RECORDREADER - 128)) | (1 << (TeradataParser.RECORDWRITER - 128)) | (1 << (TeradataParser.DELIMITED - 128)) | (1 << (TeradataParser.FIELDS - 128)) | (1 << (TeradataParser.TERMINATED - 128)) | (1 << (TeradataParser.COLLECTION - 128)) | (1 << (TeradataParser.ITEMS - 128)) | (1 << (TeradataParser.KEYS - 128)) | (1 << (TeradataParser.ESCAPED - 128)) | (1 << (TeradataParser.LINES - 128)) | (1 << (TeradataParser.SEPARATED - 128)) | (1 << (TeradataParser.FUNCTION - 128)) | (1 << (TeradataParser.EXTENDED - 128)) | (1 << (TeradataParser.REFRESH - 128)) | (1 << (TeradataParser.CLEAR - 128)) | (1 << (TeradataParser.CACHE - 128)) | (1 << (TeradataParser.UNCACHE - 128)) | (1 << (TeradataParser.LAZY - 128)) | (1 << (TeradataParser.FORMATTED - 128)) | (1 << (TeradataParser.TEMPORARY - 128)) | (1 << (TeradataParser.GLOBAL - 128)) | (1 << (TeradataParser.VOLATILE - 128)) | (1 << (TeradataParser.OPTIONS - 128)) | (1 << (TeradataParser.UNSET - 128)) | (1 << (TeradataParser.TBLPROPERTIES - 128)) | (1 << (TeradataParser.DBPROPERTIES - 128)) | (1 << (TeradataParser.BUCKETS - 128)) | (1 << (TeradataParser.SKEWED - 128)) | (1 << (TeradataParser.STORED - 128)) | (1 << (TeradataParser.DIRECTORIES - 128)) | (1 << (TeradataParser.LOCATION - 128)) | (1 << (TeradataParser.EXCHANGE - 128)) | (1 << (TeradataParser.ARCHIVE - 128)) | (1 << (TeradataParser.UNARCHIVE - 128)) | (1 << (TeradataParser.FILEFORMAT - 128)) | (1 << (TeradataParser.TOUCH - 128)) | (1 << (TeradataParser.COMPACT - 128)) | (1 << (TeradataParser.CONCATENATE - 128)) | (1 << (TeradataParser.CHANGE - 128)) | (1 << (TeradataParser.CASCADE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (TeradataParser.RESTRICT - 192)) | (1 << (TeradataParser.CLUSTERED - 192)) | (1 << (TeradataParser.SORTED - 192)) | (1 << (TeradataParser.PURGE - 192)) | (1 << (TeradataParser.INPUTFORMAT - 192)) | (1 << (TeradataParser.OUTPUTFORMAT - 192)) | (1 << (TeradataParser.DATABASE - 192)) | (1 << (TeradataParser.DATABASES - 192)) | (1 << (TeradataParser.DFS - 192)) | (1 << (TeradataParser.TRUNCATE - 192)) | (1 << (TeradataParser.ANALYZE - 192)) | (1 << (TeradataParser.COMPUTE - 192)) | (1 << (TeradataParser.LIST - 192)) | (1 << (TeradataParser.STATISTICS - 192)) | (1 << (TeradataParser.PARTITIONED - 192)) | (1 << (TeradataParser.EXTERNAL - 192)) | (1 << (TeradataParser.DEFINED - 192)) | (1 << (TeradataParser.REVOKE - 192)) | (1 << (TeradataParser.GRANT - 192)) | (1 << (TeradataParser.LOCK - 192)) | (1 << (TeradataParser.UNLOCK - 192)) | (1 << (TeradataParser.MSCK - 192)) | (1 << (TeradataParser.REPAIR - 192)) | (1 << (TeradataParser.RECOVER - 192)) | (1 << (TeradataParser.EXPORT - 192)) | (1 << (TeradataParser.IMPORT - 192)) | (1 << (TeradataParser.LOAD - 192)) | (1 << (TeradataParser.ROLE - 192)) | (1 << (TeradataParser.ROLES - 192)) | (1 << (TeradataParser.COMPACTIONS - 192)) | (1 << (TeradataParser.PRINCIPALS - 192)) | (1 << (TeradataParser.TRANSACTIONS - 192)) | (1 << (TeradataParser.INDEX - 192)) | (1 << (TeradataParser.INDEXES - 192)) | (1 << (TeradataParser.UNIQUE - 192)) | (1 << (TeradataParser.PRIMARY - 192)) | (1 << (TeradataParser.LOCKS - 192)) | (1 << (TeradataParser.OPTION - 192)) | (1 << (TeradataParser.ANTI - 192)) | (1 << (TeradataParser.LOCAL - 192)) | (1 << (TeradataParser.INPATH - 192)) | (1 << (TeradataParser.CURRENT_DATE - 192)) | (1 << (TeradataParser.CURRENT_TIMESTAMP - 192)) | (1 << (TeradataParser.SUBSTRING - 192)) | (1 << (TeradataParser.TRIM - 192)) | (1 << (TeradataParser.POSITION - 192)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (TeradataParser.DOLLAR - 258)) | (1 << (TeradataParser.REFERENCE - 258)) | (1 << (TeradataParser.PLUS - 258)) | (1 << (TeradataParser.MINUS - 258)) | (1 << (TeradataParser.ASTERISK - 258)) | (1 << (TeradataParser.DIV - 258)) | (1 << (TeradataParser.TILDE - 258)) | (1 << (TeradataParser.STRING - 258)) | (1 << (TeradataParser.BIGINT_LITERAL - 258)) | (1 << (TeradataParser.SMALLINT_LITERAL - 258)) | (1 << (TeradataParser.TINYINT_LITERAL - 258)) | (1 << (TeradataParser.INTEGER_VALUE - 258)) | (1 << (TeradataParser.DECIMAL_VALUE - 258)) | (1 << (TeradataParser.SCIENTIFIC_DECIMAL_VALUE - 258)) | (1 << (TeradataParser.DOUBLE_LITERAL - 258)) | (1 << (TeradataParser.BIGDECIMAL_LITERAL - 258)) | (1 << (TeradataParser.IDENTIFIER - 258)) | (1 << (TeradataParser.BACKQUOTED_IDENTIFIER - 258)))) != 0):
                    self.state = 729
                    self.expression()
                    self.state = 734
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==TeradataParser.T__0:
                        self.state = 730
                        self.match(TeradataParser.T__0)
                        self.state = 731
                        self.expression()
                        self.state = 736
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 739
                self.match(TeradataParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ExpressionContext,i)


        def VALUES(self):
            return self.getToken(TeradataParser.VALUES, 0)

        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(TeradataParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_inlineTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)




    def inlineTable(self):

        localctx = TeradataParser.InlineTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_inlineTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 743
                self.match(TeradataParser.VALUES)


            self.state = 746
            self.expression()
            self.state = 751
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 747
                    self.match(TeradataParser.T__0)
                    self.state = 748
                    self.expression() 
                self.state = 753
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 755
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 754
                    self.match(TeradataParser.AS)


                self.state = 757
                self.identifier()
                self.state = 759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 758
                    self.identifierList()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ExpressionContext,i)


        def VALUES(self):
            return self.getToken(TeradataParser.VALUES, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_valuesExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesExpression" ):
                listener.enterValuesExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesExpression" ):
                listener.exitValuesExpression(self)




    def valuesExpression(self):

        localctx = TeradataParser.ValuesExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_valuesExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.VALUES:
                self.state = 763
                self.match(TeradataParser.VALUES)


            self.state = 766
            self.match(TeradataParser.T__1)
            self.state = 767
            self.expression()
            self.state = 772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TeradataParser.T__0:
                self.state = 768
                self.match(TeradataParser.T__0)
                self.state = 769
                self.expression()
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 775
            self.match(TeradataParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # IdentifierContext
            self.table = None # IdentifierContext

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TeradataParser.IdentifierContext,i)


        def DOT(self):
            return self.getToken(TeradataParser.DOT, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_tableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIdentifier" ):
                listener.enterTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIdentifier" ):
                listener.exitTableIdentifier(self)




    def tableIdentifier(self):

        localctx = TeradataParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 777
                localctx.db = self.identifier()
                self.state = 778
                self.match(TeradataParser.DOT)


            self.state = 782
            localctx.table = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(TeradataParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierListContext,0)


        def AS(self):
            return self.getToken(TeradataParser.AS, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_namedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpression" ):
                listener.enterNamedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpression" ):
                listener.exitNamedExpression(self)




    def namedExpression(self):

        localctx = TeradataParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.expression()
            self.state = 792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 786
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 785
                    self.match(TeradataParser.AS)


                self.state = 790
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TeradataParser.SELECT, TeradataParser.FROM, TeradataParser.ADD, TeradataParser.AS, TeradataParser.ALL, TeradataParser.DISTINCT, TeradataParser.WHERE, TeradataParser.GROUP, TeradataParser.BY, TeradataParser.GROUPING, TeradataParser.SETS, TeradataParser.CUBE, TeradataParser.ROLLUP, TeradataParser.ORDER, TeradataParser.HAVING, TeradataParser.LIMIT, TeradataParser.AT, TeradataParser.OR, TeradataParser.AND, TeradataParser.IN, TeradataParser.NOT, TeradataParser.NO, TeradataParser.EXISTS, TeradataParser.BETWEEN, TeradataParser.LIKE, TeradataParser.RLIKE, TeradataParser.IS, TeradataParser.NULL, TeradataParser.TRUE, TeradataParser.FALSE, TeradataParser.NULLS, TeradataParser.ASC, TeradataParser.DESC, TeradataParser.FOR, TeradataParser.BYTEINT, TeradataParser.SMALLINT, TeradataParser.INT, TeradataParser.INTEGER, TeradataParser.BIGINT, TeradataParser.DECIMAL, TeradataParser.DEC, TeradataParser.NUMERIC, TeradataParser.NUMBER, TeradataParser.FLOAT, TeradataParser.REAL, TeradataParser.DOUBLE_PRECISION, TeradataParser.DATE, TeradataParser.DATETIME, TeradataParser.TIMESTAMP, TeradataParser.CHAR, TeradataParser.CHARACTER, TeradataParser.VARCHAR, TeradataParser.CHARACTER_VARYING, TeradataParser.CHAR_VARYING, TeradataParser.LONG_VARCHAR, TeradataParser.INTERVAL, TeradataParser.CASE, TeradataParser.WHEN, TeradataParser.THEN, TeradataParser.ELSE, TeradataParser.END, TeradataParser.JOIN, TeradataParser.CROSS, TeradataParser.OUTER, TeradataParser.INNER, TeradataParser.LEFT, TeradataParser.SEMI, TeradataParser.RIGHT, TeradataParser.FULL, TeradataParser.NATURAL, TeradataParser.ON, TeradataParser.LATERAL, TeradataParser.WINDOW, TeradataParser.OVER, TeradataParser.PARTITION, TeradataParser.RANGE, TeradataParser.PRESERVE, TeradataParser.ROWS, TeradataParser.UNBOUNDED, TeradataParser.PRECEDING, TeradataParser.FOLLOWING, TeradataParser.CURRENT, TeradataParser.FIRST, TeradataParser.LAST, TeradataParser.ROW, TeradataParser.WITH, TeradataParser.VALUES, TeradataParser.CREATE, TeradataParser.TABLE, TeradataParser.VIEW, TeradataParser.REPLACE, TeradataParser.INSERT, TeradataParser.UPDATE, TeradataParser.DELETE, TeradataParser.INTO, TeradataParser.DESCRIBE, TeradataParser.EXPLAIN, TeradataParser.FORMAT, TeradataParser.LOGICAL, TeradataParser.CODEGEN, TeradataParser.CAST, TeradataParser.SHOW, TeradataParser.TABLES, TeradataParser.COLUMNS, TeradataParser.COLUMN, TeradataParser.USE, TeradataParser.PARTITIONS, TeradataParser.FUNCTIONS, TeradataParser.DROP, TeradataParser.UNION, TeradataParser.EXCEPT, TeradataParser.SETMINUS, TeradataParser.INTERSECT, TeradataParser.TO, TeradataParser.TABLESAMPLE, TeradataParser.STRATIFY, TeradataParser.ALTER, TeradataParser.RENAME, TeradataParser.ARRAY, TeradataParser.MAP, TeradataParser.STRUCT, TeradataParser.COMMENT, TeradataParser.MULTISET, TeradataParser.SET, TeradataParser.RESET, TeradataParser.DATA, TeradataParser.START, TeradataParser.TRANSACTION, TeradataParser.COMMIT, TeradataParser.ROLLBACK, TeradataParser.MACRO, TeradataParser.IF, TeradataParser.PERCENTLIT, TeradataParser.BUCKET, TeradataParser.OUT, TeradataParser.OF, TeradataParser.SORT, TeradataParser.CLUSTER, TeradataParser.DISTRIBUTE, TeradataParser.OVERWRITE, TeradataParser.TRANSFORM, TeradataParser.REDUCE, TeradataParser.USING, TeradataParser.SERDE, TeradataParser.SERDEPROPERTIES, TeradataParser.RECORDREADER, TeradataParser.RECORDWRITER, TeradataParser.DELIMITED, TeradataParser.FIELDS, TeradataParser.TERMINATED, TeradataParser.COLLECTION, TeradataParser.ITEMS, TeradataParser.KEYS, TeradataParser.ESCAPED, TeradataParser.LINES, TeradataParser.SEPARATED, TeradataParser.FUNCTION, TeradataParser.EXTENDED, TeradataParser.REFRESH, TeradataParser.CLEAR, TeradataParser.CACHE, TeradataParser.UNCACHE, TeradataParser.LAZY, TeradataParser.FORMATTED, TeradataParser.TEMPORARY, TeradataParser.GLOBAL, TeradataParser.VOLATILE, TeradataParser.OPTIONS, TeradataParser.UNSET, TeradataParser.TBLPROPERTIES, TeradataParser.DBPROPERTIES, TeradataParser.BUCKETS, TeradataParser.SKEWED, TeradataParser.STORED, TeradataParser.DIRECTORIES, TeradataParser.LOCATION, TeradataParser.EXCHANGE, TeradataParser.ARCHIVE, TeradataParser.UNARCHIVE, TeradataParser.FILEFORMAT, TeradataParser.TOUCH, TeradataParser.COMPACT, TeradataParser.CONCATENATE, TeradataParser.CHANGE, TeradataParser.CASCADE, TeradataParser.RESTRICT, TeradataParser.CLUSTERED, TeradataParser.SORTED, TeradataParser.PURGE, TeradataParser.INPUTFORMAT, TeradataParser.OUTPUTFORMAT, TeradataParser.DATABASE, TeradataParser.DATABASES, TeradataParser.DFS, TeradataParser.TRUNCATE, TeradataParser.ANALYZE, TeradataParser.COMPUTE, TeradataParser.LIST, TeradataParser.STATISTICS, TeradataParser.PARTITIONED, TeradataParser.EXTERNAL, TeradataParser.DEFINED, TeradataParser.REVOKE, TeradataParser.GRANT, TeradataParser.LOCK, TeradataParser.UNLOCK, TeradataParser.MSCK, TeradataParser.REPAIR, TeradataParser.RECOVER, TeradataParser.EXPORT, TeradataParser.IMPORT, TeradataParser.LOAD, TeradataParser.ROLE, TeradataParser.ROLES, TeradataParser.COMPACTIONS, TeradataParser.PRINCIPALS, TeradataParser.TRANSACTIONS, TeradataParser.INDEX, TeradataParser.INDEXES, TeradataParser.UNIQUE, TeradataParser.PRIMARY, TeradataParser.LOCKS, TeradataParser.OPTION, TeradataParser.ANTI, TeradataParser.LOCAL, TeradataParser.INPATH, TeradataParser.CURRENT_DATE, TeradataParser.CURRENT_TIMESTAMP, TeradataParser.DOLLAR, TeradataParser.DIV, TeradataParser.IDENTIFIER, TeradataParser.BACKQUOTED_IDENTIFIER]:
                    self.state = 788
                    self.identifier()
                    pass
                elif token in [TeradataParser.T__1]:
                    self.state = 789
                    self.identifierList()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.NamedExpressionContext,i)


        def ASTERISK(self):
            return self.getToken(TeradataParser.ASTERISK, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_namedExpressionSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpressionSeq" ):
                listener.enterNamedExpressionSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpressionSeq" ):
                listener.exitNamedExpressionSeq(self)




    def namedExpressionSeq(self):

        localctx = TeradataParser.NamedExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_namedExpressionSeq)
        try:
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 794
                self.namedExpression()
                self.state = 799
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 795
                        self.match(TeradataParser.T__0)
                        self.state = 796
                        self.namedExpression() 
                    self.state = 801
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 802
                self.match(TeradataParser.ASTERISK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(TeradataParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = TeradataParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(TeradataParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(TeradataParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)


    class BooleanDefaultContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicated(self):
            return self.getTypedRuleContext(TeradataParser.PredicatedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanDefault" ):
                listener.enterBooleanDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanDefault" ):
                listener.exitBooleanDefault(self)


    class ExistsContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(TeradataParser.EXISTS, 0)
        def query(self):
            return self.getTypedRuleContext(TeradataParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.operator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(TeradataParser.AND, 0)
        def OR(self):
            return self.getToken(TeradataParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalBinary" ):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalBinary" ):
                listener.exitLogicalBinary(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                localctx = TeradataParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 808
                self.match(TeradataParser.NOT)
                self.state = 809
                self.booleanExpression(5)
                pass

            elif la_ == 2:
                localctx = TeradataParser.BooleanDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 810
                self.predicated()
                pass

            elif la_ == 3:
                localctx = TeradataParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 811
                self.match(TeradataParser.EXISTS)
                self.state = 812
                self.match(TeradataParser.T__1)
                self.state = 813
                self.query()
                self.state = 814
                self.match(TeradataParser.T__2)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 826
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 824
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                    if la_ == 1:
                        localctx = TeradataParser.LogicalBinaryContext(self, TeradataParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 818
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 819
                        localctx.operator = self.match(TeradataParser.AND)
                        self.state = 820
                        localctx.right = self.booleanExpression(4)
                        pass

                    elif la_ == 2:
                        localctx = TeradataParser.LogicalBinaryContext(self, TeradataParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 821
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 822
                        localctx.operator = self.match(TeradataParser.OR)
                        self.state = 823
                        localctx.right = self.booleanExpression(3)
                        pass

             
                self.state = 828
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicatedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(TeradataParser.ValueExpressionContext,0)


        def predicate(self):
            return self.getTypedRuleContext(TeradataParser.PredicateContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_predicated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)




    def predicated(self):

        localctx = TeradataParser.PredicatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_predicated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.valueExpression(0)
            self.state = 831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 830
                self.predicate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.pattern = None # ValueExpressionContext

        def AND(self):
            return self.getToken(TeradataParser.AND, 0)

        def BETWEEN(self):
            return self.getToken(TeradataParser.BETWEEN, 0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ValueExpressionContext,i)


        def NOT(self):
            return self.getToken(TeradataParser.NOT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ExpressionContext,i)


        def IN(self):
            return self.getToken(TeradataParser.IN, 0)

        def query(self):
            return self.getTypedRuleContext(TeradataParser.QueryContext,0)


        def RLIKE(self):
            return self.getToken(TeradataParser.RLIKE, 0)

        def LIKE(self):
            return self.getToken(TeradataParser.LIKE, 0)

        def IS(self):
            return self.getToken(TeradataParser.IS, 0)

        def NULL(self):
            return self.getToken(TeradataParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = TeradataParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.NOT:
                    self.state = 833
                    self.match(TeradataParser.NOT)


                self.state = 836
                localctx.kind = self.match(TeradataParser.BETWEEN)
                self.state = 837
                localctx.lower = self.valueExpression(0)
                self.state = 838
                self.match(TeradataParser.AND)
                self.state = 839
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.NOT:
                    self.state = 841
                    self.match(TeradataParser.NOT)


                self.state = 844
                localctx.kind = self.match(TeradataParser.IN)
                self.state = 845
                self.match(TeradataParser.T__1)
                self.state = 846
                self.expression()
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TeradataParser.T__0:
                    self.state = 847
                    self.match(TeradataParser.T__0)
                    self.state = 848
                    self.expression()
                    self.state = 853
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 854
                self.match(TeradataParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.NOT:
                    self.state = 856
                    self.match(TeradataParser.NOT)


                self.state = 859
                localctx.kind = self.match(TeradataParser.IN)
                self.state = 860
                self.match(TeradataParser.T__1)
                self.state = 861
                self.query()
                self.state = 862
                self.match(TeradataParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.NOT:
                    self.state = 864
                    self.match(TeradataParser.NOT)


                self.state = 867
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==TeradataParser.LIKE or _la==TeradataParser.RLIKE):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 868
                localctx.pattern = self.valueExpression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 869
                self.match(TeradataParser.IS)
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.NOT:
                    self.state = 870
                    self.match(TeradataParser.NOT)


                self.state = 873
                localctx.kind = self.match(TeradataParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(TeradataParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)


    class ComparisonContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(TeradataParser.ComparisonOperatorContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(TeradataParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(TeradataParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(TeradataParser.PERCENT, 0)
        def DIV(self):
            return self.getToken(TeradataParser.DIV, 0)
        def PLUS(self):
            return self.getToken(TeradataParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(TeradataParser.MINUS, 0)
        def AMPERSAND(self):
            return self.getToken(TeradataParser.AMPERSAND, 0)
        def HAT(self):
            return self.getToken(TeradataParser.HAT, 0)
        def PIPE(self):
            return self.getToken(TeradataParser.PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(TeradataParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(TeradataParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(TeradataParser.PLUS, 0)
        def TILDE(self):
            return self.getToken(TeradataParser.TILDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)


    class TeradataCastContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(TeradataParser.PrimaryExpressionContext,0)

        def dataType(self):
            return self.getTypedRuleContext(TeradataParser.DataTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTeradataCast" ):
                listener.enterTeradataCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTeradataCast" ):
                listener.exitTeradataCast(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 104
        self.enterRecursionRule(localctx, 104, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                localctx = TeradataParser.TeradataCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 877
                self.primaryExpression(0)
                self.state = 878
                self.match(TeradataParser.T__1)
                self.state = 879
                self.dataType()
                self.state = 880
                self.match(TeradataParser.T__2)
                pass

            elif la_ == 2:
                localctx = TeradataParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 882
                self.primaryExpression(0)
                pass

            elif la_ == 3:
                localctx = TeradataParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 883
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 260)) & ~0x3f) == 0 and ((1 << (_la - 260)) & ((1 << (TeradataParser.PLUS - 260)) | (1 << (TeradataParser.MINUS - 260)) | (1 << (TeradataParser.TILDE - 260)))) != 0)):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 884
                self.valueExpression(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 908
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 906
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                    if la_ == 1:
                        localctx = TeradataParser.ArithmeticBinaryContext(self, TeradataParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 887
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 888
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (TeradataParser.ASTERISK - 262)) | (1 << (TeradataParser.SLASH - 262)) | (1 << (TeradataParser.PERCENT - 262)) | (1 << (TeradataParser.DIV - 262)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 889
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 2:
                        localctx = TeradataParser.ArithmeticBinaryContext(self, TeradataParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 890
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 891
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==TeradataParser.PLUS or _la==TeradataParser.MINUS):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 892
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 3:
                        localctx = TeradataParser.ArithmeticBinaryContext(self, TeradataParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 893
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 894
                        localctx.operator = self.match(TeradataParser.AMPERSAND)
                        self.state = 895
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 4:
                        localctx = TeradataParser.ArithmeticBinaryContext(self, TeradataParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 896
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 897
                        localctx.operator = self.match(TeradataParser.HAT)
                        self.state = 898
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 5:
                        localctx = TeradataParser.ArithmeticBinaryContext(self, TeradataParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 899
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 900
                        localctx.operator = self.match(TeradataParser.PIPE)
                        self.state = 901
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 6:
                        localctx = TeradataParser.ComparisonContext(self, TeradataParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 902
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 903
                        self.comparisonOperator()
                        self.state = 904
                        localctx.right = self.valueExpression(2)
                        pass

             
                self.state = 910
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(TeradataParser.DOT, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(TeradataParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)


    class PositionFunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(TeradataParser.POSITION, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ExpressionContext,i)

        def IN(self):
            return self.getToken(TeradataParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionFunctionCall" ):
                listener.enterPositionFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionFunctionCall" ):
                listener.exitPositionFunctionCall(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(TeradataParser.CASE, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(TeradataParser.ValueExpressionContext,0)

        def END(self):
            return self.getToken(TeradataParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(TeradataParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(TeradataParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(TeradataParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)


    class SubstringCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.stringExpression = None # ExpressionContext
            self.n1 = None # ExpressionContext
            self.n2 = None # ExpressionContext
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(TeradataParser.SUBSTRING, 0)
        def FROM(self):
            return self.getToken(TeradataParser.FROM, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ExpressionContext,i)

        def FOR(self):
            return self.getToken(TeradataParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstringCall" ):
                listener.enterSubstringCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstringCall" ):
                listener.exitSubstringCall(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)


    class StarContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(TeradataParser.ASTERISK, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(TeradataParser.QualifiedNameContext,0)

        def DOT(self):
            return self.getToken(TeradataParser.DOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar" ):
                listener.enterStar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar" ):
                listener.exitStar(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(TeradataParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(TeradataParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)


    class TimeFunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.precision = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(TeradataParser.CURRENT_DATE, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(TeradataParser.CURRENT_TIMESTAMP, 0)
        def DATE(self):
            return self.getToken(TeradataParser.DATE, 0)
        def INTEGER_VALUE(self):
            return self.getToken(TeradataParser.INTEGER_VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeFunctionCall" ):
                listener.enterTimeFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeFunctionCall" ):
                listener.exitTimeFunctionCall(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(TeradataParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(TeradataParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(TeradataParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(TeradataParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(TeradataParser.DataTypeContext,0)

        def dataAttribute(self):
            return self.getTypedRuleContext(TeradataParser.DataAttributeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)


    class ConstantDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(TeradataParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDefault" ):
                listener.enterConstantDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDefault" ):
                listener.exitConstantDefault(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(TeradataParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(TeradataParser.QualifiedNameContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ExpressionContext,i)

        def OVER(self):
            return self.getToken(TeradataParser.OVER, 0)
        def windowSpec(self):
            return self.getTypedRuleContext(TeradataParser.WindowSpecContext,0)

        def setQuantifier(self):
            return self.getTypedRuleContext(TeradataParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)


    class CaseSpecificExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.cse = None # CaseSpecificContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(TeradataParser.PrimaryExpressionContext,0)

        def caseSpecific(self):
            return self.getTypedRuleContext(TeradataParser.CaseSpecificContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseSpecificExpression" ):
                listener.enterCaseSpecificExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseSpecificExpression" ):
                listener.exitCaseSpecificExpression(self)


    class TrimCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.trimType = None # Token
            self.trimExpression = None # ExpressionContext
            self.stringExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(TeradataParser.TRIM, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ExpressionContext,i)

        def FROM(self):
            return self.getToken(TeradataParser.FROM, 0)
        def BOTH(self):
            return self.getToken(TeradataParser.BOTH, 0)
        def TRAILING(self):
            return self.getToken(TeradataParser.TRAILING, 0)
        def LEADING(self):
            return self.getToken(TeradataParser.LEADING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrimCall" ):
                listener.enterTrimCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrimCall" ):
                listener.exitTrimCall(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(TeradataParser.CASE, 0)
        def END(self):
            return self.getToken(TeradataParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(TeradataParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(TeradataParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(TeradataParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)


    class ColumnNameReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFERENCE(self):
            return self.getToken(TeradataParser.REFERENCE, 0)
        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnNameReference" ):
                listener.enterColumnNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnNameReference" ):
                listener.exitColumnNameReference(self)


    class ConcatenateExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.PrimaryExpressionContext,i)

        def STRING_CONCATENATE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataParser.STRING_CONCATENATE)
            else:
                return self.getToken(TeradataParser.STRING_CONCATENATE, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenateExpression" ):
                listener.enterConcatenateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenateExpression" ):
                listener.exitConcatenateExpression(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 106
        self.enterRecursionRule(localctx, 106, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                localctx = TeradataParser.TimeFunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 912
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==TeradataParser.DATE or _la==TeradataParser.CURRENT_DATE or _la==TeradataParser.CURRENT_TIMESTAMP):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 916
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 913
                    self.match(TeradataParser.T__1)
                    self.state = 914
                    localctx.precision = self.match(TeradataParser.INTEGER_VALUE)
                    self.state = 915
                    self.match(TeradataParser.T__2)


                pass

            elif la_ == 2:
                localctx = TeradataParser.SubstringCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 918
                self.match(TeradataParser.SUBSTRING)
                self.state = 919
                self.match(TeradataParser.T__1)
                self.state = 920
                localctx.stringExpression = self.expression()
                self.state = 921
                self.match(TeradataParser.FROM)
                self.state = 922
                localctx.n1 = self.expression()
                self.state = 925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.FOR:
                    self.state = 923
                    self.match(TeradataParser.FOR)
                    self.state = 924
                    localctx.n2 = self.expression()


                self.state = 927
                self.match(TeradataParser.T__2)
                pass

            elif la_ == 3:
                localctx = TeradataParser.PositionFunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 929
                self.match(TeradataParser.POSITION)
                self.state = 930
                self.match(TeradataParser.T__1)
                self.state = 931
                self.expression()
                self.state = 932
                self.match(TeradataParser.IN)
                self.state = 933
                self.expression()
                self.state = 934
                self.match(TeradataParser.T__2)
                pass

            elif la_ == 4:
                localctx = TeradataParser.TrimCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 936
                self.match(TeradataParser.TRIM)
                self.state = 937
                self.match(TeradataParser.T__1)
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & ((1 << (TeradataParser.BOTH - 237)) | (1 << (TeradataParser.TRAILING - 237)) | (1 << (TeradataParser.LEADING - 237)))) != 0):
                    self.state = 938
                    localctx.trimType = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(((((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & ((1 << (TeradataParser.BOTH - 237)) | (1 << (TeradataParser.TRAILING - 237)) | (1 << (TeradataParser.LEADING - 237)))) != 0)):
                        localctx.trimType = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 940
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                    if la_ == 1:
                        self.state = 939
                        localctx.trimExpression = self.expression()


                    self.state = 942
                    self.match(TeradataParser.FROM)


                self.state = 945
                localctx.stringExpression = self.expression()
                self.state = 946
                self.match(TeradataParser.T__2)
                pass

            elif la_ == 5:
                localctx = TeradataParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 948
                self.match(TeradataParser.CASE)
                self.state = 949
                self.valueExpression(0)
                self.state = 951 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 950
                    self.whenClause()
                    self.state = 953 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TeradataParser.WHEN):
                        break

                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.ELSE:
                    self.state = 955
                    self.match(TeradataParser.ELSE)
                    self.state = 956
                    localctx.elseExpression = self.expression()


                self.state = 959
                self.match(TeradataParser.END)
                pass

            elif la_ == 6:
                localctx = TeradataParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 961
                self.match(TeradataParser.CASE)
                self.state = 963 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 962
                    self.whenClause()
                    self.state = 965 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TeradataParser.WHEN):
                        break

                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.ELSE:
                    self.state = 967
                    self.match(TeradataParser.ELSE)
                    self.state = 968
                    localctx.elseExpression = self.expression()


                self.state = 971
                self.match(TeradataParser.END)
                pass

            elif la_ == 7:
                localctx = TeradataParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 973
                self.match(TeradataParser.CAST)
                self.state = 974
                self.match(TeradataParser.T__1)
                self.state = 975
                self.expression()
                self.state = 976
                self.match(TeradataParser.AS)
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TeradataParser.BYTEINT) | (1 << TeradataParser.SMALLINT) | (1 << TeradataParser.INT) | (1 << TeradataParser.INTEGER) | (1 << TeradataParser.BIGINT) | (1 << TeradataParser.DECIMAL) | (1 << TeradataParser.DEC) | (1 << TeradataParser.NUMERIC) | (1 << TeradataParser.NUMBER) | (1 << TeradataParser.FLOAT) | (1 << TeradataParser.REAL) | (1 << TeradataParser.DOUBLE_PRECISION) | (1 << TeradataParser.DATE) | (1 << TeradataParser.DATETIME) | (1 << TeradataParser.TIMESTAMP) | (1 << TeradataParser.CHAR) | (1 << TeradataParser.CHARACTER) | (1 << TeradataParser.VARCHAR) | (1 << TeradataParser.CHARACTER_VARYING) | (1 << TeradataParser.CHAR_VARYING) | (1 << TeradataParser.LONG_VARCHAR) | (1 << TeradataParser.INTERVAL))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (TeradataParser.ARRAY - 125)) | (1 << (TeradataParser.MAP - 125)) | (1 << (TeradataParser.STRUCT - 125)))) != 0) or _la==TeradataParser.TIME:
                    self.state = 977
                    self.dataType()


                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.T__1 or _la==TeradataParser.FORMAT or _la==TeradataParser.TITLE:
                    self.state = 980
                    self.dataAttribute()


                self.state = 983
                self.match(TeradataParser.T__2)
                pass

            elif la_ == 8:
                localctx = TeradataParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 985
                self.match(TeradataParser.ASTERISK)
                pass

            elif la_ == 9:
                localctx = TeradataParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 986
                self.qualifiedName()
                self.state = 987
                self.match(TeradataParser.DOT)
                self.state = 988
                self.match(TeradataParser.ASTERISK)
                pass

            elif la_ == 10:
                localctx = TeradataParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 990
                self.qualifiedName()
                self.state = 991
                self.match(TeradataParser.T__1)
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TeradataParser.T__1) | (1 << TeradataParser.SELECT) | (1 << TeradataParser.FROM) | (1 << TeradataParser.ADD) | (1 << TeradataParser.AS) | (1 << TeradataParser.ALL) | (1 << TeradataParser.DISTINCT) | (1 << TeradataParser.WHERE) | (1 << TeradataParser.GROUP) | (1 << TeradataParser.BY) | (1 << TeradataParser.GROUPING) | (1 << TeradataParser.SETS) | (1 << TeradataParser.CUBE) | (1 << TeradataParser.ROLLUP) | (1 << TeradataParser.ORDER) | (1 << TeradataParser.HAVING) | (1 << TeradataParser.LIMIT) | (1 << TeradataParser.AT) | (1 << TeradataParser.OR) | (1 << TeradataParser.AND) | (1 << TeradataParser.IN) | (1 << TeradataParser.NOT) | (1 << TeradataParser.NO) | (1 << TeradataParser.EXISTS) | (1 << TeradataParser.BETWEEN) | (1 << TeradataParser.LIKE) | (1 << TeradataParser.RLIKE) | (1 << TeradataParser.IS) | (1 << TeradataParser.NULL) | (1 << TeradataParser.TRUE) | (1 << TeradataParser.FALSE) | (1 << TeradataParser.NULLS) | (1 << TeradataParser.ASC) | (1 << TeradataParser.DESC) | (1 << TeradataParser.FOR) | (1 << TeradataParser.BYTEINT) | (1 << TeradataParser.SMALLINT) | (1 << TeradataParser.INT) | (1 << TeradataParser.INTEGER) | (1 << TeradataParser.BIGINT) | (1 << TeradataParser.DECIMAL) | (1 << TeradataParser.DEC) | (1 << TeradataParser.NUMERIC) | (1 << TeradataParser.NUMBER) | (1 << TeradataParser.FLOAT) | (1 << TeradataParser.REAL) | (1 << TeradataParser.DOUBLE_PRECISION) | (1 << TeradataParser.DATE) | (1 << TeradataParser.DATETIME) | (1 << TeradataParser.TIMESTAMP) | (1 << TeradataParser.CHAR) | (1 << TeradataParser.CHARACTER) | (1 << TeradataParser.VARCHAR) | (1 << TeradataParser.CHARACTER_VARYING) | (1 << TeradataParser.CHAR_VARYING) | (1 << TeradataParser.LONG_VARCHAR) | (1 << TeradataParser.INTERVAL) | (1 << TeradataParser.CASE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TeradataParser.WHEN - 64)) | (1 << (TeradataParser.THEN - 64)) | (1 << (TeradataParser.ELSE - 64)) | (1 << (TeradataParser.END - 64)) | (1 << (TeradataParser.JOIN - 64)) | (1 << (TeradataParser.CROSS - 64)) | (1 << (TeradataParser.OUTER - 64)) | (1 << (TeradataParser.INNER - 64)) | (1 << (TeradataParser.LEFT - 64)) | (1 << (TeradataParser.SEMI - 64)) | (1 << (TeradataParser.RIGHT - 64)) | (1 << (TeradataParser.FULL - 64)) | (1 << (TeradataParser.NATURAL - 64)) | (1 << (TeradataParser.ON - 64)) | (1 << (TeradataParser.LATERAL - 64)) | (1 << (TeradataParser.WINDOW - 64)) | (1 << (TeradataParser.OVER - 64)) | (1 << (TeradataParser.PARTITION - 64)) | (1 << (TeradataParser.RANGE - 64)) | (1 << (TeradataParser.PRESERVE - 64)) | (1 << (TeradataParser.ROWS - 64)) | (1 << (TeradataParser.UNBOUNDED - 64)) | (1 << (TeradataParser.PRECEDING - 64)) | (1 << (TeradataParser.FOLLOWING - 64)) | (1 << (TeradataParser.CURRENT - 64)) | (1 << (TeradataParser.FIRST - 64)) | (1 << (TeradataParser.LAST - 64)) | (1 << (TeradataParser.ROW - 64)) | (1 << (TeradataParser.WITH - 64)) | (1 << (TeradataParser.VALUES - 64)) | (1 << (TeradataParser.CREATE - 64)) | (1 << (TeradataParser.TABLE - 64)) | (1 << (TeradataParser.VIEW - 64)) | (1 << (TeradataParser.REPLACE - 64)) | (1 << (TeradataParser.INSERT - 64)) | (1 << (TeradataParser.UPDATE - 64)) | (1 << (TeradataParser.DELETE - 64)) | (1 << (TeradataParser.INTO - 64)) | (1 << (TeradataParser.DESCRIBE - 64)) | (1 << (TeradataParser.EXPLAIN - 64)) | (1 << (TeradataParser.FORMAT - 64)) | (1 << (TeradataParser.LOGICAL - 64)) | (1 << (TeradataParser.CODEGEN - 64)) | (1 << (TeradataParser.CAST - 64)) | (1 << (TeradataParser.SHOW - 64)) | (1 << (TeradataParser.TABLES - 64)) | (1 << (TeradataParser.COLUMNS - 64)) | (1 << (TeradataParser.COLUMN - 64)) | (1 << (TeradataParser.USE - 64)) | (1 << (TeradataParser.PARTITIONS - 64)) | (1 << (TeradataParser.FUNCTIONS - 64)) | (1 << (TeradataParser.DROP - 64)) | (1 << (TeradataParser.UNION - 64)) | (1 << (TeradataParser.EXCEPT - 64)) | (1 << (TeradataParser.SETMINUS - 64)) | (1 << (TeradataParser.INTERSECT - 64)) | (1 << (TeradataParser.TO - 64)) | (1 << (TeradataParser.TABLESAMPLE - 64)) | (1 << (TeradataParser.STRATIFY - 64)) | (1 << (TeradataParser.ALTER - 64)) | (1 << (TeradataParser.RENAME - 64)) | (1 << (TeradataParser.ARRAY - 64)) | (1 << (TeradataParser.MAP - 64)) | (1 << (TeradataParser.STRUCT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (TeradataParser.COMMENT - 128)) | (1 << (TeradataParser.MULTISET - 128)) | (1 << (TeradataParser.SET - 128)) | (1 << (TeradataParser.RESET - 128)) | (1 << (TeradataParser.DATA - 128)) | (1 << (TeradataParser.START - 128)) | (1 << (TeradataParser.TRANSACTION - 128)) | (1 << (TeradataParser.COMMIT - 128)) | (1 << (TeradataParser.ROLLBACK - 128)) | (1 << (TeradataParser.MACRO - 128)) | (1 << (TeradataParser.IF - 128)) | (1 << (TeradataParser.PERCENTLIT - 128)) | (1 << (TeradataParser.BUCKET - 128)) | (1 << (TeradataParser.OUT - 128)) | (1 << (TeradataParser.OF - 128)) | (1 << (TeradataParser.SORT - 128)) | (1 << (TeradataParser.CLUSTER - 128)) | (1 << (TeradataParser.DISTRIBUTE - 128)) | (1 << (TeradataParser.OVERWRITE - 128)) | (1 << (TeradataParser.TRANSFORM - 128)) | (1 << (TeradataParser.REDUCE - 128)) | (1 << (TeradataParser.USING - 128)) | (1 << (TeradataParser.SERDE - 128)) | (1 << (TeradataParser.SERDEPROPERTIES - 128)) | (1 << (TeradataParser.RECORDREADER - 128)) | (1 << (TeradataParser.RECORDWRITER - 128)) | (1 << (TeradataParser.DELIMITED - 128)) | (1 << (TeradataParser.FIELDS - 128)) | (1 << (TeradataParser.TERMINATED - 128)) | (1 << (TeradataParser.COLLECTION - 128)) | (1 << (TeradataParser.ITEMS - 128)) | (1 << (TeradataParser.KEYS - 128)) | (1 << (TeradataParser.ESCAPED - 128)) | (1 << (TeradataParser.LINES - 128)) | (1 << (TeradataParser.SEPARATED - 128)) | (1 << (TeradataParser.FUNCTION - 128)) | (1 << (TeradataParser.EXTENDED - 128)) | (1 << (TeradataParser.REFRESH - 128)) | (1 << (TeradataParser.CLEAR - 128)) | (1 << (TeradataParser.CACHE - 128)) | (1 << (TeradataParser.UNCACHE - 128)) | (1 << (TeradataParser.LAZY - 128)) | (1 << (TeradataParser.FORMATTED - 128)) | (1 << (TeradataParser.TEMPORARY - 128)) | (1 << (TeradataParser.GLOBAL - 128)) | (1 << (TeradataParser.VOLATILE - 128)) | (1 << (TeradataParser.OPTIONS - 128)) | (1 << (TeradataParser.UNSET - 128)) | (1 << (TeradataParser.TBLPROPERTIES - 128)) | (1 << (TeradataParser.DBPROPERTIES - 128)) | (1 << (TeradataParser.BUCKETS - 128)) | (1 << (TeradataParser.SKEWED - 128)) | (1 << (TeradataParser.STORED - 128)) | (1 << (TeradataParser.DIRECTORIES - 128)) | (1 << (TeradataParser.LOCATION - 128)) | (1 << (TeradataParser.EXCHANGE - 128)) | (1 << (TeradataParser.ARCHIVE - 128)) | (1 << (TeradataParser.UNARCHIVE - 128)) | (1 << (TeradataParser.FILEFORMAT - 128)) | (1 << (TeradataParser.TOUCH - 128)) | (1 << (TeradataParser.COMPACT - 128)) | (1 << (TeradataParser.CONCATENATE - 128)) | (1 << (TeradataParser.CHANGE - 128)) | (1 << (TeradataParser.CASCADE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (TeradataParser.RESTRICT - 192)) | (1 << (TeradataParser.CLUSTERED - 192)) | (1 << (TeradataParser.SORTED - 192)) | (1 << (TeradataParser.PURGE - 192)) | (1 << (TeradataParser.INPUTFORMAT - 192)) | (1 << (TeradataParser.OUTPUTFORMAT - 192)) | (1 << (TeradataParser.DATABASE - 192)) | (1 << (TeradataParser.DATABASES - 192)) | (1 << (TeradataParser.DFS - 192)) | (1 << (TeradataParser.TRUNCATE - 192)) | (1 << (TeradataParser.ANALYZE - 192)) | (1 << (TeradataParser.COMPUTE - 192)) | (1 << (TeradataParser.LIST - 192)) | (1 << (TeradataParser.STATISTICS - 192)) | (1 << (TeradataParser.PARTITIONED - 192)) | (1 << (TeradataParser.EXTERNAL - 192)) | (1 << (TeradataParser.DEFINED - 192)) | (1 << (TeradataParser.REVOKE - 192)) | (1 << (TeradataParser.GRANT - 192)) | (1 << (TeradataParser.LOCK - 192)) | (1 << (TeradataParser.UNLOCK - 192)) | (1 << (TeradataParser.MSCK - 192)) | (1 << (TeradataParser.REPAIR - 192)) | (1 << (TeradataParser.RECOVER - 192)) | (1 << (TeradataParser.EXPORT - 192)) | (1 << (TeradataParser.IMPORT - 192)) | (1 << (TeradataParser.LOAD - 192)) | (1 << (TeradataParser.ROLE - 192)) | (1 << (TeradataParser.ROLES - 192)) | (1 << (TeradataParser.COMPACTIONS - 192)) | (1 << (TeradataParser.PRINCIPALS - 192)) | (1 << (TeradataParser.TRANSACTIONS - 192)) | (1 << (TeradataParser.INDEX - 192)) | (1 << (TeradataParser.INDEXES - 192)) | (1 << (TeradataParser.UNIQUE - 192)) | (1 << (TeradataParser.PRIMARY - 192)) | (1 << (TeradataParser.LOCKS - 192)) | (1 << (TeradataParser.OPTION - 192)) | (1 << (TeradataParser.ANTI - 192)) | (1 << (TeradataParser.LOCAL - 192)) | (1 << (TeradataParser.INPATH - 192)) | (1 << (TeradataParser.CURRENT_DATE - 192)) | (1 << (TeradataParser.CURRENT_TIMESTAMP - 192)) | (1 << (TeradataParser.SUBSTRING - 192)) | (1 << (TeradataParser.TRIM - 192)) | (1 << (TeradataParser.POSITION - 192)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (TeradataParser.DOLLAR - 258)) | (1 << (TeradataParser.REFERENCE - 258)) | (1 << (TeradataParser.PLUS - 258)) | (1 << (TeradataParser.MINUS - 258)) | (1 << (TeradataParser.ASTERISK - 258)) | (1 << (TeradataParser.DIV - 258)) | (1 << (TeradataParser.TILDE - 258)) | (1 << (TeradataParser.STRING - 258)) | (1 << (TeradataParser.BIGINT_LITERAL - 258)) | (1 << (TeradataParser.SMALLINT_LITERAL - 258)) | (1 << (TeradataParser.TINYINT_LITERAL - 258)) | (1 << (TeradataParser.INTEGER_VALUE - 258)) | (1 << (TeradataParser.DECIMAL_VALUE - 258)) | (1 << (TeradataParser.SCIENTIFIC_DECIMAL_VALUE - 258)) | (1 << (TeradataParser.DOUBLE_LITERAL - 258)) | (1 << (TeradataParser.BIGDECIMAL_LITERAL - 258)) | (1 << (TeradataParser.IDENTIFIER - 258)) | (1 << (TeradataParser.BACKQUOTED_IDENTIFIER - 258)))) != 0):
                    self.state = 993
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                    if la_ == 1:
                        self.state = 992
                        self.setQuantifier()


                    self.state = 995
                    self.expression()
                    self.state = 1000
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==TeradataParser.T__0:
                        self.state = 996
                        self.match(TeradataParser.T__0)
                        self.state = 997
                        self.expression()
                        self.state = 1002
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1005
                self.match(TeradataParser.T__2)
                self.state = 1008
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1006
                    self.match(TeradataParser.OVER)
                    self.state = 1007
                    self.windowSpec()


                pass

            elif la_ == 11:
                localctx = TeradataParser.ColumnNameReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1010
                self.match(TeradataParser.REFERENCE)
                self.state = 1011
                self.identifier()
                pass

            elif la_ == 12:
                localctx = TeradataParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1012
                self.identifier()
                pass

            elif la_ == 13:
                localctx = TeradataParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1013
                self.match(TeradataParser.T__1)
                self.state = 1014
                self.expression()
                self.state = 1017 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1015
                    self.match(TeradataParser.T__0)
                    self.state = 1016
                    self.expression()
                    self.state = 1019 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TeradataParser.T__0):
                        break

                self.state = 1021
                self.match(TeradataParser.T__2)
                pass

            elif la_ == 14:
                localctx = TeradataParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1023
                self.match(TeradataParser.T__1)
                self.state = 1024
                self.query()
                self.state = 1025
                self.match(TeradataParser.T__2)
                pass

            elif la_ == 15:
                localctx = TeradataParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1027
                self.match(TeradataParser.T__1)
                self.state = 1028
                self.expression()
                self.state = 1029
                self.match(TeradataParser.T__2)
                pass

            elif la_ == 16:
                localctx = TeradataParser.ConstantDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1031
                self.constant()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1053
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1051
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                    if la_ == 1:
                        localctx = TeradataParser.CaseSpecificExpressionContext(self, TeradataParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1034
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1035
                        localctx.cse = self.caseSpecific()
                        pass

                    elif la_ == 2:
                        localctx = TeradataParser.ConcatenateExpressionContext(self, TeradataParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1036
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1039 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1037
                                self.match(TeradataParser.STRING_CONCATENATE)
                                self.state = 1038
                                self.primaryExpression(0)

                            else:
                                raise NoViableAltException(self)
                            self.state = 1041 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

                        pass

                    elif la_ == 3:
                        localctx = TeradataParser.SubscriptContext(self, TeradataParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1043
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1044
                        self.match(TeradataParser.T__3)
                        self.state = 1045
                        localctx.index = self.valueExpression(0)
                        self.state = 1046
                        self.match(TeradataParser.T__4)
                        pass

                    elif la_ == 4:
                        localctx = TeradataParser.DereferenceContext(self, TeradataParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1048
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1049
                        self.match(TeradataParser.DOT)
                        self.state = 1050
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 1055
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DataAttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dateFormat = None # Token

        def FORMAT(self):
            return self.getToken(TeradataParser.FORMAT, 0)

        def TITLE(self):
            return self.getToken(TeradataParser.TITLE, 0)

        def STRING(self):
            return self.getToken(TeradataParser.STRING, 0)

        def dataTypePrecision(self):
            return self.getTypedRuleContext(TeradataParser.DataTypePrecisionContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_dataAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataAttribute" ):
                listener.enterDataAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataAttribute" ):
                listener.exitDataAttribute(self)




    def dataAttribute(self):

        localctx = TeradataParser.DataAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_dataAttribute)
        self._la = 0 # Token type
        try:
            self.state = 1059
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TeradataParser.FORMAT, TeradataParser.TITLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1056
                _la = self._input.LA(1)
                if not(_la==TeradataParser.FORMAT or _la==TeradataParser.TITLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1057
                localctx.dateFormat = self.match(TeradataParser.STRING)
                pass
            elif token in [TeradataParser.T__1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1058
                self.dataTypePrecision()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypePrecisionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(TeradataParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_dataTypePrecision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypePrecision" ):
                listener.enterDataTypePrecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypePrecision" ):
                listener.exitDataTypePrecision(self)




    def dataTypePrecision(self):

        localctx = TeradataParser.DataTypePrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_dataTypePrecision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.match(TeradataParser.T__1)
            self.state = 1062
            self.match(TeradataParser.INTEGER_VALUE)
            self.state = 1063
            self.match(TeradataParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataParser.RULE_constant

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NullLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(TeradataParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)


    class StringLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataParser.STRING)
            else:
                return self.getToken(TeradataParser.STRING, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)


    class TypeConstructorContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)

        def STRING(self):
            return self.getToken(TeradataParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstructor" ):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstructor" ):
                listener.exitTypeConstructor(self)


    class IntervalLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(TeradataParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)


    class NumericLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(TeradataParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)


    class BooleanLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(TeradataParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)



    def constant(self):

        localctx = TeradataParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_constant)
        try:
            self.state = 1077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                localctx = TeradataParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1065
                self.match(TeradataParser.NULL)
                pass

            elif la_ == 2:
                localctx = TeradataParser.IntervalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1066
                self.interval()
                pass

            elif la_ == 3:
                localctx = TeradataParser.TypeConstructorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1067
                self.identifier()
                self.state = 1068
                self.match(TeradataParser.STRING)
                pass

            elif la_ == 4:
                localctx = TeradataParser.NumericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1070
                self.number()
                pass

            elif la_ == 5:
                localctx = TeradataParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1071
                self.booleanValue()
                pass

            elif la_ == 6:
                localctx = TeradataParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1073 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1072
                        self.match(TeradataParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1075 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseSpecificContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.negate = None # Token

        def CS(self):
            return self.getToken(TeradataParser.CS, 0)

        def CASESPECIFIC(self):
            return self.getToken(TeradataParser.CASESPECIFIC, 0)

        def NOT(self):
            return self.getToken(TeradataParser.NOT, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_caseSpecific

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseSpecific" ):
                listener.enterCaseSpecific(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseSpecific" ):
                listener.exitCaseSpecific(self)




    def caseSpecific(self):

        localctx = TeradataParser.CaseSpecificContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_caseSpecific)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.match(TeradataParser.T__1)
            self.state = 1081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.NOT:
                self.state = 1080
                localctx.negate = self.match(TeradataParser.NOT)


            self.state = 1083
            _la = self._input.LA(1)
            if not(_la==TeradataParser.CS or _la==TeradataParser.CASESPECIFIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1084
            self.match(TeradataParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(TeradataParser.EQ, 0)

        def NEQ(self):
            return self.getToken(TeradataParser.NEQ, 0)

        def NEQJ(self):
            return self.getToken(TeradataParser.NEQJ, 0)

        def LT(self):
            return self.getToken(TeradataParser.LT, 0)

        def LTE(self):
            return self.getToken(TeradataParser.LTE, 0)

        def GT(self):
            return self.getToken(TeradataParser.GT, 0)

        def GTE(self):
            return self.getToken(TeradataParser.GTE, 0)

        def NSEQ(self):
            return self.getToken(TeradataParser.NSEQ, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = TeradataParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            _la = self._input.LA(1)
            if not(((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & ((1 << (TeradataParser.EQ - 250)) | (1 << (TeradataParser.NSEQ - 250)) | (1 << (TeradataParser.NEQ - 250)) | (1 << (TeradataParser.NEQJ - 250)) | (1 << (TeradataParser.LT - 250)) | (1 << (TeradataParser.LTE - 250)) | (1 << (TeradataParser.GT - 250)) | (1 << (TeradataParser.GTE - 250)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(TeradataParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(TeradataParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(TeradataParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(TeradataParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(TeradataParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(TeradataParser.DIV, 0)

        def TILDE(self):
            return self.getToken(TeradataParser.TILDE, 0)

        def AMPERSAND(self):
            return self.getToken(TeradataParser.AMPERSAND, 0)

        def PIPE(self):
            return self.getToken(TeradataParser.PIPE, 0)

        def HAT(self):
            return self.getToken(TeradataParser.HAT, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_arithmeticOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOperator" ):
                listener.enterArithmeticOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOperator" ):
                listener.exitArithmeticOperator(self)




    def arithmeticOperator(self):

        localctx = TeradataParser.ArithmeticOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_arithmeticOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            _la = self._input.LA(1)
            if not(((((_la - 260)) & ~0x3f) == 0 and ((1 << (_la - 260)) & ((1 << (TeradataParser.PLUS - 260)) | (1 << (TeradataParser.MINUS - 260)) | (1 << (TeradataParser.ASTERISK - 260)) | (1 << (TeradataParser.SLASH - 260)) | (1 << (TeradataParser.PERCENT - 260)) | (1 << (TeradataParser.DIV - 260)) | (1 << (TeradataParser.TILDE - 260)) | (1 << (TeradataParser.AMPERSAND - 260)) | (1 << (TeradataParser.PIPE - 260)) | (1 << (TeradataParser.HAT - 260)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(TeradataParser.OR, 0)

        def AND(self):
            return self.getToken(TeradataParser.AND, 0)

        def IN(self):
            return self.getToken(TeradataParser.IN, 0)

        def NOT(self):
            return self.getToken(TeradataParser.NOT, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_predicateOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateOperator" ):
                listener.enterPredicateOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateOperator" ):
                listener.exitPredicateOperator(self)




    def predicateOperator(self):

        localctx = TeradataParser.PredicateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_predicateOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TeradataParser.OR) | (1 << TeradataParser.AND) | (1 << TeradataParser.IN) | (1 << TeradataParser.NOT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(TeradataParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(TeradataParser.FALSE, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)




    def booleanValue(self):

        localctx = TeradataParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            _la = self._input.LA(1)
            if not(_la==TeradataParser.TRUE or _la==TeradataParser.FALSE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(TeradataParser.INTERVAL, 0)

        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(TeradataParser.IntervalFieldContext,i)


        def getRuleIndex(self):
            return TeradataParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = TeradataParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.match(TeradataParser.INTERVAL)
            self.state = 1098
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1095
                    self.intervalField() 
                self.state = 1100
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IntervalValueContext
            self.unit = None # IdentifierContext
            self.to = None # IdentifierContext

        def intervalValue(self):
            return self.getTypedRuleContext(TeradataParser.IntervalValueContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TeradataParser.IdentifierContext,i)


        def TO(self):
            return self.getToken(TeradataParser.TO, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_intervalField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalField" ):
                listener.enterIntervalField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalField" ):
                listener.exitIntervalField(self)




    def intervalField(self):

        localctx = TeradataParser.IntervalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_intervalField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            localctx.value = self.intervalValue()
            self.state = 1102
            localctx.unit = self.identifier()
            self.state = 1105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1103
                self.match(TeradataParser.TO)
                self.state = 1104
                localctx.to = self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(TeradataParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(TeradataParser.DECIMAL_VALUE, 0)

        def PLUS(self):
            return self.getToken(TeradataParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(TeradataParser.MINUS, 0)

        def STRING(self):
            return self.getToken(TeradataParser.STRING, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_intervalValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalValue" ):
                listener.enterIntervalValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalValue" ):
                listener.exitIntervalValue(self)




    def intervalValue(self):

        localctx = TeradataParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_intervalValue)
        self._la = 0 # Token type
        try:
            self.state = 1112
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TeradataParser.PLUS, TeradataParser.MINUS, TeradataParser.INTEGER_VALUE, TeradataParser.DECIMAL_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.PLUS or _la==TeradataParser.MINUS:
                    self.state = 1107
                    _la = self._input.LA(1)
                    if not(_la==TeradataParser.PLUS or _la==TeradataParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1110
                _la = self._input.LA(1)
                if not(_la==TeradataParser.INTEGER_VALUE or _la==TeradataParser.DECIMAL_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TeradataParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1111
                self.match(TeradataParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYTEINT(self):
            return self.getToken(TeradataParser.BYTEINT, 0)

        def SMALLINT(self):
            return self.getToken(TeradataParser.SMALLINT, 0)

        def INT(self):
            return self.getToken(TeradataParser.INT, 0)

        def INTEGER(self):
            return self.getToken(TeradataParser.INTEGER, 0)

        def BIGINT(self):
            return self.getToken(TeradataParser.BIGINT, 0)

        def DECIMAL(self):
            return self.getToken(TeradataParser.DECIMAL, 0)

        def DEC(self):
            return self.getToken(TeradataParser.DEC, 0)

        def NUMERIC(self):
            return self.getToken(TeradataParser.NUMERIC, 0)

        def NUMBER(self):
            return self.getToken(TeradataParser.NUMBER, 0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataParser.INTEGER_VALUE)
            else:
                return self.getToken(TeradataParser.INTEGER_VALUE, i)

        def FLOAT(self):
            return self.getToken(TeradataParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(TeradataParser.REAL, 0)

        def DOUBLE_PRECISION(self):
            return self.getToken(TeradataParser.DOUBLE_PRECISION, 0)

        def DATE(self):
            return self.getToken(TeradataParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(TeradataParser.DATETIME, 0)

        def TIME(self):
            return self.getToken(TeradataParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(TeradataParser.TIMESTAMP, 0)

        def CHAR(self):
            return self.getToken(TeradataParser.CHAR, 0)

        def CHARACTER(self):
            return self.getToken(TeradataParser.CHARACTER, 0)

        def VARCHAR(self):
            return self.getToken(TeradataParser.VARCHAR, 0)

        def CHARACTER_VARYING(self):
            return self.getToken(TeradataParser.CHARACTER_VARYING, 0)

        def CHAR_VARYING(self):
            return self.getToken(TeradataParser.CHAR_VARYING, 0)

        def LONG_VARCHAR(self):
            return self.getToken(TeradataParser.LONG_VARCHAR, 0)

        def intervalDataType(self):
            return self.getTypedRuleContext(TeradataParser.IntervalDataTypeContext,0)


        def complexDataType(self):
            return self.getTypedRuleContext(TeradataParser.ComplexDataTypeContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_dataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataType" ):
                listener.enterDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataType" ):
                listener.exitDataType(self)




    def dataType(self):

        localctx = TeradataParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 1156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1114
                self.match(TeradataParser.BYTEINT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1115
                self.match(TeradataParser.SMALLINT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1116
                self.match(TeradataParser.INT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1117
                self.match(TeradataParser.INTEGER)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1118
                self.match(TeradataParser.BIGINT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1119
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TeradataParser.DECIMAL) | (1 << TeradataParser.DEC) | (1 << TeradataParser.NUMERIC) | (1 << TeradataParser.NUMBER))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1127
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                if la_ == 1:
                    self.state = 1120
                    self.match(TeradataParser.T__1)
                    self.state = 1121
                    self.match(TeradataParser.INTEGER_VALUE)
                    self.state = 1124
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TeradataParser.T__0:
                        self.state = 1122
                        self.match(TeradataParser.T__0)
                        self.state = 1123
                        self.match(TeradataParser.INTEGER_VALUE)


                    self.state = 1126
                    self.match(TeradataParser.T__2)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1129
                self.match(TeradataParser.FLOAT)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1130
                self.match(TeradataParser.REAL)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1131
                self.match(TeradataParser.DOUBLE_PRECISION)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1132
                self.match(TeradataParser.DATE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1133
                self.match(TeradataParser.DATETIME)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1134
                self.match(TeradataParser.TIME)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1135
                self.match(TeradataParser.TIME)
                self.state = 1139
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                if la_ == 1:
                    self.state = 1136
                    self.match(TeradataParser.T__1)
                    self.state = 1137
                    self.match(TeradataParser.INTEGER_VALUE)
                    self.state = 1138
                    self.match(TeradataParser.T__2)


                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1141
                self.match(TeradataParser.TIMESTAMP)
                self.state = 1145
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                if la_ == 1:
                    self.state = 1142
                    self.match(TeradataParser.T__1)
                    self.state = 1143
                    self.match(TeradataParser.INTEGER_VALUE)
                    self.state = 1144
                    self.match(TeradataParser.T__2)


                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1147
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TeradataParser.CHAR) | (1 << TeradataParser.CHARACTER) | (1 << TeradataParser.VARCHAR) | (1 << TeradataParser.CHARACTER_VARYING) | (1 << TeradataParser.CHAR_VARYING))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1151
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 1148
                    self.match(TeradataParser.T__1)
                    self.state = 1149
                    self.match(TeradataParser.INTEGER_VALUE)
                    self.state = 1150
                    self.match(TeradataParser.T__2)


                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1153
                self.match(TeradataParser.LONG_VARCHAR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1154
                self.intervalDataType()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1155
                self.complexDataType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalDataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(TeradataParser.INTERVAL, 0)

        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_intervalDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalDataType" ):
                listener.enterIntervalDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalDataType" ):
                listener.exitIntervalDataType(self)




    def intervalDataType(self):

        localctx = TeradataParser.IntervalDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_intervalDataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self.match(TeradataParser.INTERVAL)
            self.state = 1159
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexDataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.complx = None # Token

        def LT(self):
            return self.getToken(TeradataParser.LT, 0)

        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(TeradataParser.DataTypeContext,i)


        def GT(self):
            return self.getToken(TeradataParser.GT, 0)

        def ARRAY(self):
            return self.getToken(TeradataParser.ARRAY, 0)

        def MAP(self):
            return self.getToken(TeradataParser.MAP, 0)

        def STRUCT(self):
            return self.getToken(TeradataParser.STRUCT, 0)

        def NEQ(self):
            return self.getToken(TeradataParser.NEQ, 0)

        def colTypeList(self):
            return self.getTypedRuleContext(TeradataParser.ColTypeListContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_complexDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexDataType" ):
                listener.enterComplexDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexDataType" ):
                listener.exitComplexDataType(self)




    def complexDataType(self):

        localctx = TeradataParser.ComplexDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_complexDataType)
        self._la = 0 # Token type
        try:
            self.state = 1182
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TeradataParser.ARRAY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1161
                localctx.complx = self.match(TeradataParser.ARRAY)
                self.state = 1162
                self.match(TeradataParser.LT)
                self.state = 1163
                self.dataType()
                self.state = 1164
                self.match(TeradataParser.GT)
                pass
            elif token in [TeradataParser.MAP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1166
                localctx.complx = self.match(TeradataParser.MAP)
                self.state = 1167
                self.match(TeradataParser.LT)
                self.state = 1168
                self.dataType()
                self.state = 1169
                self.match(TeradataParser.T__0)
                self.state = 1170
                self.dataType()
                self.state = 1171
                self.match(TeradataParser.GT)
                pass
            elif token in [TeradataParser.STRUCT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1173
                localctx.complx = self.match(TeradataParser.STRUCT)
                self.state = 1180
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TeradataParser.LT]:
                    self.state = 1174
                    self.match(TeradataParser.LT)
                    self.state = 1176
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TeradataParser.SELECT) | (1 << TeradataParser.FROM) | (1 << TeradataParser.ADD) | (1 << TeradataParser.AS) | (1 << TeradataParser.ALL) | (1 << TeradataParser.DISTINCT) | (1 << TeradataParser.WHERE) | (1 << TeradataParser.GROUP) | (1 << TeradataParser.BY) | (1 << TeradataParser.GROUPING) | (1 << TeradataParser.SETS) | (1 << TeradataParser.CUBE) | (1 << TeradataParser.ROLLUP) | (1 << TeradataParser.ORDER) | (1 << TeradataParser.HAVING) | (1 << TeradataParser.LIMIT) | (1 << TeradataParser.AT) | (1 << TeradataParser.OR) | (1 << TeradataParser.AND) | (1 << TeradataParser.IN) | (1 << TeradataParser.NOT) | (1 << TeradataParser.NO) | (1 << TeradataParser.EXISTS) | (1 << TeradataParser.BETWEEN) | (1 << TeradataParser.LIKE) | (1 << TeradataParser.RLIKE) | (1 << TeradataParser.IS) | (1 << TeradataParser.NULL) | (1 << TeradataParser.TRUE) | (1 << TeradataParser.FALSE) | (1 << TeradataParser.NULLS) | (1 << TeradataParser.ASC) | (1 << TeradataParser.DESC) | (1 << TeradataParser.FOR) | (1 << TeradataParser.BYTEINT) | (1 << TeradataParser.SMALLINT) | (1 << TeradataParser.INT) | (1 << TeradataParser.INTEGER) | (1 << TeradataParser.BIGINT) | (1 << TeradataParser.DECIMAL) | (1 << TeradataParser.DEC) | (1 << TeradataParser.NUMERIC) | (1 << TeradataParser.NUMBER) | (1 << TeradataParser.FLOAT) | (1 << TeradataParser.REAL) | (1 << TeradataParser.DOUBLE_PRECISION) | (1 << TeradataParser.DATE) | (1 << TeradataParser.DATETIME) | (1 << TeradataParser.TIMESTAMP) | (1 << TeradataParser.CHAR) | (1 << TeradataParser.CHARACTER) | (1 << TeradataParser.VARCHAR) | (1 << TeradataParser.CHARACTER_VARYING) | (1 << TeradataParser.CHAR_VARYING) | (1 << TeradataParser.LONG_VARCHAR) | (1 << TeradataParser.INTERVAL) | (1 << TeradataParser.CASE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TeradataParser.WHEN - 64)) | (1 << (TeradataParser.THEN - 64)) | (1 << (TeradataParser.ELSE - 64)) | (1 << (TeradataParser.END - 64)) | (1 << (TeradataParser.JOIN - 64)) | (1 << (TeradataParser.CROSS - 64)) | (1 << (TeradataParser.OUTER - 64)) | (1 << (TeradataParser.INNER - 64)) | (1 << (TeradataParser.LEFT - 64)) | (1 << (TeradataParser.SEMI - 64)) | (1 << (TeradataParser.RIGHT - 64)) | (1 << (TeradataParser.FULL - 64)) | (1 << (TeradataParser.NATURAL - 64)) | (1 << (TeradataParser.ON - 64)) | (1 << (TeradataParser.LATERAL - 64)) | (1 << (TeradataParser.WINDOW - 64)) | (1 << (TeradataParser.OVER - 64)) | (1 << (TeradataParser.PARTITION - 64)) | (1 << (TeradataParser.RANGE - 64)) | (1 << (TeradataParser.PRESERVE - 64)) | (1 << (TeradataParser.ROWS - 64)) | (1 << (TeradataParser.UNBOUNDED - 64)) | (1 << (TeradataParser.PRECEDING - 64)) | (1 << (TeradataParser.FOLLOWING - 64)) | (1 << (TeradataParser.CURRENT - 64)) | (1 << (TeradataParser.FIRST - 64)) | (1 << (TeradataParser.LAST - 64)) | (1 << (TeradataParser.ROW - 64)) | (1 << (TeradataParser.WITH - 64)) | (1 << (TeradataParser.VALUES - 64)) | (1 << (TeradataParser.CREATE - 64)) | (1 << (TeradataParser.TABLE - 64)) | (1 << (TeradataParser.VIEW - 64)) | (1 << (TeradataParser.REPLACE - 64)) | (1 << (TeradataParser.INSERT - 64)) | (1 << (TeradataParser.UPDATE - 64)) | (1 << (TeradataParser.DELETE - 64)) | (1 << (TeradataParser.INTO - 64)) | (1 << (TeradataParser.DESCRIBE - 64)) | (1 << (TeradataParser.EXPLAIN - 64)) | (1 << (TeradataParser.FORMAT - 64)) | (1 << (TeradataParser.LOGICAL - 64)) | (1 << (TeradataParser.CODEGEN - 64)) | (1 << (TeradataParser.CAST - 64)) | (1 << (TeradataParser.SHOW - 64)) | (1 << (TeradataParser.TABLES - 64)) | (1 << (TeradataParser.COLUMNS - 64)) | (1 << (TeradataParser.COLUMN - 64)) | (1 << (TeradataParser.USE - 64)) | (1 << (TeradataParser.PARTITIONS - 64)) | (1 << (TeradataParser.FUNCTIONS - 64)) | (1 << (TeradataParser.DROP - 64)) | (1 << (TeradataParser.UNION - 64)) | (1 << (TeradataParser.EXCEPT - 64)) | (1 << (TeradataParser.SETMINUS - 64)) | (1 << (TeradataParser.INTERSECT - 64)) | (1 << (TeradataParser.TO - 64)) | (1 << (TeradataParser.TABLESAMPLE - 64)) | (1 << (TeradataParser.STRATIFY - 64)) | (1 << (TeradataParser.ALTER - 64)) | (1 << (TeradataParser.RENAME - 64)) | (1 << (TeradataParser.ARRAY - 64)) | (1 << (TeradataParser.MAP - 64)) | (1 << (TeradataParser.STRUCT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (TeradataParser.COMMENT - 128)) | (1 << (TeradataParser.MULTISET - 128)) | (1 << (TeradataParser.SET - 128)) | (1 << (TeradataParser.RESET - 128)) | (1 << (TeradataParser.DATA - 128)) | (1 << (TeradataParser.START - 128)) | (1 << (TeradataParser.TRANSACTION - 128)) | (1 << (TeradataParser.COMMIT - 128)) | (1 << (TeradataParser.ROLLBACK - 128)) | (1 << (TeradataParser.MACRO - 128)) | (1 << (TeradataParser.IF - 128)) | (1 << (TeradataParser.PERCENTLIT - 128)) | (1 << (TeradataParser.BUCKET - 128)) | (1 << (TeradataParser.OUT - 128)) | (1 << (TeradataParser.OF - 128)) | (1 << (TeradataParser.SORT - 128)) | (1 << (TeradataParser.CLUSTER - 128)) | (1 << (TeradataParser.DISTRIBUTE - 128)) | (1 << (TeradataParser.OVERWRITE - 128)) | (1 << (TeradataParser.TRANSFORM - 128)) | (1 << (TeradataParser.REDUCE - 128)) | (1 << (TeradataParser.USING - 128)) | (1 << (TeradataParser.SERDE - 128)) | (1 << (TeradataParser.SERDEPROPERTIES - 128)) | (1 << (TeradataParser.RECORDREADER - 128)) | (1 << (TeradataParser.RECORDWRITER - 128)) | (1 << (TeradataParser.DELIMITED - 128)) | (1 << (TeradataParser.FIELDS - 128)) | (1 << (TeradataParser.TERMINATED - 128)) | (1 << (TeradataParser.COLLECTION - 128)) | (1 << (TeradataParser.ITEMS - 128)) | (1 << (TeradataParser.KEYS - 128)) | (1 << (TeradataParser.ESCAPED - 128)) | (1 << (TeradataParser.LINES - 128)) | (1 << (TeradataParser.SEPARATED - 128)) | (1 << (TeradataParser.FUNCTION - 128)) | (1 << (TeradataParser.EXTENDED - 128)) | (1 << (TeradataParser.REFRESH - 128)) | (1 << (TeradataParser.CLEAR - 128)) | (1 << (TeradataParser.CACHE - 128)) | (1 << (TeradataParser.UNCACHE - 128)) | (1 << (TeradataParser.LAZY - 128)) | (1 << (TeradataParser.FORMATTED - 128)) | (1 << (TeradataParser.TEMPORARY - 128)) | (1 << (TeradataParser.GLOBAL - 128)) | (1 << (TeradataParser.VOLATILE - 128)) | (1 << (TeradataParser.OPTIONS - 128)) | (1 << (TeradataParser.UNSET - 128)) | (1 << (TeradataParser.TBLPROPERTIES - 128)) | (1 << (TeradataParser.DBPROPERTIES - 128)) | (1 << (TeradataParser.BUCKETS - 128)) | (1 << (TeradataParser.SKEWED - 128)) | (1 << (TeradataParser.STORED - 128)) | (1 << (TeradataParser.DIRECTORIES - 128)) | (1 << (TeradataParser.LOCATION - 128)) | (1 << (TeradataParser.EXCHANGE - 128)) | (1 << (TeradataParser.ARCHIVE - 128)) | (1 << (TeradataParser.UNARCHIVE - 128)) | (1 << (TeradataParser.FILEFORMAT - 128)) | (1 << (TeradataParser.TOUCH - 128)) | (1 << (TeradataParser.COMPACT - 128)) | (1 << (TeradataParser.CONCATENATE - 128)) | (1 << (TeradataParser.CHANGE - 128)) | (1 << (TeradataParser.CASCADE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (TeradataParser.RESTRICT - 192)) | (1 << (TeradataParser.CLUSTERED - 192)) | (1 << (TeradataParser.SORTED - 192)) | (1 << (TeradataParser.PURGE - 192)) | (1 << (TeradataParser.INPUTFORMAT - 192)) | (1 << (TeradataParser.OUTPUTFORMAT - 192)) | (1 << (TeradataParser.DATABASE - 192)) | (1 << (TeradataParser.DATABASES - 192)) | (1 << (TeradataParser.DFS - 192)) | (1 << (TeradataParser.TRUNCATE - 192)) | (1 << (TeradataParser.ANALYZE - 192)) | (1 << (TeradataParser.COMPUTE - 192)) | (1 << (TeradataParser.LIST - 192)) | (1 << (TeradataParser.STATISTICS - 192)) | (1 << (TeradataParser.PARTITIONED - 192)) | (1 << (TeradataParser.EXTERNAL - 192)) | (1 << (TeradataParser.DEFINED - 192)) | (1 << (TeradataParser.REVOKE - 192)) | (1 << (TeradataParser.GRANT - 192)) | (1 << (TeradataParser.LOCK - 192)) | (1 << (TeradataParser.UNLOCK - 192)) | (1 << (TeradataParser.MSCK - 192)) | (1 << (TeradataParser.REPAIR - 192)) | (1 << (TeradataParser.RECOVER - 192)) | (1 << (TeradataParser.EXPORT - 192)) | (1 << (TeradataParser.IMPORT - 192)) | (1 << (TeradataParser.LOAD - 192)) | (1 << (TeradataParser.ROLE - 192)) | (1 << (TeradataParser.ROLES - 192)) | (1 << (TeradataParser.COMPACTIONS - 192)) | (1 << (TeradataParser.PRINCIPALS - 192)) | (1 << (TeradataParser.TRANSACTIONS - 192)) | (1 << (TeradataParser.INDEX - 192)) | (1 << (TeradataParser.INDEXES - 192)) | (1 << (TeradataParser.UNIQUE - 192)) | (1 << (TeradataParser.PRIMARY - 192)) | (1 << (TeradataParser.LOCKS - 192)) | (1 << (TeradataParser.OPTION - 192)) | (1 << (TeradataParser.ANTI - 192)) | (1 << (TeradataParser.LOCAL - 192)) | (1 << (TeradataParser.INPATH - 192)) | (1 << (TeradataParser.CURRENT_DATE - 192)) | (1 << (TeradataParser.CURRENT_TIMESTAMP - 192)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (TeradataParser.DOLLAR - 258)) | (1 << (TeradataParser.DIV - 258)) | (1 << (TeradataParser.IDENTIFIER - 258)) | (1 << (TeradataParser.BACKQUOTED_IDENTIFIER - 258)))) != 0):
                        self.state = 1175
                        self.colTypeList()


                    self.state = 1178
                    self.match(TeradataParser.GT)
                    pass
                elif token in [TeradataParser.NEQ]:
                    self.state = 1179
                    self.match(TeradataParser.NEQ)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ColTypeContext,i)


        def getRuleIndex(self):
            return TeradataParser.RULE_colTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColTypeList" ):
                listener.enterColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColTypeList" ):
                listener.exitColTypeList(self)




    def colTypeList(self):

        localctx = TeradataParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_colTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.colType()
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TeradataParser.T__0:
                self.state = 1185
                self.match(TeradataParser.T__0)
                self.state = 1186
                self.colType()
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(TeradataParser.DataTypeContext,0)


        def REFERENCE(self):
            return self.getToken(TeradataParser.REFERENCE, 0)

        def COMMENT(self):
            return self.getToken(TeradataParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(TeradataParser.STRING, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_colType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColType" ):
                listener.enterColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColType" ):
                listener.exitColType(self)




    def colType(self):

        localctx = TeradataParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_colType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.identifier()
            self.state = 1194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.REFERENCE:
                self.state = 1193
                self.match(TeradataParser.REFERENCE)


            self.state = 1196
            self.dataType()
            self.state = 1199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TeradataParser.COMMENT:
                self.state = 1197
                self.match(TeradataParser.COMMENT)
                self.state = 1198
                self.match(TeradataParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(TeradataParser.WHEN, 0)

        def THEN(self):
            return self.getToken(TeradataParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ExpressionContext,i)


        def getRuleIndex(self):
            return TeradataParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)




    def whenClause(self):

        localctx = TeradataParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            self.match(TeradataParser.WHEN)
            self.state = 1202
            localctx.condition = self.expression()
            self.state = 1203
            self.match(TeradataParser.THEN)
            self.state = 1204
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(TeradataParser.WINDOW, 0)

        def namedWindow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(TeradataParser.NamedWindowContext,i)


        def getRuleIndex(self):
            return TeradataParser.RULE_windows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindows" ):
                listener.enterWindows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindows" ):
                listener.exitWindows(self)




    def windows(self):

        localctx = TeradataParser.WindowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_windows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            self.match(TeradataParser.WINDOW)
            self.state = 1207
            self.namedWindow()
            self.state = 1212
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1208
                    self.match(TeradataParser.T__0)
                    self.state = 1209
                    self.namedWindow() 
                self.state = 1214
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedWindowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(TeradataParser.AS, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(TeradataParser.WindowSpecContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_namedWindow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedWindow" ):
                listener.enterNamedWindow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedWindow" ):
                listener.exitNamedWindow(self)




    def namedWindow(self):

        localctx = TeradataParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            self.identifier()
            self.state = 1216
            self.match(TeradataParser.AS)
            self.state = 1217
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataParser.RULE_windowSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WindowRefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.WindowSpecContext
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(TeradataParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowRef" ):
                listener.enterWindowRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowRef" ):
                listener.exitWindowRef(self)


    class WindowDefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.WindowSpecContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def CLUSTER(self):
            return self.getToken(TeradataParser.CLUSTER, 0)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataParser.BY)
            else:
                return self.getToken(TeradataParser.BY, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TeradataParser.ExpressionContext,i)

        def windowFrame(self):
            return self.getTypedRuleContext(TeradataParser.WindowFrameContext,0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.SortItemContext)
            else:
                return self.getTypedRuleContext(TeradataParser.SortItemContext,i)

        def PARTITION(self):
            return self.getToken(TeradataParser.PARTITION, 0)
        def DISTRIBUTE(self):
            return self.getToken(TeradataParser.DISTRIBUTE, 0)
        def ORDER(self):
            return self.getToken(TeradataParser.ORDER, 0)
        def SORT(self):
            return self.getToken(TeradataParser.SORT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDef" ):
                listener.enterWindowDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDef" ):
                listener.exitWindowDef(self)



    def windowSpec(self):

        localctx = TeradataParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_windowSpec)
        self._la = 0 # Token type
        try:
            self.state = 1261
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TeradataParser.SELECT, TeradataParser.FROM, TeradataParser.ADD, TeradataParser.AS, TeradataParser.ALL, TeradataParser.DISTINCT, TeradataParser.WHERE, TeradataParser.GROUP, TeradataParser.BY, TeradataParser.GROUPING, TeradataParser.SETS, TeradataParser.CUBE, TeradataParser.ROLLUP, TeradataParser.ORDER, TeradataParser.HAVING, TeradataParser.LIMIT, TeradataParser.AT, TeradataParser.OR, TeradataParser.AND, TeradataParser.IN, TeradataParser.NOT, TeradataParser.NO, TeradataParser.EXISTS, TeradataParser.BETWEEN, TeradataParser.LIKE, TeradataParser.RLIKE, TeradataParser.IS, TeradataParser.NULL, TeradataParser.TRUE, TeradataParser.FALSE, TeradataParser.NULLS, TeradataParser.ASC, TeradataParser.DESC, TeradataParser.FOR, TeradataParser.BYTEINT, TeradataParser.SMALLINT, TeradataParser.INT, TeradataParser.INTEGER, TeradataParser.BIGINT, TeradataParser.DECIMAL, TeradataParser.DEC, TeradataParser.NUMERIC, TeradataParser.NUMBER, TeradataParser.FLOAT, TeradataParser.REAL, TeradataParser.DOUBLE_PRECISION, TeradataParser.DATE, TeradataParser.DATETIME, TeradataParser.TIMESTAMP, TeradataParser.CHAR, TeradataParser.CHARACTER, TeradataParser.VARCHAR, TeradataParser.CHARACTER_VARYING, TeradataParser.CHAR_VARYING, TeradataParser.LONG_VARCHAR, TeradataParser.INTERVAL, TeradataParser.CASE, TeradataParser.WHEN, TeradataParser.THEN, TeradataParser.ELSE, TeradataParser.END, TeradataParser.JOIN, TeradataParser.CROSS, TeradataParser.OUTER, TeradataParser.INNER, TeradataParser.LEFT, TeradataParser.SEMI, TeradataParser.RIGHT, TeradataParser.FULL, TeradataParser.NATURAL, TeradataParser.ON, TeradataParser.LATERAL, TeradataParser.WINDOW, TeradataParser.OVER, TeradataParser.PARTITION, TeradataParser.RANGE, TeradataParser.PRESERVE, TeradataParser.ROWS, TeradataParser.UNBOUNDED, TeradataParser.PRECEDING, TeradataParser.FOLLOWING, TeradataParser.CURRENT, TeradataParser.FIRST, TeradataParser.LAST, TeradataParser.ROW, TeradataParser.WITH, TeradataParser.VALUES, TeradataParser.CREATE, TeradataParser.TABLE, TeradataParser.VIEW, TeradataParser.REPLACE, TeradataParser.INSERT, TeradataParser.UPDATE, TeradataParser.DELETE, TeradataParser.INTO, TeradataParser.DESCRIBE, TeradataParser.EXPLAIN, TeradataParser.FORMAT, TeradataParser.LOGICAL, TeradataParser.CODEGEN, TeradataParser.CAST, TeradataParser.SHOW, TeradataParser.TABLES, TeradataParser.COLUMNS, TeradataParser.COLUMN, TeradataParser.USE, TeradataParser.PARTITIONS, TeradataParser.FUNCTIONS, TeradataParser.DROP, TeradataParser.UNION, TeradataParser.EXCEPT, TeradataParser.SETMINUS, TeradataParser.INTERSECT, TeradataParser.TO, TeradataParser.TABLESAMPLE, TeradataParser.STRATIFY, TeradataParser.ALTER, TeradataParser.RENAME, TeradataParser.ARRAY, TeradataParser.MAP, TeradataParser.STRUCT, TeradataParser.COMMENT, TeradataParser.MULTISET, TeradataParser.SET, TeradataParser.RESET, TeradataParser.DATA, TeradataParser.START, TeradataParser.TRANSACTION, TeradataParser.COMMIT, TeradataParser.ROLLBACK, TeradataParser.MACRO, TeradataParser.IF, TeradataParser.PERCENTLIT, TeradataParser.BUCKET, TeradataParser.OUT, TeradataParser.OF, TeradataParser.SORT, TeradataParser.CLUSTER, TeradataParser.DISTRIBUTE, TeradataParser.OVERWRITE, TeradataParser.TRANSFORM, TeradataParser.REDUCE, TeradataParser.USING, TeradataParser.SERDE, TeradataParser.SERDEPROPERTIES, TeradataParser.RECORDREADER, TeradataParser.RECORDWRITER, TeradataParser.DELIMITED, TeradataParser.FIELDS, TeradataParser.TERMINATED, TeradataParser.COLLECTION, TeradataParser.ITEMS, TeradataParser.KEYS, TeradataParser.ESCAPED, TeradataParser.LINES, TeradataParser.SEPARATED, TeradataParser.FUNCTION, TeradataParser.EXTENDED, TeradataParser.REFRESH, TeradataParser.CLEAR, TeradataParser.CACHE, TeradataParser.UNCACHE, TeradataParser.LAZY, TeradataParser.FORMATTED, TeradataParser.TEMPORARY, TeradataParser.GLOBAL, TeradataParser.VOLATILE, TeradataParser.OPTIONS, TeradataParser.UNSET, TeradataParser.TBLPROPERTIES, TeradataParser.DBPROPERTIES, TeradataParser.BUCKETS, TeradataParser.SKEWED, TeradataParser.STORED, TeradataParser.DIRECTORIES, TeradataParser.LOCATION, TeradataParser.EXCHANGE, TeradataParser.ARCHIVE, TeradataParser.UNARCHIVE, TeradataParser.FILEFORMAT, TeradataParser.TOUCH, TeradataParser.COMPACT, TeradataParser.CONCATENATE, TeradataParser.CHANGE, TeradataParser.CASCADE, TeradataParser.RESTRICT, TeradataParser.CLUSTERED, TeradataParser.SORTED, TeradataParser.PURGE, TeradataParser.INPUTFORMAT, TeradataParser.OUTPUTFORMAT, TeradataParser.DATABASE, TeradataParser.DATABASES, TeradataParser.DFS, TeradataParser.TRUNCATE, TeradataParser.ANALYZE, TeradataParser.COMPUTE, TeradataParser.LIST, TeradataParser.STATISTICS, TeradataParser.PARTITIONED, TeradataParser.EXTERNAL, TeradataParser.DEFINED, TeradataParser.REVOKE, TeradataParser.GRANT, TeradataParser.LOCK, TeradataParser.UNLOCK, TeradataParser.MSCK, TeradataParser.REPAIR, TeradataParser.RECOVER, TeradataParser.EXPORT, TeradataParser.IMPORT, TeradataParser.LOAD, TeradataParser.ROLE, TeradataParser.ROLES, TeradataParser.COMPACTIONS, TeradataParser.PRINCIPALS, TeradataParser.TRANSACTIONS, TeradataParser.INDEX, TeradataParser.INDEXES, TeradataParser.UNIQUE, TeradataParser.PRIMARY, TeradataParser.LOCKS, TeradataParser.OPTION, TeradataParser.ANTI, TeradataParser.LOCAL, TeradataParser.INPATH, TeradataParser.CURRENT_DATE, TeradataParser.CURRENT_TIMESTAMP, TeradataParser.DOLLAR, TeradataParser.DIV, TeradataParser.IDENTIFIER, TeradataParser.BACKQUOTED_IDENTIFIER]:
                localctx = TeradataParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1219
                localctx.name = self.identifier()
                pass
            elif token in [TeradataParser.T__1]:
                localctx = TeradataParser.WindowDefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1220
                self.match(TeradataParser.T__1)
                self.state = 1255
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TeradataParser.CLUSTER]:
                    self.state = 1221
                    self.match(TeradataParser.CLUSTER)
                    self.state = 1222
                    self.match(TeradataParser.BY)
                    self.state = 1223
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 1228
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==TeradataParser.T__0:
                        self.state = 1224
                        self.match(TeradataParser.T__0)
                        self.state = 1225
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 1230
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [TeradataParser.T__2, TeradataParser.ORDER, TeradataParser.PARTITION, TeradataParser.RANGE, TeradataParser.ROWS, TeradataParser.SORT, TeradataParser.DISTRIBUTE]:
                    self.state = 1241
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TeradataParser.PARTITION or _la==TeradataParser.DISTRIBUTE:
                        self.state = 1231
                        _la = self._input.LA(1)
                        if not(_la==TeradataParser.PARTITION or _la==TeradataParser.DISTRIBUTE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1232
                        self.match(TeradataParser.BY)
                        self.state = 1233
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 1238
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==TeradataParser.T__0:
                            self.state = 1234
                            self.match(TeradataParser.T__0)
                            self.state = 1235
                            localctx._expression = self.expression()
                            localctx.partition.append(localctx._expression)
                            self.state = 1240
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 1253
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TeradataParser.ORDER or _la==TeradataParser.SORT:
                        self.state = 1243
                        _la = self._input.LA(1)
                        if not(_la==TeradataParser.ORDER or _la==TeradataParser.SORT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1244
                        self.match(TeradataParser.BY)
                        self.state = 1245
                        self.sortItem()
                        self.state = 1250
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==TeradataParser.T__0:
                            self.state = 1246
                            self.match(TeradataParser.T__0)
                            self.state = 1247
                            self.sortItem()
                            self.state = 1252
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.RANGE or _la==TeradataParser.ROWS:
                    self.state = 1257
                    self.windowFrame()


                self.state = 1260
                self.match(TeradataParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(TeradataParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(TeradataParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(TeradataParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(TeradataParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(TeradataParser.AND, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)




    def windowFrame(self):

        localctx = TeradataParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_windowFrame)
        try:
            self.state = 1279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1263
                localctx.frameType = self.match(TeradataParser.RANGE)
                self.state = 1264
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1265
                localctx.frameType = self.match(TeradataParser.ROWS)
                self.state = 1266
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1267
                localctx.frameType = self.match(TeradataParser.RANGE)
                self.state = 1268
                self.match(TeradataParser.BETWEEN)
                self.state = 1269
                localctx.start = self.frameBound()
                self.state = 1270
                self.match(TeradataParser.AND)
                self.state = 1271
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1273
                localctx.frameType = self.match(TeradataParser.ROWS)
                self.state = 1274
                self.match(TeradataParser.BETWEEN)
                self.state = 1275
                localctx.start = self.frameBound()
                self.state = 1276
                self.match(TeradataParser.AND)
                self.state = 1277
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boundType = None # Token

        def UNBOUNDED(self):
            return self.getToken(TeradataParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(TeradataParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(TeradataParser.FOLLOWING, 0)

        def ROW(self):
            return self.getToken(TeradataParser.ROW, 0)

        def CURRENT(self):
            return self.getToken(TeradataParser.CURRENT, 0)

        def expression(self):
            return self.getTypedRuleContext(TeradataParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_frameBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameBound" ):
                listener.enterFrameBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameBound" ):
                listener.exitFrameBound(self)




    def frameBound(self):

        localctx = TeradataParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 1288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1281
                self.match(TeradataParser.UNBOUNDED)
                self.state = 1282
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==TeradataParser.PRECEDING or _la==TeradataParser.FOLLOWING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1283
                localctx.boundType = self.match(TeradataParser.CURRENT)
                self.state = 1284
                self.match(TeradataParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1285
                self.expression()
                self.state = 1286
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==TeradataParser.PRECEDING or _la==TeradataParser.FOLLOWING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TeradataParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataParser.DOT)
            else:
                return self.getToken(TeradataParser.DOT, i)

        def getRuleIndex(self):
            return TeradataParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = TeradataParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.identifier()
            self.state = 1295
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1291
                    self.match(TeradataParser.DOT)
                    self.state = 1292
                    self.identifier() 
                self.state = 1297
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(TeradataParser.StrictIdentifierContext,0)


        def ANTI(self):
            return self.getToken(TeradataParser.ANTI, 0)

        def FULL(self):
            return self.getToken(TeradataParser.FULL, 0)

        def INNER(self):
            return self.getToken(TeradataParser.INNER, 0)

        def LEFT(self):
            return self.getToken(TeradataParser.LEFT, 0)

        def SEMI(self):
            return self.getToken(TeradataParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(TeradataParser.RIGHT, 0)

        def NATURAL(self):
            return self.getToken(TeradataParser.NATURAL, 0)

        def JOIN(self):
            return self.getToken(TeradataParser.JOIN, 0)

        def CROSS(self):
            return self.getToken(TeradataParser.CROSS, 0)

        def ON(self):
            return self.getToken(TeradataParser.ON, 0)

        def UNION(self):
            return self.getToken(TeradataParser.UNION, 0)

        def INTERSECT(self):
            return self.getToken(TeradataParser.INTERSECT, 0)

        def EXCEPT(self):
            return self.getToken(TeradataParser.EXCEPT, 0)

        def SETMINUS(self):
            return self.getToken(TeradataParser.SETMINUS, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = TeradataParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_identifier)
        try:
            self.state = 1313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TeradataParser.SELECT, TeradataParser.FROM, TeradataParser.ADD, TeradataParser.AS, TeradataParser.ALL, TeradataParser.DISTINCT, TeradataParser.WHERE, TeradataParser.GROUP, TeradataParser.BY, TeradataParser.GROUPING, TeradataParser.SETS, TeradataParser.CUBE, TeradataParser.ROLLUP, TeradataParser.ORDER, TeradataParser.HAVING, TeradataParser.LIMIT, TeradataParser.AT, TeradataParser.OR, TeradataParser.AND, TeradataParser.IN, TeradataParser.NOT, TeradataParser.NO, TeradataParser.EXISTS, TeradataParser.BETWEEN, TeradataParser.LIKE, TeradataParser.RLIKE, TeradataParser.IS, TeradataParser.NULL, TeradataParser.TRUE, TeradataParser.FALSE, TeradataParser.NULLS, TeradataParser.ASC, TeradataParser.DESC, TeradataParser.FOR, TeradataParser.BYTEINT, TeradataParser.SMALLINT, TeradataParser.INT, TeradataParser.INTEGER, TeradataParser.BIGINT, TeradataParser.DECIMAL, TeradataParser.DEC, TeradataParser.NUMERIC, TeradataParser.NUMBER, TeradataParser.FLOAT, TeradataParser.REAL, TeradataParser.DOUBLE_PRECISION, TeradataParser.DATE, TeradataParser.DATETIME, TeradataParser.TIMESTAMP, TeradataParser.CHAR, TeradataParser.CHARACTER, TeradataParser.VARCHAR, TeradataParser.CHARACTER_VARYING, TeradataParser.CHAR_VARYING, TeradataParser.LONG_VARCHAR, TeradataParser.INTERVAL, TeradataParser.CASE, TeradataParser.WHEN, TeradataParser.THEN, TeradataParser.ELSE, TeradataParser.END, TeradataParser.OUTER, TeradataParser.LATERAL, TeradataParser.WINDOW, TeradataParser.OVER, TeradataParser.PARTITION, TeradataParser.RANGE, TeradataParser.PRESERVE, TeradataParser.ROWS, TeradataParser.UNBOUNDED, TeradataParser.PRECEDING, TeradataParser.FOLLOWING, TeradataParser.CURRENT, TeradataParser.FIRST, TeradataParser.LAST, TeradataParser.ROW, TeradataParser.WITH, TeradataParser.VALUES, TeradataParser.CREATE, TeradataParser.TABLE, TeradataParser.VIEW, TeradataParser.REPLACE, TeradataParser.INSERT, TeradataParser.UPDATE, TeradataParser.DELETE, TeradataParser.INTO, TeradataParser.DESCRIBE, TeradataParser.EXPLAIN, TeradataParser.FORMAT, TeradataParser.LOGICAL, TeradataParser.CODEGEN, TeradataParser.CAST, TeradataParser.SHOW, TeradataParser.TABLES, TeradataParser.COLUMNS, TeradataParser.COLUMN, TeradataParser.USE, TeradataParser.PARTITIONS, TeradataParser.FUNCTIONS, TeradataParser.DROP, TeradataParser.TO, TeradataParser.TABLESAMPLE, TeradataParser.STRATIFY, TeradataParser.ALTER, TeradataParser.RENAME, TeradataParser.ARRAY, TeradataParser.MAP, TeradataParser.STRUCT, TeradataParser.COMMENT, TeradataParser.MULTISET, TeradataParser.SET, TeradataParser.RESET, TeradataParser.DATA, TeradataParser.START, TeradataParser.TRANSACTION, TeradataParser.COMMIT, TeradataParser.ROLLBACK, TeradataParser.MACRO, TeradataParser.IF, TeradataParser.PERCENTLIT, TeradataParser.BUCKET, TeradataParser.OUT, TeradataParser.OF, TeradataParser.SORT, TeradataParser.CLUSTER, TeradataParser.DISTRIBUTE, TeradataParser.OVERWRITE, TeradataParser.TRANSFORM, TeradataParser.REDUCE, TeradataParser.USING, TeradataParser.SERDE, TeradataParser.SERDEPROPERTIES, TeradataParser.RECORDREADER, TeradataParser.RECORDWRITER, TeradataParser.DELIMITED, TeradataParser.FIELDS, TeradataParser.TERMINATED, TeradataParser.COLLECTION, TeradataParser.ITEMS, TeradataParser.KEYS, TeradataParser.ESCAPED, TeradataParser.LINES, TeradataParser.SEPARATED, TeradataParser.FUNCTION, TeradataParser.EXTENDED, TeradataParser.REFRESH, TeradataParser.CLEAR, TeradataParser.CACHE, TeradataParser.UNCACHE, TeradataParser.LAZY, TeradataParser.FORMATTED, TeradataParser.TEMPORARY, TeradataParser.GLOBAL, TeradataParser.VOLATILE, TeradataParser.OPTIONS, TeradataParser.UNSET, TeradataParser.TBLPROPERTIES, TeradataParser.DBPROPERTIES, TeradataParser.BUCKETS, TeradataParser.SKEWED, TeradataParser.STORED, TeradataParser.DIRECTORIES, TeradataParser.LOCATION, TeradataParser.EXCHANGE, TeradataParser.ARCHIVE, TeradataParser.UNARCHIVE, TeradataParser.FILEFORMAT, TeradataParser.TOUCH, TeradataParser.COMPACT, TeradataParser.CONCATENATE, TeradataParser.CHANGE, TeradataParser.CASCADE, TeradataParser.RESTRICT, TeradataParser.CLUSTERED, TeradataParser.SORTED, TeradataParser.PURGE, TeradataParser.INPUTFORMAT, TeradataParser.OUTPUTFORMAT, TeradataParser.DATABASE, TeradataParser.DATABASES, TeradataParser.DFS, TeradataParser.TRUNCATE, TeradataParser.ANALYZE, TeradataParser.COMPUTE, TeradataParser.LIST, TeradataParser.STATISTICS, TeradataParser.PARTITIONED, TeradataParser.EXTERNAL, TeradataParser.DEFINED, TeradataParser.REVOKE, TeradataParser.GRANT, TeradataParser.LOCK, TeradataParser.UNLOCK, TeradataParser.MSCK, TeradataParser.REPAIR, TeradataParser.RECOVER, TeradataParser.EXPORT, TeradataParser.IMPORT, TeradataParser.LOAD, TeradataParser.ROLE, TeradataParser.ROLES, TeradataParser.COMPACTIONS, TeradataParser.PRINCIPALS, TeradataParser.TRANSACTIONS, TeradataParser.INDEX, TeradataParser.INDEXES, TeradataParser.UNIQUE, TeradataParser.PRIMARY, TeradataParser.LOCKS, TeradataParser.OPTION, TeradataParser.LOCAL, TeradataParser.INPATH, TeradataParser.CURRENT_DATE, TeradataParser.CURRENT_TIMESTAMP, TeradataParser.DOLLAR, TeradataParser.DIV, TeradataParser.IDENTIFIER, TeradataParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1298
                self.strictIdentifier()
                pass
            elif token in [TeradataParser.ANTI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1299
                self.match(TeradataParser.ANTI)
                pass
            elif token in [TeradataParser.FULL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1300
                self.match(TeradataParser.FULL)
                pass
            elif token in [TeradataParser.INNER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1301
                self.match(TeradataParser.INNER)
                pass
            elif token in [TeradataParser.LEFT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1302
                self.match(TeradataParser.LEFT)
                pass
            elif token in [TeradataParser.SEMI]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1303
                self.match(TeradataParser.SEMI)
                pass
            elif token in [TeradataParser.RIGHT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1304
                self.match(TeradataParser.RIGHT)
                pass
            elif token in [TeradataParser.NATURAL]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1305
                self.match(TeradataParser.NATURAL)
                pass
            elif token in [TeradataParser.JOIN]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1306
                self.match(TeradataParser.JOIN)
                pass
            elif token in [TeradataParser.CROSS]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1307
                self.match(TeradataParser.CROSS)
                pass
            elif token in [TeradataParser.ON]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1308
                self.match(TeradataParser.ON)
                pass
            elif token in [TeradataParser.UNION]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1309
                self.match(TeradataParser.UNION)
                pass
            elif token in [TeradataParser.INTERSECT]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1310
                self.match(TeradataParser.INTERSECT)
                pass
            elif token in [TeradataParser.EXCEPT]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1311
                self.match(TeradataParser.EXCEPT)
                pass
            elif token in [TeradataParser.SETMINUS]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1312
                self.match(TeradataParser.SETMINUS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # Token

        def IDENTIFIER(self):
            return self.getToken(TeradataParser.IDENTIFIER, 0)

        def DOLLAR(self):
            return self.getToken(TeradataParser.DOLLAR, 0)

        def quotedIdentifier(self):
            return self.getTypedRuleContext(TeradataParser.QuotedIdentifierContext,0)


        def nonReserved(self):
            return self.getTypedRuleContext(TeradataParser.NonReservedContext,0)


        def getRuleIndex(self):
            return TeradataParser.RULE_strictIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrictIdentifier" ):
                listener.enterStrictIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrictIdentifier" ):
                listener.exitStrictIdentifier(self)




    def strictIdentifier(self):

        localctx = TeradataParser.StrictIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_strictIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 1321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TeradataParser.DOLLAR, TeradataParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.DOLLAR:
                    self.state = 1315
                    self.match(TeradataParser.DOLLAR)


                self.state = 1318
                localctx.key = self.match(TeradataParser.IDENTIFIER)
                pass
            elif token in [TeradataParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1319
                self.quotedIdentifier()
                pass
            elif token in [TeradataParser.SELECT, TeradataParser.FROM, TeradataParser.ADD, TeradataParser.AS, TeradataParser.ALL, TeradataParser.DISTINCT, TeradataParser.WHERE, TeradataParser.GROUP, TeradataParser.BY, TeradataParser.GROUPING, TeradataParser.SETS, TeradataParser.CUBE, TeradataParser.ROLLUP, TeradataParser.ORDER, TeradataParser.HAVING, TeradataParser.LIMIT, TeradataParser.AT, TeradataParser.OR, TeradataParser.AND, TeradataParser.IN, TeradataParser.NOT, TeradataParser.NO, TeradataParser.EXISTS, TeradataParser.BETWEEN, TeradataParser.LIKE, TeradataParser.RLIKE, TeradataParser.IS, TeradataParser.NULL, TeradataParser.TRUE, TeradataParser.FALSE, TeradataParser.NULLS, TeradataParser.ASC, TeradataParser.DESC, TeradataParser.FOR, TeradataParser.BYTEINT, TeradataParser.SMALLINT, TeradataParser.INT, TeradataParser.INTEGER, TeradataParser.BIGINT, TeradataParser.DECIMAL, TeradataParser.DEC, TeradataParser.NUMERIC, TeradataParser.NUMBER, TeradataParser.FLOAT, TeradataParser.REAL, TeradataParser.DOUBLE_PRECISION, TeradataParser.DATE, TeradataParser.DATETIME, TeradataParser.TIMESTAMP, TeradataParser.CHAR, TeradataParser.CHARACTER, TeradataParser.VARCHAR, TeradataParser.CHARACTER_VARYING, TeradataParser.CHAR_VARYING, TeradataParser.LONG_VARCHAR, TeradataParser.INTERVAL, TeradataParser.CASE, TeradataParser.WHEN, TeradataParser.THEN, TeradataParser.ELSE, TeradataParser.END, TeradataParser.OUTER, TeradataParser.LATERAL, TeradataParser.WINDOW, TeradataParser.OVER, TeradataParser.PARTITION, TeradataParser.RANGE, TeradataParser.PRESERVE, TeradataParser.ROWS, TeradataParser.UNBOUNDED, TeradataParser.PRECEDING, TeradataParser.FOLLOWING, TeradataParser.CURRENT, TeradataParser.FIRST, TeradataParser.LAST, TeradataParser.ROW, TeradataParser.WITH, TeradataParser.VALUES, TeradataParser.CREATE, TeradataParser.TABLE, TeradataParser.VIEW, TeradataParser.REPLACE, TeradataParser.INSERT, TeradataParser.UPDATE, TeradataParser.DELETE, TeradataParser.INTO, TeradataParser.DESCRIBE, TeradataParser.EXPLAIN, TeradataParser.FORMAT, TeradataParser.LOGICAL, TeradataParser.CODEGEN, TeradataParser.CAST, TeradataParser.SHOW, TeradataParser.TABLES, TeradataParser.COLUMNS, TeradataParser.COLUMN, TeradataParser.USE, TeradataParser.PARTITIONS, TeradataParser.FUNCTIONS, TeradataParser.DROP, TeradataParser.TO, TeradataParser.TABLESAMPLE, TeradataParser.STRATIFY, TeradataParser.ALTER, TeradataParser.RENAME, TeradataParser.ARRAY, TeradataParser.MAP, TeradataParser.STRUCT, TeradataParser.COMMENT, TeradataParser.MULTISET, TeradataParser.SET, TeradataParser.RESET, TeradataParser.DATA, TeradataParser.START, TeradataParser.TRANSACTION, TeradataParser.COMMIT, TeradataParser.ROLLBACK, TeradataParser.MACRO, TeradataParser.IF, TeradataParser.PERCENTLIT, TeradataParser.BUCKET, TeradataParser.OUT, TeradataParser.OF, TeradataParser.SORT, TeradataParser.CLUSTER, TeradataParser.DISTRIBUTE, TeradataParser.OVERWRITE, TeradataParser.TRANSFORM, TeradataParser.REDUCE, TeradataParser.USING, TeradataParser.SERDE, TeradataParser.SERDEPROPERTIES, TeradataParser.RECORDREADER, TeradataParser.RECORDWRITER, TeradataParser.DELIMITED, TeradataParser.FIELDS, TeradataParser.TERMINATED, TeradataParser.COLLECTION, TeradataParser.ITEMS, TeradataParser.KEYS, TeradataParser.ESCAPED, TeradataParser.LINES, TeradataParser.SEPARATED, TeradataParser.FUNCTION, TeradataParser.EXTENDED, TeradataParser.REFRESH, TeradataParser.CLEAR, TeradataParser.CACHE, TeradataParser.UNCACHE, TeradataParser.LAZY, TeradataParser.FORMATTED, TeradataParser.TEMPORARY, TeradataParser.GLOBAL, TeradataParser.VOLATILE, TeradataParser.OPTIONS, TeradataParser.UNSET, TeradataParser.TBLPROPERTIES, TeradataParser.DBPROPERTIES, TeradataParser.BUCKETS, TeradataParser.SKEWED, TeradataParser.STORED, TeradataParser.DIRECTORIES, TeradataParser.LOCATION, TeradataParser.EXCHANGE, TeradataParser.ARCHIVE, TeradataParser.UNARCHIVE, TeradataParser.FILEFORMAT, TeradataParser.TOUCH, TeradataParser.COMPACT, TeradataParser.CONCATENATE, TeradataParser.CHANGE, TeradataParser.CASCADE, TeradataParser.RESTRICT, TeradataParser.CLUSTERED, TeradataParser.SORTED, TeradataParser.PURGE, TeradataParser.INPUTFORMAT, TeradataParser.OUTPUTFORMAT, TeradataParser.DATABASE, TeradataParser.DATABASES, TeradataParser.DFS, TeradataParser.TRUNCATE, TeradataParser.ANALYZE, TeradataParser.COMPUTE, TeradataParser.LIST, TeradataParser.STATISTICS, TeradataParser.PARTITIONED, TeradataParser.EXTERNAL, TeradataParser.DEFINED, TeradataParser.REVOKE, TeradataParser.GRANT, TeradataParser.LOCK, TeradataParser.UNLOCK, TeradataParser.MSCK, TeradataParser.REPAIR, TeradataParser.RECOVER, TeradataParser.EXPORT, TeradataParser.IMPORT, TeradataParser.LOAD, TeradataParser.ROLE, TeradataParser.ROLES, TeradataParser.COMPACTIONS, TeradataParser.PRINCIPALS, TeradataParser.TRANSACTIONS, TeradataParser.INDEX, TeradataParser.INDEXES, TeradataParser.UNIQUE, TeradataParser.PRIMARY, TeradataParser.LOCKS, TeradataParser.OPTION, TeradataParser.LOCAL, TeradataParser.INPATH, TeradataParser.CURRENT_DATE, TeradataParser.CURRENT_TIMESTAMP, TeradataParser.DIV]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1320
                self.nonReserved()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(TeradataParser.BACKQUOTED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_quotedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)




    def quotedIdentifier(self):

        localctx = TeradataParser.QuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_quotedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            self.match(TeradataParser.BACKQUOTED_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(TeradataParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(TeradataParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)


    class BigIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGINT_LITERAL(self):
            return self.getToken(TeradataParser.BIGINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(TeradataParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigIntLiteral" ):
                listener.enterBigIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigIntLiteral" ):
                listener.exitBigIntLiteral(self)


    class TinyIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TINYINT_LITERAL(self):
            return self.getToken(TeradataParser.TINYINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(TeradataParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTinyIntLiteral" ):
                listener.enterTinyIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTinyIntLiteral" ):
                listener.exitTinyIntLiteral(self)


    class BigDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGDECIMAL_LITERAL(self):
            return self.getToken(TeradataParser.BIGDECIMAL_LITERAL, 0)
        def MINUS(self):
            return self.getToken(TeradataParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigDecimalLiteral" ):
                listener.enterBigDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigDecimalLiteral" ):
                listener.exitBigDecimalLiteral(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_LITERAL(self):
            return self.getToken(TeradataParser.DOUBLE_LITERAL, 0)
        def MINUS(self):
            return self.getToken(TeradataParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleLiteral" ):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleLiteral" ):
                listener.exitDoubleLiteral(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(TeradataParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(TeradataParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)


    class SmallIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SMALLINT_LITERAL(self):
            return self.getToken(TeradataParser.SMALLINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(TeradataParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmallIntLiteral" ):
                listener.enterSmallIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmallIntLiteral" ):
                listener.exitSmallIntLiteral(self)


    class ScientificDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SCIENTIFIC_DECIMAL_VALUE(self):
            return self.getToken(TeradataParser.SCIENTIFIC_DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(TeradataParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScientificDecimalLiteral" ):
                listener.enterScientificDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScientificDecimalLiteral" ):
                listener.exitScientificDecimalLiteral(self)



    def number(self):

        localctx = TeradataParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 1357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                localctx = TeradataParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.MINUS:
                    self.state = 1325
                    self.match(TeradataParser.MINUS)


                self.state = 1328
                self.match(TeradataParser.DECIMAL_VALUE)
                pass

            elif la_ == 2:
                localctx = TeradataParser.ScientificDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.MINUS:
                    self.state = 1329
                    self.match(TeradataParser.MINUS)


                self.state = 1332
                self.match(TeradataParser.SCIENTIFIC_DECIMAL_VALUE)
                pass

            elif la_ == 3:
                localctx = TeradataParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.MINUS:
                    self.state = 1333
                    self.match(TeradataParser.MINUS)


                self.state = 1336
                self.match(TeradataParser.INTEGER_VALUE)
                pass

            elif la_ == 4:
                localctx = TeradataParser.BigIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.MINUS:
                    self.state = 1337
                    self.match(TeradataParser.MINUS)


                self.state = 1340
                self.match(TeradataParser.BIGINT_LITERAL)
                pass

            elif la_ == 5:
                localctx = TeradataParser.SmallIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.MINUS:
                    self.state = 1341
                    self.match(TeradataParser.MINUS)


                self.state = 1344
                self.match(TeradataParser.SMALLINT_LITERAL)
                pass

            elif la_ == 6:
                localctx = TeradataParser.TinyIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.MINUS:
                    self.state = 1345
                    self.match(TeradataParser.MINUS)


                self.state = 1348
                self.match(TeradataParser.TINYINT_LITERAL)
                pass

            elif la_ == 7:
                localctx = TeradataParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.MINUS:
                    self.state = 1349
                    self.match(TeradataParser.MINUS)


                self.state = 1352
                self.match(TeradataParser.DOUBLE_LITERAL)
                pass

            elif la_ == 8:
                localctx = TeradataParser.BigDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TeradataParser.MINUS:
                    self.state = 1353
                    self.match(TeradataParser.MINUS)


                self.state = 1356
                self.match(TeradataParser.BIGDECIMAL_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(TeradataParser.SHOW, 0)

        def TABLES(self):
            return self.getToken(TeradataParser.TABLES, 0)

        def COLUMNS(self):
            return self.getToken(TeradataParser.COLUMNS, 0)

        def COLUMN(self):
            return self.getToken(TeradataParser.COLUMN, 0)

        def PARTITIONS(self):
            return self.getToken(TeradataParser.PARTITIONS, 0)

        def FUNCTIONS(self):
            return self.getToken(TeradataParser.FUNCTIONS, 0)

        def DATABASES(self):
            return self.getToken(TeradataParser.DATABASES, 0)

        def ADD(self):
            return self.getToken(TeradataParser.ADD, 0)

        def OVER(self):
            return self.getToken(TeradataParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(TeradataParser.PARTITION, 0)

        def RANGE(self):
            return self.getToken(TeradataParser.RANGE, 0)

        def PRESERVE(self):
            return self.getToken(TeradataParser.PRESERVE, 0)

        def ROWS(self):
            return self.getToken(TeradataParser.ROWS, 0)

        def PRECEDING(self):
            return self.getToken(TeradataParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(TeradataParser.FOLLOWING, 0)

        def CURRENT(self):
            return self.getToken(TeradataParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(TeradataParser.ROW, 0)

        def LAST(self):
            return self.getToken(TeradataParser.LAST, 0)

        def FIRST(self):
            return self.getToken(TeradataParser.FIRST, 0)

        def MAP(self):
            return self.getToken(TeradataParser.MAP, 0)

        def ARRAY(self):
            return self.getToken(TeradataParser.ARRAY, 0)

        def STRUCT(self):
            return self.getToken(TeradataParser.STRUCT, 0)

        def LATERAL(self):
            return self.getToken(TeradataParser.LATERAL, 0)

        def WINDOW(self):
            return self.getToken(TeradataParser.WINDOW, 0)

        def REDUCE(self):
            return self.getToken(TeradataParser.REDUCE, 0)

        def TRANSFORM(self):
            return self.getToken(TeradataParser.TRANSFORM, 0)

        def USING(self):
            return self.getToken(TeradataParser.USING, 0)

        def SERDE(self):
            return self.getToken(TeradataParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(TeradataParser.SERDEPROPERTIES, 0)

        def RECORDREADER(self):
            return self.getToken(TeradataParser.RECORDREADER, 0)

        def DELIMITED(self):
            return self.getToken(TeradataParser.DELIMITED, 0)

        def FIELDS(self):
            return self.getToken(TeradataParser.FIELDS, 0)

        def TERMINATED(self):
            return self.getToken(TeradataParser.TERMINATED, 0)

        def COLLECTION(self):
            return self.getToken(TeradataParser.COLLECTION, 0)

        def ITEMS(self):
            return self.getToken(TeradataParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(TeradataParser.KEYS, 0)

        def ESCAPED(self):
            return self.getToken(TeradataParser.ESCAPED, 0)

        def LINES(self):
            return self.getToken(TeradataParser.LINES, 0)

        def SEPARATED(self):
            return self.getToken(TeradataParser.SEPARATED, 0)

        def EXTENDED(self):
            return self.getToken(TeradataParser.EXTENDED, 0)

        def REFRESH(self):
            return self.getToken(TeradataParser.REFRESH, 0)

        def CLEAR(self):
            return self.getToken(TeradataParser.CLEAR, 0)

        def CACHE(self):
            return self.getToken(TeradataParser.CACHE, 0)

        def UNCACHE(self):
            return self.getToken(TeradataParser.UNCACHE, 0)

        def LAZY(self):
            return self.getToken(TeradataParser.LAZY, 0)

        def GLOBAL(self):
            return self.getToken(TeradataParser.GLOBAL, 0)

        def TEMPORARY(self):
            return self.getToken(TeradataParser.TEMPORARY, 0)

        def VOLATILE(self):
            return self.getToken(TeradataParser.VOLATILE, 0)

        def OPTIONS(self):
            return self.getToken(TeradataParser.OPTIONS, 0)

        def GROUPING(self):
            return self.getToken(TeradataParser.GROUPING, 0)

        def CUBE(self):
            return self.getToken(TeradataParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(TeradataParser.ROLLUP, 0)

        def EXPLAIN(self):
            return self.getToken(TeradataParser.EXPLAIN, 0)

        def FORMAT(self):
            return self.getToken(TeradataParser.FORMAT, 0)

        def LOGICAL(self):
            return self.getToken(TeradataParser.LOGICAL, 0)

        def FORMATTED(self):
            return self.getToken(TeradataParser.FORMATTED, 0)

        def CODEGEN(self):
            return self.getToken(TeradataParser.CODEGEN, 0)

        def TABLESAMPLE(self):
            return self.getToken(TeradataParser.TABLESAMPLE, 0)

        def USE(self):
            return self.getToken(TeradataParser.USE, 0)

        def TO(self):
            return self.getToken(TeradataParser.TO, 0)

        def BUCKET(self):
            return self.getToken(TeradataParser.BUCKET, 0)

        def PERCENTLIT(self):
            return self.getToken(TeradataParser.PERCENTLIT, 0)

        def OUT(self):
            return self.getToken(TeradataParser.OUT, 0)

        def OF(self):
            return self.getToken(TeradataParser.OF, 0)

        def MULTISET(self):
            return self.getToken(TeradataParser.MULTISET, 0)

        def SET(self):
            return self.getToken(TeradataParser.SET, 0)

        def RESET(self):
            return self.getToken(TeradataParser.RESET, 0)

        def VIEW(self):
            return self.getToken(TeradataParser.VIEW, 0)

        def REPLACE(self):
            return self.getToken(TeradataParser.REPLACE, 0)

        def IF(self):
            return self.getToken(TeradataParser.IF, 0)

        def NO(self):
            return self.getToken(TeradataParser.NO, 0)

        def DATA(self):
            return self.getToken(TeradataParser.DATA, 0)

        def START(self):
            return self.getToken(TeradataParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(TeradataParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(TeradataParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(TeradataParser.ROLLBACK, 0)

        def SORT(self):
            return self.getToken(TeradataParser.SORT, 0)

        def CLUSTER(self):
            return self.getToken(TeradataParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(TeradataParser.DISTRIBUTE, 0)

        def UNSET(self):
            return self.getToken(TeradataParser.UNSET, 0)

        def TBLPROPERTIES(self):
            return self.getToken(TeradataParser.TBLPROPERTIES, 0)

        def SKEWED(self):
            return self.getToken(TeradataParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(TeradataParser.STORED, 0)

        def DIRECTORIES(self):
            return self.getToken(TeradataParser.DIRECTORIES, 0)

        def LOCATION(self):
            return self.getToken(TeradataParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(TeradataParser.EXCHANGE, 0)

        def ARCHIVE(self):
            return self.getToken(TeradataParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(TeradataParser.UNARCHIVE, 0)

        def FILEFORMAT(self):
            return self.getToken(TeradataParser.FILEFORMAT, 0)

        def TOUCH(self):
            return self.getToken(TeradataParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(TeradataParser.COMPACT, 0)

        def CONCATENATE(self):
            return self.getToken(TeradataParser.CONCATENATE, 0)

        def CHANGE(self):
            return self.getToken(TeradataParser.CHANGE, 0)

        def CASCADE(self):
            return self.getToken(TeradataParser.CASCADE, 0)

        def RESTRICT(self):
            return self.getToken(TeradataParser.RESTRICT, 0)

        def BUCKETS(self):
            return self.getToken(TeradataParser.BUCKETS, 0)

        def CLUSTERED(self):
            return self.getToken(TeradataParser.CLUSTERED, 0)

        def SORTED(self):
            return self.getToken(TeradataParser.SORTED, 0)

        def PURGE(self):
            return self.getToken(TeradataParser.PURGE, 0)

        def INPUTFORMAT(self):
            return self.getToken(TeradataParser.INPUTFORMAT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(TeradataParser.OUTPUTFORMAT, 0)

        def DBPROPERTIES(self):
            return self.getToken(TeradataParser.DBPROPERTIES, 0)

        def DFS(self):
            return self.getToken(TeradataParser.DFS, 0)

        def TRUNCATE(self):
            return self.getToken(TeradataParser.TRUNCATE, 0)

        def COMPUTE(self):
            return self.getToken(TeradataParser.COMPUTE, 0)

        def LIST(self):
            return self.getToken(TeradataParser.LIST, 0)

        def STATISTICS(self):
            return self.getToken(TeradataParser.STATISTICS, 0)

        def ANALYZE(self):
            return self.getToken(TeradataParser.ANALYZE, 0)

        def PARTITIONED(self):
            return self.getToken(TeradataParser.PARTITIONED, 0)

        def EXTERNAL(self):
            return self.getToken(TeradataParser.EXTERNAL, 0)

        def DEFINED(self):
            return self.getToken(TeradataParser.DEFINED, 0)

        def RECORDWRITER(self):
            return self.getToken(TeradataParser.RECORDWRITER, 0)

        def REVOKE(self):
            return self.getToken(TeradataParser.REVOKE, 0)

        def GRANT(self):
            return self.getToken(TeradataParser.GRANT, 0)

        def LOCK(self):
            return self.getToken(TeradataParser.LOCK, 0)

        def UNLOCK(self):
            return self.getToken(TeradataParser.UNLOCK, 0)

        def MSCK(self):
            return self.getToken(TeradataParser.MSCK, 0)

        def REPAIR(self):
            return self.getToken(TeradataParser.REPAIR, 0)

        def RECOVER(self):
            return self.getToken(TeradataParser.RECOVER, 0)

        def EXPORT(self):
            return self.getToken(TeradataParser.EXPORT, 0)

        def IMPORT(self):
            return self.getToken(TeradataParser.IMPORT, 0)

        def LOAD(self):
            return self.getToken(TeradataParser.LOAD, 0)

        def VALUES(self):
            return self.getToken(TeradataParser.VALUES, 0)

        def COMMENT(self):
            return self.getToken(TeradataParser.COMMENT, 0)

        def ROLE(self):
            return self.getToken(TeradataParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(TeradataParser.ROLES, 0)

        def COMPACTIONS(self):
            return self.getToken(TeradataParser.COMPACTIONS, 0)

        def PRINCIPALS(self):
            return self.getToken(TeradataParser.PRINCIPALS, 0)

        def TRANSACTIONS(self):
            return self.getToken(TeradataParser.TRANSACTIONS, 0)

        def INDEX(self):
            return self.getToken(TeradataParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(TeradataParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(TeradataParser.LOCKS, 0)

        def OPTION(self):
            return self.getToken(TeradataParser.OPTION, 0)

        def LOCAL(self):
            return self.getToken(TeradataParser.LOCAL, 0)

        def INPATH(self):
            return self.getToken(TeradataParser.INPATH, 0)

        def ASC(self):
            return self.getToken(TeradataParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataParser.DESC, 0)

        def LIMIT(self):
            return self.getToken(TeradataParser.LIMIT, 0)

        def RENAME(self):
            return self.getToken(TeradataParser.RENAME, 0)

        def SETS(self):
            return self.getToken(TeradataParser.SETS, 0)

        def UNIQUE(self):
            return self.getToken(TeradataParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(TeradataParser.PRIMARY, 0)

        def AT(self):
            return self.getToken(TeradataParser.AT, 0)

        def NULLS(self):
            return self.getToken(TeradataParser.NULLS, 0)

        def OVERWRITE(self):
            return self.getToken(TeradataParser.OVERWRITE, 0)

        def ALL(self):
            return self.getToken(TeradataParser.ALL, 0)

        def ALTER(self):
            return self.getToken(TeradataParser.ALTER, 0)

        def AS(self):
            return self.getToken(TeradataParser.AS, 0)

        def BETWEEN(self):
            return self.getToken(TeradataParser.BETWEEN, 0)

        def BY(self):
            return self.getToken(TeradataParser.BY, 0)

        def CREATE(self):
            return self.getToken(TeradataParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(TeradataParser.DELETE, 0)

        def DESCRIBE(self):
            return self.getToken(TeradataParser.DESCRIBE, 0)

        def DROP(self):
            return self.getToken(TeradataParser.DROP, 0)

        def EXISTS(self):
            return self.getToken(TeradataParser.EXISTS, 0)

        def FALSE(self):
            return self.getToken(TeradataParser.FALSE, 0)

        def FOR(self):
            return self.getToken(TeradataParser.FOR, 0)

        def GROUP(self):
            return self.getToken(TeradataParser.GROUP, 0)

        def IN(self):
            return self.getToken(TeradataParser.IN, 0)

        def INSERT(self):
            return self.getToken(TeradataParser.INSERT, 0)

        def INTO(self):
            return self.getToken(TeradataParser.INTO, 0)

        def IS(self):
            return self.getToken(TeradataParser.IS, 0)

        def LIKE(self):
            return self.getToken(TeradataParser.LIKE, 0)

        def UPDATE(self):
            return self.getToken(TeradataParser.UPDATE, 0)

        def NULL(self):
            return self.getToken(TeradataParser.NULL, 0)

        def ORDER(self):
            return self.getToken(TeradataParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(TeradataParser.OUTER, 0)

        def TABLE(self):
            return self.getToken(TeradataParser.TABLE, 0)

        def TRUE(self):
            return self.getToken(TeradataParser.TRUE, 0)

        def WITH(self):
            return self.getToken(TeradataParser.WITH, 0)

        def RLIKE(self):
            return self.getToken(TeradataParser.RLIKE, 0)

        def AND(self):
            return self.getToken(TeradataParser.AND, 0)

        def CASE(self):
            return self.getToken(TeradataParser.CASE, 0)

        def CAST(self):
            return self.getToken(TeradataParser.CAST, 0)

        def DISTINCT(self):
            return self.getToken(TeradataParser.DISTINCT, 0)

        def DIV(self):
            return self.getToken(TeradataParser.DIV, 0)

        def ELSE(self):
            return self.getToken(TeradataParser.ELSE, 0)

        def END(self):
            return self.getToken(TeradataParser.END, 0)

        def FUNCTION(self):
            return self.getToken(TeradataParser.FUNCTION, 0)

        def BYTEINT(self):
            return self.getToken(TeradataParser.BYTEINT, 0)

        def SMALLINT(self):
            return self.getToken(TeradataParser.SMALLINT, 0)

        def INT(self):
            return self.getToken(TeradataParser.INT, 0)

        def INTEGER(self):
            return self.getToken(TeradataParser.INTEGER, 0)

        def BIGINT(self):
            return self.getToken(TeradataParser.BIGINT, 0)

        def DECIMAL(self):
            return self.getToken(TeradataParser.DECIMAL, 0)

        def DEC(self):
            return self.getToken(TeradataParser.DEC, 0)

        def NUMERIC(self):
            return self.getToken(TeradataParser.NUMERIC, 0)

        def NUMBER(self):
            return self.getToken(TeradataParser.NUMBER, 0)

        def FLOAT(self):
            return self.getToken(TeradataParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(TeradataParser.REAL, 0)

        def DOUBLE_PRECISION(self):
            return self.getToken(TeradataParser.DOUBLE_PRECISION, 0)

        def DATE(self):
            return self.getToken(TeradataParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(TeradataParser.DATETIME, 0)

        def TIMESTAMP(self):
            return self.getToken(TeradataParser.TIMESTAMP, 0)

        def CHAR(self):
            return self.getToken(TeradataParser.CHAR, 0)

        def CHARACTER(self):
            return self.getToken(TeradataParser.CHARACTER, 0)

        def VARCHAR(self):
            return self.getToken(TeradataParser.VARCHAR, 0)

        def CHARACTER_VARYING(self):
            return self.getToken(TeradataParser.CHARACTER_VARYING, 0)

        def CHAR_VARYING(self):
            return self.getToken(TeradataParser.CHAR_VARYING, 0)

        def LONG_VARCHAR(self):
            return self.getToken(TeradataParser.LONG_VARCHAR, 0)

        def INTERVAL(self):
            return self.getToken(TeradataParser.INTERVAL, 0)

        def MACRO(self):
            return self.getToken(TeradataParser.MACRO, 0)

        def OR(self):
            return self.getToken(TeradataParser.OR, 0)

        def STRATIFY(self):
            return self.getToken(TeradataParser.STRATIFY, 0)

        def THEN(self):
            return self.getToken(TeradataParser.THEN, 0)

        def UNBOUNDED(self):
            return self.getToken(TeradataParser.UNBOUNDED, 0)

        def WHEN(self):
            return self.getToken(TeradataParser.WHEN, 0)

        def DATABASE(self):
            return self.getToken(TeradataParser.DATABASE, 0)

        def SELECT(self):
            return self.getToken(TeradataParser.SELECT, 0)

        def FROM(self):
            return self.getToken(TeradataParser.FROM, 0)

        def WHERE(self):
            return self.getToken(TeradataParser.WHERE, 0)

        def HAVING(self):
            return self.getToken(TeradataParser.HAVING, 0)

        def NOT(self):
            return self.getToken(TeradataParser.NOT, 0)

        def CURRENT_DATE(self):
            return self.getToken(TeradataParser.CURRENT_DATE, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(TeradataParser.CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return TeradataParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)




    def nonReserved(self):

        localctx = TeradataParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1359
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TeradataParser.SELECT) | (1 << TeradataParser.FROM) | (1 << TeradataParser.ADD) | (1 << TeradataParser.AS) | (1 << TeradataParser.ALL) | (1 << TeradataParser.DISTINCT) | (1 << TeradataParser.WHERE) | (1 << TeradataParser.GROUP) | (1 << TeradataParser.BY) | (1 << TeradataParser.GROUPING) | (1 << TeradataParser.SETS) | (1 << TeradataParser.CUBE) | (1 << TeradataParser.ROLLUP) | (1 << TeradataParser.ORDER) | (1 << TeradataParser.HAVING) | (1 << TeradataParser.LIMIT) | (1 << TeradataParser.AT) | (1 << TeradataParser.OR) | (1 << TeradataParser.AND) | (1 << TeradataParser.IN) | (1 << TeradataParser.NOT) | (1 << TeradataParser.NO) | (1 << TeradataParser.EXISTS) | (1 << TeradataParser.BETWEEN) | (1 << TeradataParser.LIKE) | (1 << TeradataParser.RLIKE) | (1 << TeradataParser.IS) | (1 << TeradataParser.NULL) | (1 << TeradataParser.TRUE) | (1 << TeradataParser.FALSE) | (1 << TeradataParser.NULLS) | (1 << TeradataParser.ASC) | (1 << TeradataParser.DESC) | (1 << TeradataParser.FOR) | (1 << TeradataParser.BYTEINT) | (1 << TeradataParser.SMALLINT) | (1 << TeradataParser.INT) | (1 << TeradataParser.INTEGER) | (1 << TeradataParser.BIGINT) | (1 << TeradataParser.DECIMAL) | (1 << TeradataParser.DEC) | (1 << TeradataParser.NUMERIC) | (1 << TeradataParser.NUMBER) | (1 << TeradataParser.FLOAT) | (1 << TeradataParser.REAL) | (1 << TeradataParser.DOUBLE_PRECISION) | (1 << TeradataParser.DATE) | (1 << TeradataParser.DATETIME) | (1 << TeradataParser.TIMESTAMP) | (1 << TeradataParser.CHAR) | (1 << TeradataParser.CHARACTER) | (1 << TeradataParser.VARCHAR) | (1 << TeradataParser.CHARACTER_VARYING) | (1 << TeradataParser.CHAR_VARYING) | (1 << TeradataParser.LONG_VARCHAR) | (1 << TeradataParser.INTERVAL) | (1 << TeradataParser.CASE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TeradataParser.WHEN - 64)) | (1 << (TeradataParser.THEN - 64)) | (1 << (TeradataParser.ELSE - 64)) | (1 << (TeradataParser.END - 64)) | (1 << (TeradataParser.OUTER - 64)) | (1 << (TeradataParser.LATERAL - 64)) | (1 << (TeradataParser.WINDOW - 64)) | (1 << (TeradataParser.OVER - 64)) | (1 << (TeradataParser.PARTITION - 64)) | (1 << (TeradataParser.RANGE - 64)) | (1 << (TeradataParser.PRESERVE - 64)) | (1 << (TeradataParser.ROWS - 64)) | (1 << (TeradataParser.UNBOUNDED - 64)) | (1 << (TeradataParser.PRECEDING - 64)) | (1 << (TeradataParser.FOLLOWING - 64)) | (1 << (TeradataParser.CURRENT - 64)) | (1 << (TeradataParser.FIRST - 64)) | (1 << (TeradataParser.LAST - 64)) | (1 << (TeradataParser.ROW - 64)) | (1 << (TeradataParser.WITH - 64)) | (1 << (TeradataParser.VALUES - 64)) | (1 << (TeradataParser.CREATE - 64)) | (1 << (TeradataParser.TABLE - 64)) | (1 << (TeradataParser.VIEW - 64)) | (1 << (TeradataParser.REPLACE - 64)) | (1 << (TeradataParser.INSERT - 64)) | (1 << (TeradataParser.UPDATE - 64)) | (1 << (TeradataParser.DELETE - 64)) | (1 << (TeradataParser.INTO - 64)) | (1 << (TeradataParser.DESCRIBE - 64)) | (1 << (TeradataParser.EXPLAIN - 64)) | (1 << (TeradataParser.FORMAT - 64)) | (1 << (TeradataParser.LOGICAL - 64)) | (1 << (TeradataParser.CODEGEN - 64)) | (1 << (TeradataParser.CAST - 64)) | (1 << (TeradataParser.SHOW - 64)) | (1 << (TeradataParser.TABLES - 64)) | (1 << (TeradataParser.COLUMNS - 64)) | (1 << (TeradataParser.COLUMN - 64)) | (1 << (TeradataParser.USE - 64)) | (1 << (TeradataParser.PARTITIONS - 64)) | (1 << (TeradataParser.FUNCTIONS - 64)) | (1 << (TeradataParser.DROP - 64)) | (1 << (TeradataParser.TO - 64)) | (1 << (TeradataParser.TABLESAMPLE - 64)) | (1 << (TeradataParser.STRATIFY - 64)) | (1 << (TeradataParser.ALTER - 64)) | (1 << (TeradataParser.RENAME - 64)) | (1 << (TeradataParser.ARRAY - 64)) | (1 << (TeradataParser.MAP - 64)) | (1 << (TeradataParser.STRUCT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (TeradataParser.COMMENT - 128)) | (1 << (TeradataParser.MULTISET - 128)) | (1 << (TeradataParser.SET - 128)) | (1 << (TeradataParser.RESET - 128)) | (1 << (TeradataParser.DATA - 128)) | (1 << (TeradataParser.START - 128)) | (1 << (TeradataParser.TRANSACTION - 128)) | (1 << (TeradataParser.COMMIT - 128)) | (1 << (TeradataParser.ROLLBACK - 128)) | (1 << (TeradataParser.MACRO - 128)) | (1 << (TeradataParser.IF - 128)) | (1 << (TeradataParser.PERCENTLIT - 128)) | (1 << (TeradataParser.BUCKET - 128)) | (1 << (TeradataParser.OUT - 128)) | (1 << (TeradataParser.OF - 128)) | (1 << (TeradataParser.SORT - 128)) | (1 << (TeradataParser.CLUSTER - 128)) | (1 << (TeradataParser.DISTRIBUTE - 128)) | (1 << (TeradataParser.OVERWRITE - 128)) | (1 << (TeradataParser.TRANSFORM - 128)) | (1 << (TeradataParser.REDUCE - 128)) | (1 << (TeradataParser.USING - 128)) | (1 << (TeradataParser.SERDE - 128)) | (1 << (TeradataParser.SERDEPROPERTIES - 128)) | (1 << (TeradataParser.RECORDREADER - 128)) | (1 << (TeradataParser.RECORDWRITER - 128)) | (1 << (TeradataParser.DELIMITED - 128)) | (1 << (TeradataParser.FIELDS - 128)) | (1 << (TeradataParser.TERMINATED - 128)) | (1 << (TeradataParser.COLLECTION - 128)) | (1 << (TeradataParser.ITEMS - 128)) | (1 << (TeradataParser.KEYS - 128)) | (1 << (TeradataParser.ESCAPED - 128)) | (1 << (TeradataParser.LINES - 128)) | (1 << (TeradataParser.SEPARATED - 128)) | (1 << (TeradataParser.FUNCTION - 128)) | (1 << (TeradataParser.EXTENDED - 128)) | (1 << (TeradataParser.REFRESH - 128)) | (1 << (TeradataParser.CLEAR - 128)) | (1 << (TeradataParser.CACHE - 128)) | (1 << (TeradataParser.UNCACHE - 128)) | (1 << (TeradataParser.LAZY - 128)) | (1 << (TeradataParser.FORMATTED - 128)) | (1 << (TeradataParser.TEMPORARY - 128)) | (1 << (TeradataParser.GLOBAL - 128)) | (1 << (TeradataParser.VOLATILE - 128)) | (1 << (TeradataParser.OPTIONS - 128)) | (1 << (TeradataParser.UNSET - 128)) | (1 << (TeradataParser.TBLPROPERTIES - 128)) | (1 << (TeradataParser.DBPROPERTIES - 128)) | (1 << (TeradataParser.BUCKETS - 128)) | (1 << (TeradataParser.SKEWED - 128)) | (1 << (TeradataParser.STORED - 128)) | (1 << (TeradataParser.DIRECTORIES - 128)) | (1 << (TeradataParser.LOCATION - 128)) | (1 << (TeradataParser.EXCHANGE - 128)) | (1 << (TeradataParser.ARCHIVE - 128)) | (1 << (TeradataParser.UNARCHIVE - 128)) | (1 << (TeradataParser.FILEFORMAT - 128)) | (1 << (TeradataParser.TOUCH - 128)) | (1 << (TeradataParser.COMPACT - 128)) | (1 << (TeradataParser.CONCATENATE - 128)) | (1 << (TeradataParser.CHANGE - 128)) | (1 << (TeradataParser.CASCADE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (TeradataParser.RESTRICT - 192)) | (1 << (TeradataParser.CLUSTERED - 192)) | (1 << (TeradataParser.SORTED - 192)) | (1 << (TeradataParser.PURGE - 192)) | (1 << (TeradataParser.INPUTFORMAT - 192)) | (1 << (TeradataParser.OUTPUTFORMAT - 192)) | (1 << (TeradataParser.DATABASE - 192)) | (1 << (TeradataParser.DATABASES - 192)) | (1 << (TeradataParser.DFS - 192)) | (1 << (TeradataParser.TRUNCATE - 192)) | (1 << (TeradataParser.ANALYZE - 192)) | (1 << (TeradataParser.COMPUTE - 192)) | (1 << (TeradataParser.LIST - 192)) | (1 << (TeradataParser.STATISTICS - 192)) | (1 << (TeradataParser.PARTITIONED - 192)) | (1 << (TeradataParser.EXTERNAL - 192)) | (1 << (TeradataParser.DEFINED - 192)) | (1 << (TeradataParser.REVOKE - 192)) | (1 << (TeradataParser.GRANT - 192)) | (1 << (TeradataParser.LOCK - 192)) | (1 << (TeradataParser.UNLOCK - 192)) | (1 << (TeradataParser.MSCK - 192)) | (1 << (TeradataParser.REPAIR - 192)) | (1 << (TeradataParser.RECOVER - 192)) | (1 << (TeradataParser.EXPORT - 192)) | (1 << (TeradataParser.IMPORT - 192)) | (1 << (TeradataParser.LOAD - 192)) | (1 << (TeradataParser.ROLE - 192)) | (1 << (TeradataParser.ROLES - 192)) | (1 << (TeradataParser.COMPACTIONS - 192)) | (1 << (TeradataParser.PRINCIPALS - 192)) | (1 << (TeradataParser.TRANSACTIONS - 192)) | (1 << (TeradataParser.INDEX - 192)) | (1 << (TeradataParser.INDEXES - 192)) | (1 << (TeradataParser.UNIQUE - 192)) | (1 << (TeradataParser.PRIMARY - 192)) | (1 << (TeradataParser.LOCKS - 192)) | (1 << (TeradataParser.OPTION - 192)) | (1 << (TeradataParser.LOCAL - 192)) | (1 << (TeradataParser.INPATH - 192)) | (1 << (TeradataParser.CURRENT_DATE - 192)) | (1 << (TeradataParser.CURRENT_TIMESTAMP - 192)))) != 0) or _la==TeradataParser.DIV):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[19] = self.queryTerm_sempred
        self._predicates[49] = self.booleanExpression_sempred
        self._predicates[52] = self.valueExpression_sempred
        self._predicates[53] = self.primaryExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 10)
         




